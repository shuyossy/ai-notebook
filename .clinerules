# アプリケーション概要
- 情報源となるソースを元にAIとチャットできるデスクトップアプリ
- UIはElectronとReact、バックエンドはMastraをベースに開発する

# 実装上の注意
- Mastraについては実装する際はまずMCPでドキュメントや実装例を参考にしてから正確な情報やベストプラクティスに基づいてコーディングすること
- プロジェクト全体を把握して、全ての実装が必要箇所を正しく洗い出してから実装すること
- UIは実際に市場に投入できるくらいレベルの高い、スタイリッシュなUIにすること
- TypeScriptやzodを用いた型安全なコードを意識すること
- electronについてはelectron-react-boilerplateのテンプレートを適用済み
- コメントは日本語で記載すること
- Reactライブラリが使えるのであれば積極的に利用すること
    - 特にUIについてはMUIを第一優先に使い、カスタマイズしたい場合はshadcn/uiを利用すること
    - ライブラリを追加する際は安定稼働バージョンを採用すること
- eslintについては単純なフォーマットエラーの場合は対応する必要はない
- 不明点があれば適当に実装するのではなく、質問すること

# テスト作成時の注意
- 外部ライブラリとの結合をテストする場合はできるだけ実際のライブラリを使用すること
  - 実際のライブラリの利用が難しい場合はモックを利用すること
  - Electron IPCはモックを利用すること
    - モックの実装はsrc/__tests__/test-utils/mockElectronHandler.tsに集約させること
- 下記の観点からテストを作成すること
  - ビジネス的な観点
    - 正常系
    - 異常系
  - 技術的な観点
    - 正常系
    - 異常系
- テストに関連するプロダクトコードのカバレッジを100%にすること
- テスト関連コードはsrc/__test__に配置すること
- テストは古典派的なスタイルで記述すること
  - つまり、単体テストはクラス単位ではなく、一つの振る舞い単位で記述すること
- テストの説明は日本語で記述すること
  - テストの説明は、何をテストしているのか、どのような条件でテストが行われるのかを明確に記述すること
- テストの書き方で不明点があれば次のディレクトリ配下のテストコードを参考にすること
  - src/__tests__/integration
