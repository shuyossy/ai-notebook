# アプリケーション概要
- AIを利用した様々な機能を利用できるデスクトップアプリ
  - 情報源となるソースを元にAIとチャットできる
  - チェックリストを元にAIが指定したソースをレビューする（新規追加）
- UIはElectronとReact、バックエンドはMastraをベースに開発する

# 実装上の注意
- Mastraについては実装する際はまずMCPでドキュメントや実装例を参考にしてから正確な情報やベストプラクティスに基づいてコーディングすること
- プロジェクト全体を把握して、全ての実装が必要箇所を正しく洗い出してから実装すること
- 既存資源（型情報やコンポーネントなど）を積極的に活用して効率的に実装すること
  - 既存のコードの修正は真に必要な場合に限ること
- UIは実際に市場に投入できるくらいレベルの高いUIにすること
- TypeScriptやzodを用いた型安全なコードを意識すること
- electronについてはelectron-react-boilerplateのテンプレートを適用済み
- プロンプトは英語で記載すること
  - プロンプトの内容はベストプラクティスに基づいて実装すること
  - 一般的で自然な英語表現にすること
- コードのコメントは日本語で記載すること
- Reactライブラリが使えるのであれば積極的に利用すること
    - 特にUIについてはMUIを第一優先に使い、カスタマイズしたい場合はshadcn/uiを利用すること
    - ライブラリを追加する際は安定稼働バージョンを採用すること
- eslintについては単純なフォーマットエラーの場合は対応する必要はない

# 代表的なフォルダ説明（いくつかファイルもピックアップして説明）
- `src/db`：データベース関連のコード
  - `schema.ts`：データベースのスキーマ定義
- `src/main/types`：アプリで利用する型・zodスキーマの定義
  - `index.ts`：アプリ全体で利用する型定義
  - `ipc.ts`：Electron IPC通信で利用する型定義
- `src/main`: Electronのメインプロセス関連のコード
  - `src/main.ts`: Electronのメインプロセスのエントリポイント、IPC通信のハンドラの具体的な処理の定義やアプリケーションの初期化処理などを含む
  - `src/main/preload`: ElectronのPreloadスクリプト、レンダラープロセスに公開するハンドラを定義
  - `src/main/store.ts`: electron-storeを利用してアプリケーションの設定や状態の保存・取得を行う、ここではstoreの初期化や設定の定義を行う
  - `src/main/utils`: メインプロセスで利用するユーティリティ関数
    - `src/main/utils/fileExtractor.ts`: 登録されたソースのテキスト情報を抽出する関数
- `src/renderer/components`：Reactコンポーネント
- `src/mastra`: Mastraを利用したAI関連のコード
  - `src/mastra/agents/prompt.ts`: Mastraのエージェントのプロンプト定義を一箇所に集約（エージェントやワークフロー内で利用するプロンプトを定義）
  - `src/mastra/agents/orchestrator.ts`: 汎用チャット機能で利用するAIエージェントの定義（`src/mastra/config`や`src/mastra/model`を呼び出してエージェントを作成する）
  - `src/mastra/workflows`: Mastraのワークフロー定義

# テスト作成時の注意
- 明確な指示がある場合以外はテストコードを作成しないこと
- 外部ライブラリとの結合をテストする場合はできるだけ実際のライブラリを使用すること
  - 実際のライブラリの利用が難しい場合はモックを利用すること
  - Electron IPCはモックを利用すること
    - モックの実装はsrc/__tests__/test-utils/mockElectronHandler.tsに集約させること
- 下記の観点からテストを作成すること
  - ビジネス的な観点
    - 正常系
    - 異常系
  - 技術的な観点
    - 正常系
    - 異常系
- テストに関連するプロダクトコードのカバレッジを100%にすること
- テスト関連コードはsrc/__test__に配置すること
- テストは古典派的なスタイルで記述すること
  - つまり、単体テストはクラス単位ではなく、一つの振る舞い単位で記述すること
- テストの説明は日本語で記述すること
  - テストの説明は、何をテストしているのか、どのような条件でテストが行われるのかを明確に記述すること
- テストの書き方で不明点があれば次のディレクトリ配下のテストコードを参考にすること
  - src/__tests__/integration
