1. ドキュメント概要
本書は、社内向け業務支援システム「WorkFlow²（ワークフロー・スクエア）」の基本設計をまとめたものである。要件定義書を基に、システムの全体構成、機能仕様、非機能要件および主要な設計方針を示す。なお、本書にはレビュー時の指摘ポイントをあえていくつか混在させている。

2. システム概要
- 名称：WorkFlow²（以下、本システム）
- 対象ユーザ：社内全社員（約2,000名）
- 目的：
  1. 書類稟議や申請ワークフローの電子化によるペーパーレス化
  2. 承認履歴の可視化、検索性向上
  3. 各種申請に対する自動リマインド機能の提供（予定）

3. 機能一覧
1. ログイン／認証
   - SSO連携（OpenID Connect）によるシングルサインオン
   - パスワードリセット機能（メールリンク）
   - ※現状、2要素認証の要件が未確定
2. ダッシュボード
   - 自分宛の承認待ちリクエスト一覧
   - 今月の申請件数グラフ
   - ※グラフはハードコーディングでしか実装されていない
3. ワークフロー管理
   - 稟議書・申請書の作成、編集、削除
   - 承認ルートの動的設定
   - ※承認ルートの多段階承認が未テストのケースあり
4. 検索／履歴参照
   - キーワード検索、フィルタ（期間・申請種別・ステータス）
   - ※全文検索エンジン（ElasticSearch）連携設計が曖昧
5. 通知／リマインド
   - 承認待ちリクエストのメール通知（Mailgun）
   - ※バッチ処理のスケジューラ設計が未定義
6. 管理機能
   - ユーザ／組織マスタ管理
   - 権限管理（一般／マネージャ／管理者）
   - ※権限テーブルに未使用のフラグ項目 `is_active` を定義済み

4. 全体アーキテクチャ
- クライアント：React + Redux（Next.js採用）
- APIサーバ：Node.js（Express）、TypeScript
- 認証基盤：Keycloak
- データベース：PostgreSQL 13
- インフラ：AWS（EKS, RDS, S3, CloudWatch）
- CI/CD：GitLab CI／TerraformによるIaC管理
- ※コンテナ間の内部通信にService Mesh（Istio）を導入予定だが要件定義に含まれていない

4.1 モジュール構成
- auth-service：認証・認可処理
- workflow-service：申請・承認ロジック
- notification-service：メール通知・リマインド
- frontend-app：UI層
- ※microservice間通信はRESTのみでgRPCは未検討

5. データ設計
5.1 エンティティ定義（一部抜粋）
テーブル名 | 主キー       | 主なカラム                                                   | 備考
----------|-------------|-------------------------------------------------------------|------------------------------------------
users     | user_id     | user_name, email, department_id                             | department_idは外部キー制約なし（指摘ポイント）
departments | department_id | department_name                                         |
workflows | workflow_id | title, description, created_by, status                       | status列にenumではなく文字列を使用（要修正）
approvals | approval_id | workflow_id, approver_id, result, comment, approved_at       | 承認結果のresultは"A"/"B"/"C"で固定（要拡張性検討）

5.2 インデックス設計
- workflows(created_by): 検索高速化
- approvals(approved_at): 履歴参照
- ※検索頻度の高い `title` に対してインデックスが未設定

6. インターフェース設計
6.1 REST API
メソッド | エンドポイント                 | 説明                             | リクエスト例／レスポンス例
-------|-------------------------------|----------------------------------|--------------------------------
GET    | /api/workflows                | ワークフロー一覧取得             | クエリパラメータ未定義
POST   | /api/workflows                | 新規ワークフロー作成             | ボディに `{ title, description }`
GET    | /api/workflows/{id}           | ワークフロー詳細取得             | ステータスコード 404 の定義漏れ
PUT    | /api/workflows/{id}           | ワークフロー更新                 | PATCH相当の部分更新は未対応
DELETE | /api/workflows/{id}           | ワークフロー削除                 | ソフトデリート or ハードデリート？要定義

6.2 メール通知仕様
- 送信元：no-reply@company.local
- 件名フォーマット：`[WorkFlow²] 承認待ち通知 - {workflow.title}`
- 本文：HTML形式（プレーンテキスト未作成）

7. 非機能要件
1. パフォーマンス
   - ページロード時間 3秒以下
   - 承認待ちリスト検索 1,000件以下で500ms以内
2. 可用性
   - SLA 99.9%
   - マルチAZ構成（RDSは未構成）
3. セキュリティ
   - OWASP Top10対応
   - SQLインジェクション対策（プレースホルダ利用検討中）
   - CSRFトークン未設計
4. スケーラビリティ
   - 水平スケール対応（Kubernetes HPA設定は未定義）

8. 運用・保守
- ログ管理：CloudWatch Logs
- 監視項目：CPU使用率、メモリ、レスポンスタイム
- バックアップ：RDSスナップショット（自動化設定漏れ）
- リリース手順：GitLab CI → ステージング → 本番
  - 本番環境へのデプロイ承認フロー（手順書未整備）

9. 今後の検討事項
- ワークフロー横断分析／レポーティング機能
- モバイルアプリ対応（API最適化検討中）
- SSO以外の認証方式（OAuth2.0, SAML）
