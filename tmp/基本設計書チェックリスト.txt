レビュー用チェックリスト
1. 要件・目的の明確性
   - [ ] ドキュメント冒頭に目的が具体的に記載されているか
   - [ ] 2要素認証やバッチ処理など未確定要素について明確化が必要か

2. 機能設計
   - [ ] 承認ルートの多段階承認要件は網羅されているか
   - [ ] グラフ機能の実装方式がデータドリブンか確認したか
   - [ ] メール通知仕様でプレーンテキスト未定義箇所は問題ないか

3. アーキテクチャ
   - [ ] Service Mesh導入の根拠が要件定義に含まれているか
   - [ ] microservice間はRESTのみで問題ないか、gRPC検討が必要か
   - [ ] インフラ設計でマルチAZや冗長化要件が満たされているか

4. データ設計
   - [ ] 外部キー制約が抜けているテーブルはないか
   - [ ] statusやresultの列にenumではなく文字列が利用されていないか
   - [ ] インデックス設計が検索要件に対応しているか

5. API設計
   - [ ] クエリパラメータやエラーコードの定義漏れはないか
   - [ ] PUTとPATCHの使い分けが明確か
   - [ ] 削除時のソフト／ハードデリート方針が決定されているか

6. 非機能要件
   - [ ] SLA 99.9%の裏付けとして冗長化構成は整備されているか
   - [ ] パフォーマンス要件（ロード時間、検索応答時間）は検証計画があるか
   - [ ] セキュリティ対策（CSRF, XSS, SQLi）は詳細に設計されているか

7. 運用・保守
   - [ ] RDSスナップショットの自動化設定漏れを把握しているか
   - [ ] ログ／監視アラート設定の詳細があるか
   - [ ] リリース承認フローの手順書が整備されているか

8. 検討不足・将来拡張
   - [ ] モバイル対応やレポーティング機能のロードマップは明確か
   - [ ] SSO以外の認証方式検討の必要性を再評価したか

9. その他指摘ポイント
   - [ ] `users.department_id` に外部キー制約が必要か
   - [ ] `workflows.status` のenum化による保守性向上が必要か
   - [ ] 承認結果の `"A"/"B"/"C"` 方式は将来的に拡張困難ではないか
   - [ ] 承認ルート未テストのケースは追加テスト計画があるか
   - [ ] インフラのマルチAZ／HPA設定漏れを早急に補完する必要があるか
