// 空白類（\s）+ よく混入する不可視（Cf）
// \s には SPACE, TAB, CR, LF, VT(\v), FF(\f), NBSP などが含まれる
const RE_EDGE_WS = /[\s\uFEFF\u200B\u200C\u200D\u2060\u2061\u2062\u2063\u2064\u034F]+$/; // 行末削除用
const RE_SPACE_RUN = /[\s\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]{2,}/g;               // 連続空白圧縮（行中）
const RE_INDENT = /^[\s\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]*/;                     // 行頭インデント
const RE_BLANK_LINE = /^[\s\uFEFF\u200B\u200C\u200D\u2060\u2061\u2062\u2063\u2064\u034F]+$/; // 空白のみ行判定
const RE_COMMA_ONLY = /^[\s\uFEFF\u200B\u200C\u200D\u2060\u2061\u2062\u2063\u2064\u034F]*(?:,[\s\uFEFF\u200B\u200C\u200D\u2060\u2061\u2062\u2063\u2064\u034F]*)+$/;


// (1) 行末空白の削除（\s + 代表的な Cf を対象）
if (policy.trimLineEndSpaces) {
  current = current.replace(RE_EDGE_WS, '');
}

// (2) 連続空白の圧縮（インデント保護オプション対応）
if (policy.collapseConsecutiveWhitespaces) {
  if (policy.collapsePreserveIndent) {
    const indentMatch = current.match(RE_INDENT);
    const indent = indentMatch ? indentMatch[0] : '';
    const rest = current.slice(indent.length);
    current = indent + rest.replace(RE_SPACE_RUN, ' ');
  } else {
    current = current.replace(RE_SPACE_RUN, ' ');
  }
}

// (3) カンマのみ行の削除（有効時）
if (policy.removeCommaOnlyLines && RE_COMMA_ONLY.test(current)) {
  current = '';
}

// (5) 空白のみ行→空行（\s + Cf。U+0020 も U+000C もここで確実に該当）
if (RE_BLANK_LINE.test(current)) {
  current = '';
}
