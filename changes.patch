diff --git a/.clinerules b/.clinerules
index 62bc3dae7..41d98cd69 100644
--- a/.clinerules
+++ b/.clinerules
@@ -1,7 +1,7 @@
 # アプリケーション概要
 - AIを利用した様々な機能を利用できるデスクトップアプリ
   - 情報源となるソースを元にAIとチャットできる
-  - チェックリストを元にAIが指定したソースをレビューする（新規追加）
+  - チェックリストを元にAIが指定したソースをレビューする
 - UIはElectronとReact、バックエンドはMastraをベースに開発する
 
 # 実装上の注意
@@ -20,6 +20,7 @@
     - 特にUIについてはMUIを第一優先に使い、カスタマイズしたい場合はshadcn/uiを利用すること
     - ライブラリを追加する際は安定稼働バージョンを採用すること
 - eslintについては単純なフォーマットエラーの場合は対応する必要はない
+- 将来的に本アプリをwebアプリとして利用した場合に、利用者ごとに状態を保持しなければならないような処理の場合はクラスを利用し、アプリで一つの状態を保持するような場合にはモジュールとしてシングルトン変数や関数を利用すること
 
 # 代表的なフォルダ説明（いくつかファイルもピックアップして説明）
 - `src/db`：データベース関連のコード
diff --git a/.erb/configs/webpack.config.base.ts b/.erb/configs/webpack.config.base.ts
index 3e06b6a01..69bbda3bf 100644
--- a/.erb/configs/webpack.config.base.ts
+++ b/.erb/configs/webpack.config.base.ts
@@ -8,7 +8,7 @@ import webpackPaths from './webpack.paths';
 import { dependencies as externals } from '../../release/app/package.json';
 
 const configuration: webpack.Configuration = {
-  externals: [...Object.keys(externals || {})],
+  externals: [...Object.keys(externals || {}), '_http_common'],
 
   stats: 'errors-only',
 
diff --git a/.erb/configs/webpack.config.renderer.dev.dll.ts b/.erb/configs/webpack.config.renderer.dev.dll.ts
index 614b90f04..23a22bf4c 100644
--- a/.erb/configs/webpack.config.renderer.dev.dll.ts
+++ b/.erb/configs/webpack.config.renderer.dev.dll.ts
@@ -25,6 +25,20 @@ const configuration: webpack.Configuration = {
 
   externals: ['fsevents', 'crypto-browserify'],
 
+  /**
+   * ここで Node.js の内部モジュールを空（false）でフォールバックさせる
+   * rendererプロセスの開発環境では、mainプロセス側でのみ利用するパッケージもバンドルしてしまうため
+   * renderer側で利用しないのであれば空にして問題ない
+   */
+  resolve: {
+    fallback: {
+      _http_common: false,
+      // 必要なら他の内部モジュールも同様に設定
+      // http: false,
+      // https: false,
+    },
+  },
+
   /**
    * Use `module` from `webpack.config.renderer.dev.js`
    */
diff --git a/.erb/configs/webpack.config.renderer.prod.ts b/.erb/configs/webpack.config.renderer.prod.ts
index 3cebf30d4..c30a09a42 100644
--- a/.erb/configs/webpack.config.renderer.prod.ts
+++ b/.erb/configs/webpack.config.renderer.prod.ts
@@ -36,6 +36,18 @@ const configuration: webpack.Configuration = {
     },
   },
 
+  /**
+   * ここで Node.js の内部モジュールを空（false）でフォールバックさせる
+   */
+  resolve: {
+    fallback: {
+      _http_common: false, // @ai-sdk/provider-utils/testで参照されるが、テスト用なので空にしても問題ない
+      // 必要なら他の内部モジュールも同様に設定
+      // http: false,
+      // https: false,
+    },
+  },
+
   module: {
     rules: [
       {
diff --git a/package-lock.json b/package-lock.json
index 9fcec925a..2020221d0 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -10,14 +10,15 @@
       "hasInstallScript": true,
       "license": "MIT",
       "dependencies": {
-        "@ai-sdk/openai-compatible": "^0.2.11",
+        "@ai-sdk/openai-compatible": "^0.2.14",
         "@electron/notarize": "^3.0.0",
         "@emotion/react": "^11.14.0",
         "@emotion/styled": "^11.14.0",
         "@gitbeaker/rest": "^42.5.0",
-        "@mastra/core": "^0.8.3",
-        "@mastra/mcp": "^0.4.0",
-        "@mastra/memory": "^0.2.10",
+        "@mastra/core": "^0.10.8",
+        "@mastra/libsql": "^0.11.0",
+        "@mastra/mcp": "^0.10.5",
+        "@mastra/memory": "^0.11.0",
         "@mui/icons-material": "^7.0.2",
         "@mui/material": "^7.0.2",
         "@radix-ui/react-dialog": "^1.1.10",
@@ -37,9 +38,8 @@
         "electron-log": "^5.3.2",
         "electron-store": "^10.0.1",
         "electron-updater": "^6.3.9",
-        "js-tiktoken": "^1.0.20",
         "lucide-react": "^0.503.0",
-        "mastra": "^0.4.9",
+        "mastra": "^0.10.8",
         "mermaid": "^11.6.0",
         "pdfjs-dist": "^5.2.133",
         "postcss": "^8.5.3",
@@ -157,23 +157,6 @@
         "zod": "^3.0.0"
       }
     },
-    "node_modules/@ai-sdk/openai-compatible/node_modules/@ai-sdk/provider-utils": {
-      "version": "2.2.8",
-      "resolved": "https://registry.npmjs.org/@ai-sdk/provider-utils/-/provider-utils-2.2.8.tgz",
-      "integrity": "sha512-fqhG+4sCVv8x7nFzYnFo19ryhAa3w096Kmc3hWxMQfW/TubPOmt3A6tYZhl4mUfQWWQMsuSkLrtjlWuXBVSGQA==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@ai-sdk/provider": "1.1.3",
-        "nanoid": "^3.3.8",
-        "secure-json-parse": "^2.7.0"
-      },
-      "engines": {
-        "node": ">=18"
-      },
-      "peerDependencies": {
-        "zod": "^3.23.8"
-      }
-    },
     "node_modules/@ai-sdk/provider": {
       "version": "1.1.3",
       "resolved": "https://registry.npmjs.org/@ai-sdk/provider/-/provider-1.1.3.tgz",
@@ -187,9 +170,9 @@
       }
     },
     "node_modules/@ai-sdk/provider-utils": {
-      "version": "2.2.7",
-      "resolved": "https://registry.npmjs.org/@ai-sdk/provider-utils/-/provider-utils-2.2.7.tgz",
-      "integrity": "sha512-kM0xS3GWg3aMChh9zfeM+80vEZfXzR3JEUBdycZLtbRZ2TRT8xOj3WodGHPb06sUK5yD7pAXC/P7ctsi2fvUGQ==",
+      "version": "2.2.8",
+      "resolved": "https://registry.npmjs.org/@ai-sdk/provider-utils/-/provider-utils-2.2.8.tgz",
+      "integrity": "sha512-fqhG+4sCVv8x7nFzYnFo19ryhAa3w096Kmc3hWxMQfW/TubPOmt3A6tYZhl4mUfQWWQMsuSkLrtjlWuXBVSGQA==",
       "license": "Apache-2.0",
       "dependencies": {
         "@ai-sdk/provider": "1.1.3",
@@ -204,13 +187,13 @@
       }
     },
     "node_modules/@ai-sdk/react": {
-      "version": "1.2.9",
-      "resolved": "https://registry.npmjs.org/@ai-sdk/react/-/react-1.2.9.tgz",
-      "integrity": "sha512-/VYm8xifyngaqFDLXACk/1czDRCefNCdALUyp+kIX6DUIYUWTM93ISoZ+qJ8+3E+FiJAKBQz61o8lIIl+vYtzg==",
+      "version": "1.2.12",
+      "resolved": "https://registry.npmjs.org/@ai-sdk/react/-/react-1.2.12.tgz",
+      "integrity": "sha512-jK1IZZ22evPZoQW3vlkZ7wvjYGYF+tRBKXtrcolduIkQ/m/sOAVcVeVDUDvh1T91xCnWCdUGCPZg2avZ90mv3g==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@ai-sdk/provider-utils": "2.2.7",
-        "@ai-sdk/ui-utils": "1.2.8",
+        "@ai-sdk/provider-utils": "2.2.8",
+        "@ai-sdk/ui-utils": "1.2.11",
         "swr": "^2.2.5",
         "throttleit": "2.1.0"
       },
@@ -228,13 +211,13 @@
       }
     },
     "node_modules/@ai-sdk/ui-utils": {
-      "version": "1.2.8",
-      "resolved": "https://registry.npmjs.org/@ai-sdk/ui-utils/-/ui-utils-1.2.8.tgz",
-      "integrity": "sha512-nls/IJCY+ks3Uj6G/agNhXqQeLVqhNfoJbuNgCny+nX2veY5ADB91EcZUqVeQ/ionul2SeUswPY6Q/DxteY29Q==",
+      "version": "1.2.11",
+      "resolved": "https://registry.npmjs.org/@ai-sdk/ui-utils/-/ui-utils-1.2.11.tgz",
+      "integrity": "sha512-3zcwCc8ezzFlwp3ZD15wAPjf2Au4s3vAbKsXQVyhxODHcmu0iyPO2Eua6D/vicq/AUm/BAo60r97O6HU+EI0+w==",
       "license": "Apache-2.0",
       "dependencies": {
         "@ai-sdk/provider": "1.1.3",
-        "@ai-sdk/provider-utils": "2.2.7",
+        "@ai-sdk/provider-utils": "2.2.8",
         "zod-to-json-schema": "^3.24.1"
       },
       "engines": {
@@ -279,65 +262,6 @@
         "url": "https://github.com/sponsors/antfu"
       }
     },
-    "node_modules/@anush008/tokenizers": {
-      "version": "0.0.0",
-      "resolved": "https://registry.npmjs.org/@anush008/tokenizers/-/tokenizers-0.0.0.tgz",
-      "integrity": "sha512-IQD9wkVReKAhsEAbDjh/0KrBGTEXelqZLpOBRDaIRvlzZ9sjmUP+gKbpvzyJnei2JHQiE8JAgj7YcNloINbGBw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 10"
-      },
-      "optionalDependencies": {
-        "@anush008/tokenizers-darwin-universal": "0.0.0",
-        "@anush008/tokenizers-linux-x64-gnu": "0.0.0",
-        "@anush008/tokenizers-win32-x64-msvc": "0.0.0"
-      }
-    },
-    "node_modules/@anush008/tokenizers-darwin-universal": {
-      "version": "0.0.0",
-      "resolved": "https://registry.npmjs.org/@anush008/tokenizers-darwin-universal/-/tokenizers-darwin-universal-0.0.0.tgz",
-      "integrity": "sha512-SACpWEooTjFX89dFKRVUhivMxxcZRtA3nJGVepdLyrwTkQ1TZQ8581B5JoXp0TcTMHfgnDaagifvVoBiFEdNCQ==",
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">= 10"
-      }
-    },
-    "node_modules/@anush008/tokenizers-linux-x64-gnu": {
-      "version": "0.0.0",
-      "resolved": "https://registry.npmjs.org/@anush008/tokenizers-linux-x64-gnu/-/tokenizers-linux-x64-gnu-0.0.0.tgz",
-      "integrity": "sha512-TLjByOPWUEq51L3EJkS+slyH57HKJ7lAz/aBtEt7TIPq4QsE2owOPGovByOLIq1x5Wgh9b+a4q2JasrEFSDDhg==",
-      "cpu": [
-        "x64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">= 10"
-      }
-    },
-    "node_modules/@anush008/tokenizers-win32-x64-msvc": {
-      "version": "0.0.0",
-      "resolved": "https://registry.npmjs.org/@anush008/tokenizers-win32-x64-msvc/-/tokenizers-win32-x64-msvc-0.0.0.tgz",
-      "integrity": "sha512-/5kP0G96+Cr6947F0ZetXnmL31YCaN15dbNbh2NHg7TXXRwfqk95+JtPP5Q7v4jbR2xxAmuseBqB4H/V7zKWuw==",
-      "cpu": [
-        "x64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">= 10"
-      }
-    },
     "node_modules/@apidevtools/json-schema-ref-parser": {
       "version": "11.9.3",
       "resolved": "https://registry.npmjs.org/@apidevtools/json-schema-ref-parser/-/json-schema-ref-parser-11.9.3.tgz",
@@ -1267,44 +1191,44 @@
       }
     },
     "node_modules/@babel/code-frame": {
-      "version": "7.26.2",
-      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz",
-      "integrity": "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==",
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
+      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-validator-identifier": "^7.25.9",
+        "@babel/helper-validator-identifier": "^7.27.1",
         "js-tokens": "^4.0.0",
-        "picocolors": "^1.0.0"
+        "picocolors": "^1.1.1"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/compat-data": {
-      "version": "7.26.8",
-      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.26.8.tgz",
-      "integrity": "sha512-oH5UPLMWR3L2wEFLnFJ1TZXqHufiTKAiLfqw5zkhS4dKXLJ10yVztfil/twG8EDTA4F/tvVNw9nOl4ZMslB8rQ==",
+      "version": "7.27.5",
+      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.27.5.tgz",
+      "integrity": "sha512-KiRAp/VoJaWkkte84TvUd9qjdbZAdiqyvMxrGl1N6vzFogKmaLgoM3L1kgtLicp2HP5fBJS8JrZKLVIZGVJAVg==",
       "license": "MIT",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/core": {
-      "version": "7.26.10",
-      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.26.10.tgz",
-      "integrity": "sha512-vMqyb7XCDMPvJFFOaT9kxtiRh42GwlZEg1/uIgtZshS5a/8OaduUfCi7kynKgc3Tw/6Uo2D+db9qBttghhmxwQ==",
+      "version": "7.27.4",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.27.4.tgz",
+      "integrity": "sha512-bXYxrXFubeYdvB0NhD/NBB3Qi6aZeV20GOWVI47t2dkecCEoneR4NPVcb7abpXDEvejgrUfFtG6vG/zxAKmg+g==",
       "license": "MIT",
       "dependencies": {
         "@ampproject/remapping": "^2.2.0",
-        "@babel/code-frame": "^7.26.2",
-        "@babel/generator": "^7.26.10",
-        "@babel/helper-compilation-targets": "^7.26.5",
-        "@babel/helper-module-transforms": "^7.26.0",
-        "@babel/helpers": "^7.26.10",
-        "@babel/parser": "^7.26.10",
-        "@babel/template": "^7.26.9",
-        "@babel/traverse": "^7.26.10",
-        "@babel/types": "^7.26.10",
+        "@babel/code-frame": "^7.27.1",
+        "@babel/generator": "^7.27.3",
+        "@babel/helper-compilation-targets": "^7.27.2",
+        "@babel/helper-module-transforms": "^7.27.3",
+        "@babel/helpers": "^7.27.4",
+        "@babel/parser": "^7.27.4",
+        "@babel/template": "^7.27.2",
+        "@babel/traverse": "^7.27.4",
+        "@babel/types": "^7.27.3",
         "convert-source-map": "^2.0.0",
         "debug": "^4.1.0",
         "gensync": "^1.0.0-beta.2",
@@ -1329,13 +1253,13 @@
       }
     },
     "node_modules/@babel/generator": {
-      "version": "7.27.0",
-      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.0.tgz",
-      "integrity": "sha512-VybsKvpiN1gU1sdMZIp7FcqphVVKEwcuj02x73uvcHE0PTihx1nlBcowYWhDwjpoAXRv43+gDzyggGnn1XZhVw==",
+      "version": "7.27.5",
+      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.5.tgz",
+      "integrity": "sha512-ZGhA37l0e/g2s1Cnzdix0O3aLYm66eF8aufiVteOgnwxgnRP8GoyMj7VWsgWnQbVKXyge7hqrFh2K2TQM6t1Hw==",
       "license": "MIT",
       "dependencies": {
-        "@babel/parser": "^7.27.0",
-        "@babel/types": "^7.27.0",
+        "@babel/parser": "^7.27.5",
+        "@babel/types": "^7.27.3",
         "@jridgewell/gen-mapping": "^0.3.5",
         "@jridgewell/trace-mapping": "^0.3.25",
         "jsesc": "^3.0.2"
@@ -1372,13 +1296,13 @@
       }
     },
     "node_modules/@babel/helper-compilation-targets": {
-      "version": "7.27.0",
-      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.0.tgz",
-      "integrity": "sha512-LVk7fbXml0H2xH34dFzKQ7TDZ2G4/rVTOrq9V+icbbadjbVxxeFeDsNHv2SrZeWoA+6ZiTyWYWtScEIW07EAcA==",
+      "version": "7.27.2",
+      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
+      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
       "license": "MIT",
       "dependencies": {
-        "@babel/compat-data": "^7.26.8",
-        "@babel/helper-validator-option": "^7.25.9",
+        "@babel/compat-data": "^7.27.2",
+        "@babel/helper-validator-option": "^7.27.1",
         "browserslist": "^4.24.0",
         "lru-cache": "^5.1.1",
         "semver": "^6.3.1"
@@ -1488,27 +1412,27 @@
       }
     },
     "node_modules/@babel/helper-module-imports": {
-      "version": "7.25.9",
-      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz",
-      "integrity": "sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==",
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
+      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
       "license": "MIT",
       "dependencies": {
-        "@babel/traverse": "^7.25.9",
-        "@babel/types": "^7.25.9"
+        "@babel/traverse": "^7.27.1",
+        "@babel/types": "^7.27.1"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-module-transforms": {
-      "version": "7.26.0",
-      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz",
-      "integrity": "sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==",
+      "version": "7.27.3",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
+      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-module-imports": "^7.25.9",
-        "@babel/helper-validator-identifier": "^7.25.9",
-        "@babel/traverse": "^7.25.9"
+        "@babel/helper-module-imports": "^7.27.1",
+        "@babel/helper-validator-identifier": "^7.27.1",
+        "@babel/traverse": "^7.27.3"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -1605,27 +1529,27 @@
       }
     },
     "node_modules/@babel/helper-string-parser": {
-      "version": "7.25.9",
-      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz",
-      "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==",
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
+      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
       "license": "MIT",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-validator-identifier": {
-      "version": "7.25.9",
-      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz",
-      "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==",
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
+      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
       "license": "MIT",
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/helper-validator-option": {
-      "version": "7.25.9",
-      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz",
-      "integrity": "sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==",
+      "version": "7.27.1",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
+      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
       "license": "MIT",
       "engines": {
         "node": ">=6.9.0"
@@ -1647,25 +1571,25 @@
       }
     },
     "node_modules/@babel/helpers": {
-      "version": "7.27.0",
-      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.0.tgz",
-      "integrity": "sha512-U5eyP/CTFPuNE3qk+WZMxFkp/4zUzdceQlfzf7DdGdhp+Fezd7HD+i8Y24ZuTMKX3wQBld449jijbGq6OdGNQg==",
+      "version": "7.27.6",
+      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
+      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
       "license": "MIT",
       "dependencies": {
-        "@babel/template": "^7.27.0",
-        "@babel/types": "^7.27.0"
+        "@babel/template": "^7.27.2",
+        "@babel/types": "^7.27.6"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/parser": {
-      "version": "7.27.0",
-      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.0.tgz",
-      "integrity": "sha512-iaepho73/2Pz7w2eMS0Q5f83+0RKI7i4xmiYeBmDzfRVbQtTOG7Ts0S4HzJVsTMGI9keU8rNfuZr8DKfSt7Yyg==",
+      "version": "7.27.5",
+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.5.tgz",
+      "integrity": "sha512-OsQd175SxWkGlzbny8J3K8TnnDD0N3lrIUtB92xwyRpzaenGZhxDvxN/JgU00U3CDZNj9tPuDJ5H0WS4Nt3vKg==",
       "license": "MIT",
       "dependencies": {
-        "@babel/types": "^7.27.0"
+        "@babel/types": "^7.27.3"
       },
       "bin": {
         "parser": "bin/babel-parser.js"
@@ -3192,30 +3116,30 @@
       }
     },
     "node_modules/@babel/template": {
-      "version": "7.27.0",
-      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.0.tgz",
-      "integrity": "sha512-2ncevenBqXI6qRMukPlXwHKHchC7RyMuu4xv5JBXRfOGVcTy1mXCD12qrp7Jsoxll1EV3+9sE4GugBVRjT2jFA==",
+      "version": "7.27.2",
+      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
+      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
       "license": "MIT",
       "dependencies": {
-        "@babel/code-frame": "^7.26.2",
-        "@babel/parser": "^7.27.0",
-        "@babel/types": "^7.27.0"
+        "@babel/code-frame": "^7.27.1",
+        "@babel/parser": "^7.27.2",
+        "@babel/types": "^7.27.1"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/traverse": {
-      "version": "7.27.0",
-      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.0.tgz",
-      "integrity": "sha512-19lYZFzYVQkkHkl4Cy4WrAVcqBkgvV2YM2TU3xG6DIwO7O3ecbDPfW3yM3bjAGcqcQHi+CCtjMR3dIEHxsd6bA==",
+      "version": "7.27.4",
+      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.4.tgz",
+      "integrity": "sha512-oNcu2QbHqts9BtOWJosOVJapWjBDSxGCpFvikNR5TGDYDQf3JwpIoMzIKrvfoti93cLfPJEG4tH9SPVeyCGgdA==",
       "license": "MIT",
       "dependencies": {
-        "@babel/code-frame": "^7.26.2",
-        "@babel/generator": "^7.27.0",
-        "@babel/parser": "^7.27.0",
-        "@babel/template": "^7.27.0",
-        "@babel/types": "^7.27.0",
+        "@babel/code-frame": "^7.27.1",
+        "@babel/generator": "^7.27.3",
+        "@babel/parser": "^7.27.4",
+        "@babel/template": "^7.27.2",
+        "@babel/types": "^7.27.3",
         "debug": "^4.3.1",
         "globals": "^11.1.0"
       },
@@ -3224,13 +3148,13 @@
       }
     },
     "node_modules/@babel/types": {
-      "version": "7.27.0",
-      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.0.tgz",
-      "integrity": "sha512-H45s8fVLYjbhFH62dIJ3WtmJ6RSPt/3DRO0ZcT2SUiYiQyz3BLVb9ADEnLl91m74aQPS3AzzeajZHYOalWe3bg==",
+      "version": "7.27.6",
+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.6.tgz",
+      "integrity": "sha512-ETyHEk2VHHvl9b9jZP5IHPavHYk57EhanlRRuae9XCpb/j5bDCbPPMOBfCWhnl/7EDJz0jEMCi/RhccCE8r1+Q==",
       "license": "MIT",
       "dependencies": {
-        "@babel/helper-string-parser": "^7.25.9",
-        "@babel/helper-validator-identifier": "^7.25.9"
+        "@babel/helper-string-parser": "^7.27.1",
+        "@babel/helper-validator-identifier": "^7.27.1"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -3289,9 +3213,9 @@
       "license": "Apache-2.0"
     },
     "node_modules/@clack/core": {
-      "version": "0.3.5",
-      "resolved": "https://registry.npmjs.org/@clack/core/-/core-0.3.5.tgz",
-      "integrity": "sha512-5cfhQNH+1VQ2xLQlmzXMqUoiaH0lRBq9/CLW9lTyMbuKLC3+xEK01tHVvyut++mLOn5urSHmkm6I0Lg9MaJSTQ==",
+      "version": "0.5.0",
+      "resolved": "https://registry.npmjs.org/@clack/core/-/core-0.5.0.tgz",
+      "integrity": "sha512-p3y0FIOwaYRUPRcMO7+dlmLh8PSRcrjuTndsiA0WAFbWES0mLZlrjVoBRZ9DzkPFJZG6KGkJmoEAY0ZcVWTkow==",
       "license": "MIT",
       "dependencies": {
         "picocolors": "^1.0.0",
@@ -3299,12 +3223,12 @@
       }
     },
     "node_modules/@clack/prompts": {
-      "version": "0.8.2",
-      "resolved": "https://registry.npmjs.org/@clack/prompts/-/prompts-0.8.2.tgz",
-      "integrity": "sha512-6b9Ab2UiZwJYA9iMyboYyW9yJvAO9V753ZhS+DHKEjZRKAxPPOb7MXXu84lsPFG+vZt6FRFniZ8rXi+zCIw4yQ==",
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@clack/prompts/-/prompts-0.11.0.tgz",
+      "integrity": "sha512-pMN5FcrEw9hUkZA4f+zLlzivQSeQf5dRGJjSUbvVYDLvpKCdQx5OaknvKzgbtXOizhP+SJJJjqEbOe55uKKfAw==",
       "license": "MIT",
       "dependencies": {
-        "@clack/core": "0.3.5",
+        "@clack/core": "0.5.0",
         "picocolors": "^1.0.0",
         "sisteransi": "^1.0.5"
       }
@@ -3395,9 +3319,9 @@
       }
     },
     "node_modules/@electron/asar/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -4229,9 +4153,9 @@
       }
     },
     "node_modules/@esbuild/aix-ppc64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.2.tgz",
-      "integrity": "sha512-wCIboOL2yXZym2cgm6mlA742s9QeJ8DjGVaL39dLN4rRwrOgOyYSnOaFPhKZGLb2ngj4EyfAFjsNJwPXZvseag==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.5.tgz",
+      "integrity": "sha512-9o3TMmpmftaCMepOdA5k/yDw8SfInyzWWTjYTFCX3kPSDJMROQTb8jg+h9Cnwnmm1vOzvxN7gIfB5V2ewpjtGA==",
       "cpu": [
         "ppc64"
       ],
@@ -4245,9 +4169,9 @@
       }
     },
     "node_modules/@esbuild/android-arm": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.2.tgz",
-      "integrity": "sha512-NQhH7jFstVY5x8CKbcfa166GoV0EFkaPkCKBQkdPJFvo5u+nGXLEH/ooniLb3QI8Fk58YAx7nsPLozUWfCBOJA==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.5.tgz",
+      "integrity": "sha512-AdJKSPeEHgi7/ZhuIPtcQKr5RQdo6OO2IL87JkianiMYMPbCtot9fxPbrMiBADOWWm3T2si9stAiVsGbTQFkbA==",
       "cpu": [
         "arm"
       ],
@@ -4261,9 +4185,9 @@
       }
     },
     "node_modules/@esbuild/android-arm64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.2.tgz",
-      "integrity": "sha512-5ZAX5xOmTligeBaeNEPnPaeEuah53Id2tX4c2CVP3JaROTH+j4fnfHCkr1PjXMd78hMst+TlkfKcW/DlTq0i4w==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.5.tgz",
+      "integrity": "sha512-VGzGhj4lJO+TVGV1v8ntCZWJktV7SGCs3Pn1GRWI1SBFtRALoomm8k5E9Pmwg3HOAal2VDc2F9+PM/rEY6oIDg==",
       "cpu": [
         "arm64"
       ],
@@ -4277,9 +4201,9 @@
       }
     },
     "node_modules/@esbuild/android-x64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.2.tgz",
-      "integrity": "sha512-Ffcx+nnma8Sge4jzddPHCZVRvIfQ0kMsUsCMcJRHkGJ1cDmhe4SsrYIjLUKn1xpHZybmOqCWwB0zQvsjdEHtkg==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.5.tgz",
+      "integrity": "sha512-D2GyJT1kjvO//drbRT3Hib9XPwQeWd9vZoBJn+bu/lVsOZ13cqNdDeqIF/xQ5/VmWvMduP6AmXvylO/PIc2isw==",
       "cpu": [
         "x64"
       ],
@@ -4293,9 +4217,9 @@
       }
     },
     "node_modules/@esbuild/darwin-arm64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.2.tgz",
-      "integrity": "sha512-MpM6LUVTXAzOvN4KbjzU/q5smzryuoNjlriAIx+06RpecwCkL9JpenNzpKd2YMzLJFOdPqBpuub6eVRP5IgiSA==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.5.tgz",
+      "integrity": "sha512-GtaBgammVvdF7aPIgH2jxMDdivezgFu6iKpmT+48+F8Hhg5J/sfnDieg0aeG/jfSvkYQU2/pceFPDKlqZzwnfQ==",
       "cpu": [
         "arm64"
       ],
@@ -4309,9 +4233,9 @@
       }
     },
     "node_modules/@esbuild/darwin-x64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.2.tgz",
-      "integrity": "sha512-5eRPrTX7wFyuWe8FqEFPG2cU0+butQQVNcT4sVipqjLYQjjh8a8+vUTfgBKM88ObB85ahsnTwF7PSIt6PG+QkA==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.5.tgz",
+      "integrity": "sha512-1iT4FVL0dJ76/q1wd7XDsXrSW+oLoquptvh4CLR4kITDtqi2e/xwXwdCVH8hVHU43wgJdsq7Gxuzcs6Iq/7bxQ==",
       "cpu": [
         "x64"
       ],
@@ -4325,9 +4249,9 @@
       }
     },
     "node_modules/@esbuild/freebsd-arm64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.2.tgz",
-      "integrity": "sha512-mLwm4vXKiQ2UTSX4+ImyiPdiHjiZhIaE9QvC7sw0tZ6HoNMjYAqQpGyui5VRIi5sGd+uWq940gdCbY3VLvsO1w==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.5.tgz",
+      "integrity": "sha512-nk4tGP3JThz4La38Uy/gzyXtpkPW8zSAmoUhK9xKKXdBCzKODMc2adkB2+8om9BDYugz+uGV7sLmpTYzvmz6Sw==",
       "cpu": [
         "arm64"
       ],
@@ -4341,9 +4265,9 @@
       }
     },
     "node_modules/@esbuild/freebsd-x64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.2.tgz",
-      "integrity": "sha512-6qyyn6TjayJSwGpm8J9QYYGQcRgc90nmfdUb0O7pp1s4lTY+9D0H9O02v5JqGApUyiHOtkz6+1hZNvNtEhbwRQ==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.5.tgz",
+      "integrity": "sha512-PrikaNjiXdR2laW6OIjlbeuCPrPaAl0IwPIaRv+SMV8CiM8i2LqVUHFC1+8eORgWyY7yhQY+2U2fA55mBzReaw==",
       "cpu": [
         "x64"
       ],
@@ -4357,9 +4281,9 @@
       }
     },
     "node_modules/@esbuild/linux-arm": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.2.tgz",
-      "integrity": "sha512-UHBRgJcmjJv5oeQF8EpTRZs/1knq6loLxTsjc3nxO9eXAPDLcWW55flrMVc97qFPbmZP31ta1AZVUKQzKTzb0g==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.5.tgz",
+      "integrity": "sha512-cPzojwW2okgh7ZlRpcBEtsX7WBuqbLrNXqLU89GxWbNt6uIg78ET82qifUy3W6OVww6ZWobWub5oqZOVtwolfw==",
       "cpu": [
         "arm"
       ],
@@ -4373,9 +4297,9 @@
       }
     },
     "node_modules/@esbuild/linux-arm64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.2.tgz",
-      "integrity": "sha512-gq/sjLsOyMT19I8obBISvhoYiZIAaGF8JpeXu1u8yPv8BE5HlWYobmlsfijFIZ9hIVGYkbdFhEqC0NvM4kNO0g==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.5.tgz",
+      "integrity": "sha512-Z9kfb1v6ZlGbWj8EJk9T6czVEjjq2ntSYLY2cw6pAZl4oKtfgQuS4HOq41M/BcoLPzrUbNd+R4BXFyH//nHxVg==",
       "cpu": [
         "arm64"
       ],
@@ -4389,9 +4313,9 @@
       }
     },
     "node_modules/@esbuild/linux-ia32": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.2.tgz",
-      "integrity": "sha512-bBYCv9obgW2cBP+2ZWfjYTU+f5cxRoGGQ5SeDbYdFCAZpYWrfjjfYwvUpP8MlKbP0nwZ5gyOU/0aUzZ5HWPuvQ==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.5.tgz",
+      "integrity": "sha512-sQ7l00M8bSv36GLV95BVAdhJ2QsIbCuCjh/uYrWiMQSUuV+LpXwIqhgJDcvMTj+VsQmqAHL2yYaasENvJ7CDKA==",
       "cpu": [
         "ia32"
       ],
@@ -4405,9 +4329,9 @@
       }
     },
     "node_modules/@esbuild/linux-loong64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.2.tgz",
-      "integrity": "sha512-SHNGiKtvnU2dBlM5D8CXRFdd+6etgZ9dXfaPCeJtz+37PIUlixvlIhI23L5khKXs3DIzAn9V8v+qb1TRKrgT5w==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.5.tgz",
+      "integrity": "sha512-0ur7ae16hDUC4OL5iEnDb0tZHDxYmuQyhKhsPBV8f99f6Z9KQM02g33f93rNH5A30agMS46u2HP6qTdEt6Q1kg==",
       "cpu": [
         "loong64"
       ],
@@ -4421,9 +4345,9 @@
       }
     },
     "node_modules/@esbuild/linux-mips64el": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.2.tgz",
-      "integrity": "sha512-hDDRlzE6rPeoj+5fsADqdUZl1OzqDYow4TB4Y/3PlKBD0ph1e6uPHzIQcv2Z65u2K0kpeByIyAjCmjn1hJgG0Q==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.5.tgz",
+      "integrity": "sha512-kB/66P1OsHO5zLz0i6X0RxlQ+3cu0mkxS3TKFvkb5lin6uwZ/ttOkP3Z8lfR9mJOBk14ZwZ9182SIIWFGNmqmg==",
       "cpu": [
         "mips64el"
       ],
@@ -4437,9 +4361,9 @@
       }
     },
     "node_modules/@esbuild/linux-ppc64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.2.tgz",
-      "integrity": "sha512-tsHu2RRSWzipmUi9UBDEzc0nLc4HtpZEI5Ba+Omms5456x5WaNuiG3u7xh5AO6sipnJ9r4cRWQB2tUjPyIkc6g==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.5.tgz",
+      "integrity": "sha512-UZCmJ7r9X2fe2D6jBmkLBMQetXPXIsZjQJCjgwpVDz+YMcS6oFR27alkgGv3Oqkv07bxdvw7fyB71/olceJhkQ==",
       "cpu": [
         "ppc64"
       ],
@@ -4453,9 +4377,9 @@
       }
     },
     "node_modules/@esbuild/linux-riscv64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.2.tgz",
-      "integrity": "sha512-k4LtpgV7NJQOml/10uPU0s4SAXGnowi5qBSjaLWMojNCUICNu7TshqHLAEbkBdAszL5TabfvQ48kK84hyFzjnw==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.5.tgz",
+      "integrity": "sha512-kTxwu4mLyeOlsVIFPfQo+fQJAV9mh24xL+y+Bm6ej067sYANjyEw1dNHmvoqxJUCMnkBdKpvOn0Ahql6+4VyeA==",
       "cpu": [
         "riscv64"
       ],
@@ -4469,9 +4393,9 @@
       }
     },
     "node_modules/@esbuild/linux-s390x": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.2.tgz",
-      "integrity": "sha512-GRa4IshOdvKY7M/rDpRR3gkiTNp34M0eLTaC1a08gNrh4u488aPhuZOCpkF6+2wl3zAN7L7XIpOFBhnaE3/Q8Q==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.5.tgz",
+      "integrity": "sha512-K2dSKTKfmdh78uJ3NcWFiqyRrimfdinS5ErLSn3vluHNeHVnBAFWC8a4X5N+7FgVE1EjXS1QDZbpqZBjfrqMTQ==",
       "cpu": [
         "s390x"
       ],
@@ -4485,9 +4409,9 @@
       }
     },
     "node_modules/@esbuild/linux-x64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.2.tgz",
-      "integrity": "sha512-QInHERlqpTTZ4FRB0fROQWXcYRD64lAoiegezDunLpalZMjcUcld3YzZmVJ2H/Cp0wJRZ8Xtjtj0cEHhYc/uUg==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.5.tgz",
+      "integrity": "sha512-uhj8N2obKTE6pSZ+aMUbqq+1nXxNjZIIjCjGLfsWvVpy7gKCOL6rsY1MhRh9zLtUtAI7vpgLMK6DxjO8Qm9lJw==",
       "cpu": [
         "x64"
       ],
@@ -4501,9 +4425,9 @@
       }
     },
     "node_modules/@esbuild/netbsd-arm64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.2.tgz",
-      "integrity": "sha512-talAIBoY5M8vHc6EeI2WW9d/CkiO9MQJ0IOWX8hrLhxGbro/vBXJvaQXefW2cP0z0nQVTdQ/eNyGFV1GSKrxfw==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.5.tgz",
+      "integrity": "sha512-pwHtMP9viAy1oHPvgxtOv+OkduK5ugofNTVDilIzBLpoWAM16r7b/mxBvfpuQDpRQFMfuVr5aLcn4yveGvBZvw==",
       "cpu": [
         "arm64"
       ],
@@ -4517,9 +4441,9 @@
       }
     },
     "node_modules/@esbuild/netbsd-x64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.2.tgz",
-      "integrity": "sha512-voZT9Z+tpOxrvfKFyfDYPc4DO4rk06qamv1a/fkuzHpiVBMOhpjK+vBmWM8J1eiB3OLSMFYNaOaBNLXGChf5tg==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.5.tgz",
+      "integrity": "sha512-WOb5fKrvVTRMfWFNCroYWWklbnXH0Q5rZppjq0vQIdlsQKuw6mdSihwSo4RV/YdQ5UCKKvBy7/0ZZYLBZKIbwQ==",
       "cpu": [
         "x64"
       ],
@@ -4533,9 +4457,9 @@
       }
     },
     "node_modules/@esbuild/openbsd-arm64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.2.tgz",
-      "integrity": "sha512-dcXYOC6NXOqcykeDlwId9kB6OkPUxOEqU+rkrYVqJbK2hagWOMrsTGsMr8+rW02M+d5Op5NNlgMmjzecaRf7Tg==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.5.tgz",
+      "integrity": "sha512-7A208+uQKgTxHd0G0uqZO8UjK2R0DDb4fDmERtARjSHWxqMTye4Erz4zZafx7Di9Cv+lNHYuncAkiGFySoD+Mw==",
       "cpu": [
         "arm64"
       ],
@@ -4549,9 +4473,9 @@
       }
     },
     "node_modules/@esbuild/openbsd-x64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.2.tgz",
-      "integrity": "sha512-t/TkWwahkH0Tsgoq1Ju7QfgGhArkGLkF1uYz8nQS/PPFlXbP5YgRpqQR3ARRiC2iXoLTWFxc6DJMSK10dVXluw==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.5.tgz",
+      "integrity": "sha512-G4hE405ErTWraiZ8UiSoesH8DaCsMm0Cay4fsFWOOUcz8b8rC6uCvnagr+gnioEjWn0wC+o1/TAHt+It+MpIMg==",
       "cpu": [
         "x64"
       ],
@@ -4565,9 +4489,9 @@
       }
     },
     "node_modules/@esbuild/sunos-x64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.2.tgz",
-      "integrity": "sha512-cfZH1co2+imVdWCjd+D1gf9NjkchVhhdpgb1q5y6Hcv9TP6Zi9ZG/beI3ig8TvwT9lH9dlxLq5MQBBgwuj4xvA==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.5.tgz",
+      "integrity": "sha512-l+azKShMy7FxzY0Rj4RCt5VD/q8mG/e+mDivgspo+yL8zW7qEwctQ6YqKX34DTEleFAvCIUviCFX1SDZRSyMQA==",
       "cpu": [
         "x64"
       ],
@@ -4581,9 +4505,9 @@
       }
     },
     "node_modules/@esbuild/win32-arm64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.2.tgz",
-      "integrity": "sha512-7Loyjh+D/Nx/sOTzV8vfbB3GJuHdOQyrOryFdZvPHLf42Tk9ivBU5Aedi7iyX+x6rbn2Mh68T4qq1SDqJBQO5Q==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.5.tgz",
+      "integrity": "sha512-O2S7SNZzdcFG7eFKgvwUEZ2VG9D/sn/eIiz8XRZ1Q/DO5a3s76Xv0mdBzVM5j5R639lXQmPmSo0iRpHqUUrsxw==",
       "cpu": [
         "arm64"
       ],
@@ -4597,9 +4521,9 @@
       }
     },
     "node_modules/@esbuild/win32-ia32": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.2.tgz",
-      "integrity": "sha512-WRJgsz9un0nqZJ4MfhabxaD9Ft8KioqU3JMinOTvobbX6MOSUigSBlogP8QB3uxpJDsFS6yN+3FDBdqE5lg9kg==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.5.tgz",
+      "integrity": "sha512-onOJ02pqs9h1iMJ1PQphR+VZv8qBMQ77Klcsqv9CNW2w6yLqoURLcgERAIurY6QE63bbLuqgP9ATqajFLK5AMQ==",
       "cpu": [
         "ia32"
       ],
@@ -4613,9 +4537,9 @@
       }
     },
     "node_modules/@esbuild/win32-x64": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.2.tgz",
-      "integrity": "sha512-kM3HKb16VIXZyIeVrM1ygYmZBKybX8N4p754bw390wGO3Tf2j4L2/WYL+4suWujpgf6GBYs3jv7TyUivdd05JA==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.5.tgz",
+      "integrity": "sha512-TXv6YnJ8ZMVdX+SXWVBo/0p8LTcrUYngpWjvm91TMjjBQii7Oz11Lw5lbDV5Y0TzuhSJHwiH4hEtC1I42mMS0g==",
       "cpu": [
         "x64"
       ],
@@ -4679,9 +4603,9 @@
       }
     },
     "node_modules/@eslint/eslintrc/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -4829,9 +4753,9 @@
       }
     },
     "node_modules/@grpc/grpc-js": {
-      "version": "1.13.3",
-      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.13.3.tgz",
-      "integrity": "sha512-FTXHdOoPbZrBjlVLHuKbDZnsTxXv2BlHF57xw6LuThXacXvtkahEPED0CKMk6obZDf65Hv4k3z62eyPNpvinIg==",
+      "version": "1.13.4",
+      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.13.4.tgz",
+      "integrity": "sha512-GsFaMXCkMqkKIvwCQjCrwH+GHbPKBjhwo/8ZuUkWHqbI73Kky9I+pQltrlT0+MWpedCoosda53lgjYfyEPgxBg==",
       "license": "Apache-2.0",
       "dependencies": {
         "@grpc/proto-loader": "^0.7.13",
@@ -4876,9 +4800,9 @@
       }
     },
     "node_modules/@humanwhocodes/config-array/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -5051,27 +4975,6 @@
         "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
       }
     },
-    "node_modules/@isaacs/fs-minipass": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/@isaacs/fs-minipass/-/fs-minipass-4.0.1.tgz",
-      "integrity": "sha512-wgm9Ehl2jpeqP3zw/7mo3kRHFp5MEDhqAdwy1fTGkHAwnkGOVsgpvQhL8B5n1qlb01jV3n/bI0ZfZp5lWA1k4w==",
-      "license": "ISC",
-      "dependencies": {
-        "minipass": "^7.0.4"
-      },
-      "engines": {
-        "node": ">=18.0.0"
-      }
-    },
-    "node_modules/@isaacs/fs-minipass/node_modules/minipass": {
-      "version": "7.1.2",
-      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
-      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
-      "license": "ISC",
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      }
-    },
     "node_modules/@istanbuljs/load-nyc-config": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
@@ -5672,35 +5575,31 @@
       "license": "MIT"
     },
     "node_modules/@libsql/client": {
-      "version": "0.15.4",
-      "resolved": "https://registry.npmjs.org/@libsql/client/-/client-0.15.4.tgz",
-      "integrity": "sha512-m8a7giWlhLdfKVIZFd3UlBptWTS+H0toSOL09BxbqzBeFHwuVC+5ewyi4LMBxoy2TLNQGE4lO8cwpsTWmu695w==",
+      "version": "0.15.9",
+      "resolved": "https://registry.npmjs.org/@libsql/client/-/client-0.15.9.tgz",
+      "integrity": "sha512-VT3do0a0vwYVaNcp/y05ikkKS3OrFR5UeEf5SUuYZVgKVl1Nc1k9ajoYSsOid8AD/vlhLDB5yFQaV4HmT/OB9w==",
       "license": "MIT",
-      "optional": true,
-      "peer": true,
       "dependencies": {
-        "@libsql/core": "^0.15.4",
+        "@libsql/core": "^0.15.9",
         "@libsql/hrana-client": "^0.7.0",
         "js-base64": "^3.7.5",
-        "libsql": "^0.5.6",
+        "libsql": "^0.5.13",
         "promise-limit": "^2.7.0"
       }
     },
     "node_modules/@libsql/core": {
-      "version": "0.15.4",
-      "resolved": "https://registry.npmjs.org/@libsql/core/-/core-0.15.4.tgz",
-      "integrity": "sha512-NMvh6xnn3vrcd7DNehj0HiJcRWB2a8hHhJUTkOBej3Pf3KB21HOmdOUjXxJ5pGbjWXh4ezQBmHtF5ozFhocXaA==",
+      "version": "0.15.9",
+      "resolved": "https://registry.npmjs.org/@libsql/core/-/core-0.15.9.tgz",
+      "integrity": "sha512-4OVdeAmuaCUq5hYT8NNn0nxlO9AcA/eTjXfUZ+QK8MT3Dz7Z76m73x7KxjU6I64WyXX98dauVH2b9XM+d84npw==",
       "license": "MIT",
-      "optional": true,
-      "peer": true,
       "dependencies": {
         "js-base64": "^3.7.5"
       }
     },
     "node_modules/@libsql/darwin-arm64": {
-      "version": "0.5.7",
-      "resolved": "https://registry.npmjs.org/@libsql/darwin-arm64/-/darwin-arm64-0.5.7.tgz",
-      "integrity": "sha512-3rex2cdEihYY5HIxOvn66CxdvEtjQDXyrX+EggaV3Qf4vZOWeow+jIqVjZoNLmfb7AwJuSL088G645zyMitcbQ==",
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/@libsql/darwin-arm64/-/darwin-arm64-0.5.13.tgz",
+      "integrity": "sha512-ASz/EAMLDLx3oq9PVvZ4zBXXHbz2TxtxUwX2xpTRFR4V4uSHAN07+jpLu3aK5HUBLuv58z7+GjaL5w/cyjR28Q==",
       "cpu": [
         "arm64"
       ],
@@ -5708,13 +5607,12 @@
       "optional": true,
       "os": [
         "darwin"
-      ],
-      "peer": true
+      ]
     },
     "node_modules/@libsql/darwin-x64": {
-      "version": "0.5.7",
-      "resolved": "https://registry.npmjs.org/@libsql/darwin-x64/-/darwin-x64-0.5.7.tgz",
-      "integrity": "sha512-OEJPm0G+s+MZhBpf5TNTj9ODRPwIiBjtrHJoYNsGm0fPZM62wdHryLAGqu6gl4IuQ+e4GzC3c5c8J0lu4u6p+A==",
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/@libsql/darwin-x64/-/darwin-x64-0.5.13.tgz",
+      "integrity": "sha512-kzglniv1difkq8opusSXM7u9H0WoEPeKxw0ixIfcGfvlCVMJ+t9UNtXmyNHW68ljdllje6a4C6c94iPmIYafYA==",
       "cpu": [
         "x64"
       ],
@@ -5722,8 +5620,7 @@
       "optional": true,
       "os": [
         "darwin"
-      ],
-      "peer": true
+      ]
     },
     "node_modules/@libsql/hrana-client": {
       "version": "0.7.0",
@@ -5756,10 +5653,36 @@
         "ws": "^8.13.0"
       }
     },
+    "node_modules/@libsql/linux-arm-gnueabihf": {
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/@libsql/linux-arm-gnueabihf/-/linux-arm-gnueabihf-0.5.13.tgz",
+      "integrity": "sha512-UEW+VZN2r0mFkfztKOS7cqfS8IemuekbjUXbXCwULHtusww2QNCXvM5KU9eJCNE419SZCb0qaEWYytcfka8qeA==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@libsql/linux-arm-musleabihf": {
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/@libsql/linux-arm-musleabihf/-/linux-arm-musleabihf-0.5.13.tgz",
+      "integrity": "sha512-NMDgLqryYBv4Sr3WoO/m++XDjR5KLlw9r/JK4Ym6A1XBv2bxQQNhH0Lxx3bjLW8qqhBD4+0xfms4d2cOlexPyA==",
+      "cpu": [
+        "arm"
+      ],
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
     "node_modules/@libsql/linux-arm64-gnu": {
-      "version": "0.5.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-arm64-gnu/-/linux-arm64-gnu-0.5.7.tgz",
-      "integrity": "sha512-86PusgAOzxu8e/8YCxwdbi8/6HkBRWW49FCXgAqVjlDaNC/08jSQy7XnIZuRqHYRNg9uXk3fZ+Nug/6kbEqH5Q==",
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/@libsql/linux-arm64-gnu/-/linux-arm64-gnu-0.5.13.tgz",
+      "integrity": "sha512-/wCxVdrwl1ee6D6LEjwl+w4SxuLm5UL9Kb1LD5n0bBGs0q+49ChdPPh7tp175iRgkcrTgl23emymvt1yj3KxVQ==",
       "cpu": [
         "arm64"
       ],
@@ -5767,13 +5690,12 @@
       "optional": true,
       "os": [
         "linux"
-      ],
-      "peer": true
+      ]
     },
     "node_modules/@libsql/linux-arm64-musl": {
-      "version": "0.5.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-arm64-musl/-/linux-arm64-musl-0.5.7.tgz",
-      "integrity": "sha512-KSNrF4wd7xqQQYx12PrF808QhX5oL+EwvzippvDs/NNJWSM035AwCG0z2t7tqNVTZWaN6MVuRGbMlhQDCFj66w==",
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/@libsql/linux-arm64-musl/-/linux-arm64-musl-0.5.13.tgz",
+      "integrity": "sha512-xnVAbZIanUgX57XqeI5sNaDnVilp0Di5syCLSEo+bRyBobe/1IAeehNZpyVbCy91U2N6rH1C/mZU7jicVI9x+A==",
       "cpu": [
         "arm64"
       ],
@@ -5781,13 +5703,12 @@
       "optional": true,
       "os": [
         "linux"
-      ],
-      "peer": true
+      ]
     },
     "node_modules/@libsql/linux-x64-gnu": {
-      "version": "0.5.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-x64-gnu/-/linux-x64-gnu-0.5.7.tgz",
-      "integrity": "sha512-gMHAKtn2UuIJdFU1DeHD2CgIEhT5OZFJtyyTFXNVs2A4VZmjlOmss+QVANO59cO4/3E4MnJQ1KyJF4fbBNp9fw==",
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/@libsql/linux-x64-gnu/-/linux-x64-gnu-0.5.13.tgz",
+      "integrity": "sha512-/mfMRxcQAI9f8t7tU3QZyh25lXgXKzgin9B9TOSnchD73PWtsVhlyfA6qOCfjQl5kr4sHscdXD5Yb3KIoUgrpQ==",
       "cpu": [
         "x64"
       ],
@@ -5795,13 +5716,12 @@
       "optional": true,
       "os": [
         "linux"
-      ],
-      "peer": true
+      ]
     },
     "node_modules/@libsql/linux-x64-musl": {
-      "version": "0.5.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-x64-musl/-/linux-x64-musl-0.5.7.tgz",
-      "integrity": "sha512-qh6nLCZ+YI6fKRCR525Ryw/LHd7vNvi/A7hhPtlwewYkxUumNsz7t9kwTlhXFlYmBNmOYP/FfaP+vj5CHvZvrQ==",
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/@libsql/linux-x64-musl/-/linux-x64-musl-0.5.13.tgz",
+      "integrity": "sha512-rdefPTpQCVwUjIQYbDLMv3qpd5MdrT0IeD0UZPGqhT9AWU8nJSQoj2lfyIDAWEz7PPOVCY4jHuEn7FS2sw9kRA==",
       "cpu": [
         "x64"
       ],
@@ -5809,13 +5729,12 @@
       "optional": true,
       "os": [
         "linux"
-      ],
-      "peer": true
+      ]
     },
     "node_modules/@libsql/win32-x64-msvc": {
-      "version": "0.5.7",
-      "resolved": "https://registry.npmjs.org/@libsql/win32-x64-msvc/-/win32-x64-msvc-0.5.7.tgz",
-      "integrity": "sha512-66c5bN2UF6rnuvzxgRLRkrAXMlv2aNYivPjMa175M0IVbFB3XQl1joOL2hO4/HxijL5xHf7xYJxs7X6HvpiG7Q==",
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/@libsql/win32-x64-msvc/-/win32-x64-msvc-0.5.13.tgz",
+      "integrity": "sha512-aNcmDrD1Ws+dNZIv9ECbxBQumqB9MlSVEykwfXJpqv/593nABb8Ttg5nAGUPtnADyaGDTrGvPPP81d/KsKho4Q==",
       "cpu": [
         "x64"
       ],
@@ -5823,8 +5742,7 @@
       "optional": true,
       "os": [
         "win32"
-      ],
-      "peer": true
+      ]
     },
     "node_modules/@lukeed/csprng": {
       "version": "1.1.0",
@@ -5903,179 +5821,63 @@
       }
     },
     "node_modules/@mastra/core": {
-      "version": "0.8.3",
-      "resolved": "https://registry.npmjs.org/@mastra/core/-/core-0.8.3.tgz",
-      "integrity": "sha512-nHPBvxkLeRUAyo+Dq7BLcPkFmKLNfuDqJsSOkTAK68TmquVWuJfzZp/8BksbQTP/e1bUmuUNS9XrVybIPXxhdw==",
+      "version": "0.10.8",
+      "resolved": "https://registry.npmjs.org/@mastra/core/-/core-0.10.8.tgz",
+      "integrity": "sha512-FR8yQwx/wDDY0E4BOGW/vcqt/DtZtDxmsfOVpMuuu/QVdDzCX2g7LXTeKoduMb0RQT1f5//Rpvi8A7+dJrPmMw==",
       "license": "Elastic-2.0",
       "dependencies": {
-        "@libsql/client": "^0.14.0",
+        "@ai-sdk/provider": "^1.1.3",
+        "@ai-sdk/provider-utils": "^2.2.8",
+        "@ai-sdk/ui-utils": "^1.2.11",
+        "@mastra/schema-compat": "0.10.3",
         "@opentelemetry/api": "^1.9.0",
-        "@opentelemetry/auto-instrumentations-node": "^0.56.1",
-        "@opentelemetry/core": "^1.30.1",
-        "@opentelemetry/exporter-trace-otlp-grpc": "^0.57.2",
-        "@opentelemetry/exporter-trace-otlp-http": "^0.57.2",
-        "@opentelemetry/otlp-exporter-base": "^0.57.2",
-        "@opentelemetry/otlp-transformer": "^0.57.2",
-        "@opentelemetry/resources": "^1.30.1",
-        "@opentelemetry/sdk-metrics": "^1.30.1",
-        "@opentelemetry/sdk-node": "^0.57.2",
-        "@opentelemetry/sdk-trace-base": "^1.30.1",
-        "@opentelemetry/sdk-trace-node": "^1.30.1",
-        "@opentelemetry/semantic-conventions": "^1.30.0",
-        "ai": "^4.2.2",
-        "cohere-ai": "^7.16.0",
+        "@opentelemetry/auto-instrumentations-node": "^0.59.0",
+        "@opentelemetry/core": "^2.0.1",
+        "@opentelemetry/exporter-trace-otlp-grpc": "^0.201.1",
+        "@opentelemetry/exporter-trace-otlp-http": "^0.201.1",
+        "@opentelemetry/otlp-exporter-base": "^0.201.1",
+        "@opentelemetry/otlp-transformer": "^0.201.1",
+        "@opentelemetry/resources": "^2.0.1",
+        "@opentelemetry/sdk-metrics": "^2.0.1",
+        "@opentelemetry/sdk-node": "^0.201.1",
+        "@opentelemetry/sdk-trace-base": "^2.0.1",
+        "@opentelemetry/sdk-trace-node": "^2.0.1",
+        "@opentelemetry/semantic-conventions": "^1.34.0",
+        "@sindresorhus/slugify": "^2.2.1",
+        "ai": "^4.3.16",
+        "cohere-ai": "^7.17.1",
         "date-fns": "^3.6.0",
-        "dotenv": "^16.4.7",
-        "fastembed": "^1.14.4",
-        "hono": "^4.5.1",
-        "hono-openapi": "^0.4.6",
+        "dotenv": "^16.5.0",
+        "hono": "^4.7.11",
+        "hono-openapi": "^0.4.8",
         "json-schema": "^0.4.0",
-        "json-schema-to-zod": "^2.6.0",
-        "pino": "^9.6.0",
+        "json-schema-to-zod": "^2.6.1",
+        "pino": "^9.7.0",
         "pino-pretty": "^13.0.0",
         "radash": "^12.1.0",
         "sift": "^17.1.3",
-        "xstate": "^5.19.2",
-        "zod": "^3.24.2"
+        "xstate": "^5.19.4",
+        "zod-to-json-schema": "^3.24.5"
       },
       "engines": {
         "node": ">=20"
+      },
+      "peerDependencies": {
+        "zod": "^3.0.0"
       }
     },
-    "node_modules/@mastra/core/node_modules/@libsql/client": {
-      "version": "0.14.0",
-      "resolved": "https://registry.npmjs.org/@libsql/client/-/client-0.14.0.tgz",
-      "integrity": "sha512-/9HEKfn6fwXB5aTEEoMeFh4CtG0ZzbncBb1e++OCdVpgKZ/xyMsIVYXm0w7Pv4RUel803vE6LwniB3PqD72R0Q==",
-      "license": "MIT",
-      "dependencies": {
-        "@libsql/core": "^0.14.0",
-        "@libsql/hrana-client": "^0.7.0",
-        "js-base64": "^3.7.5",
-        "libsql": "^0.4.4",
-        "promise-limit": "^2.7.0"
-      }
-    },
-    "node_modules/@mastra/core/node_modules/@libsql/core": {
-      "version": "0.14.0",
-      "resolved": "https://registry.npmjs.org/@libsql/core/-/core-0.14.0.tgz",
-      "integrity": "sha512-nhbuXf7GP3PSZgdCY2Ecj8vz187ptHlZQ0VRc751oB2C1W8jQUXKKklvt7t1LJiUTQBVJuadF628eUk+3cRi4Q==",
-      "license": "MIT",
-      "dependencies": {
-        "js-base64": "^3.7.5"
-      }
-    },
-    "node_modules/@mastra/core/node_modules/@libsql/darwin-arm64": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/darwin-arm64/-/darwin-arm64-0.4.7.tgz",
-      "integrity": "sha512-yOL742IfWUlUevnI5PdnIT4fryY3LYTdLm56bnY0wXBw7dhFcnjuA7jrH3oSVz2mjZTHujxoITgAE7V6Z+eAbg==",
-      "cpu": [
-        "arm64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "darwin"
-      ]
-    },
-    "node_modules/@mastra/core/node_modules/@libsql/darwin-x64": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/darwin-x64/-/darwin-x64-0.4.7.tgz",
-      "integrity": "sha512-ezc7V75+eoyyH07BO9tIyJdqXXcRfZMbKcLCeF8+qWK5nP8wWuMcfOVywecsXGRbT99zc5eNra4NEx6z5PkSsA==",
-      "cpu": [
-        "x64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "darwin"
-      ]
-    },
-    "node_modules/@mastra/core/node_modules/@libsql/linux-arm64-gnu": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-arm64-gnu/-/linux-arm64-gnu-0.4.7.tgz",
-      "integrity": "sha512-WlX2VYB5diM4kFfNaYcyhw5y+UJAI3xcMkEUJZPtRDEIu85SsSFrQ+gvoKfcVh76B//ztSeEX2wl9yrjF7BBCA==",
-      "cpu": [
-        "arm64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ]
-    },
-    "node_modules/@mastra/core/node_modules/@libsql/linux-arm64-musl": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-arm64-musl/-/linux-arm64-musl-0.4.7.tgz",
-      "integrity": "sha512-6kK9xAArVRlTCpWeqnNMCoXW1pe7WITI378n4NpvU5EJ0Ok3aNTIC2nRPRjhro90QcnmLL1jPcrVwO4WD1U0xw==",
-      "cpu": [
-        "arm64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ]
-    },
-    "node_modules/@mastra/core/node_modules/@libsql/linux-x64-gnu": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-x64-gnu/-/linux-x64-gnu-0.4.7.tgz",
-      "integrity": "sha512-CMnNRCmlWQqqzlTw6NeaZXzLWI8bydaXDke63JTUCvu8R+fj/ENsLrVBtPDlxQ0wGsYdXGlrUCH8Qi9gJep0yQ==",
-      "cpu": [
-        "x64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ]
-    },
-    "node_modules/@mastra/core/node_modules/@libsql/linux-x64-musl": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-x64-musl/-/linux-x64-musl-0.4.7.tgz",
-      "integrity": "sha512-nI6tpS1t6WzGAt1Kx1n1HsvtBbZ+jHn0m7ogNNT6pQHZQj7AFFTIMeDQw/i/Nt5H38np1GVRNsFe99eSIMs9XA==",
-      "cpu": [
-        "x64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ]
-    },
-    "node_modules/@mastra/core/node_modules/@libsql/win32-x64-msvc": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/win32-x64-msvc/-/win32-x64-msvc-0.4.7.tgz",
-      "integrity": "sha512-7pJzOWzPm6oJUxml+PCDRzYQ4A1hTMHAciTAHfFK4fkbDZX33nWPVG7Y3vqdKtslcwAzwmrNDc6sXy2nwWnbiw==",
-      "cpu": [
-        "x64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "win32"
-      ]
-    },
     "node_modules/@mastra/core/node_modules/@sinclair/typebox": {
-      "version": "0.34.33",
-      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.34.33.tgz",
-      "integrity": "sha512-5HAV9exOMcXRUxo+9iYB5n09XxzCXnfy4VTNW4xnDv+FgjzAGY989C28BIdljKqmF+ZltUwujE3aossvcVtq6g==",
+      "version": "0.34.36",
+      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.34.36.tgz",
+      "integrity": "sha512-JFHFhF6MqqRE49JDAGX/EPlHwxIukrKMhNwlMoB/wIJBkvu3+ciO335yDYPP3soI01FkhVXWnyNPKEl+EsC4Zw==",
       "license": "MIT",
       "optional": true,
       "peer": true
     },
-    "node_modules/@mastra/core/node_modules/detect-libc": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
-      "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=8"
-      }
-    },
     "node_modules/@mastra/core/node_modules/hono-openapi": {
-      "version": "0.4.6",
-      "resolved": "https://registry.npmjs.org/hono-openapi/-/hono-openapi-0.4.6.tgz",
-      "integrity": "sha512-wSDySp2cS5Zcf1OeLG7nCP3eMsCpcDomN137T9B6/Z5Qq3D0nWgMf0I3Gl41SE1rE37OBQ0Smqx3LOP9Hk//7A==",
+      "version": "0.4.8",
+      "resolved": "https://registry.npmjs.org/hono-openapi/-/hono-openapi-0.4.8.tgz",
+      "integrity": "sha512-LYr5xdtD49M7hEAduV1PftOMzuT8ZNvkyWfh1DThkLsIr4RkvDb12UxgIiFbwrJB6FLtFXLoOZL9x4IeDk2+VA==",
       "license": "MIT",
       "dependencies": {
         "json-schema-walker": "^2.0.0"
@@ -6088,7 +5890,7 @@
         "@hono/zod-validator": "^0.4.1",
         "@sinclair/typebox": "^0.34.9",
         "@valibot/to-json-schema": "^1.0.0-beta.3",
-        "arktype": "^2.0.0-rc.25",
+        "arktype": "^2.0.0",
         "effect": "^3.11.3",
         "hono": "^4.6.13",
         "openapi-types": "^12.1.3",
@@ -6127,9 +5929,6 @@
         "hono": {
           "optional": true
         },
-        "openapi-types": {
-          "optional": true
-        },
         "valibot": {
           "optional": true
         },
@@ -6141,63 +5940,39 @@
         }
       }
     },
-    "node_modules/@mastra/core/node_modules/libsql": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/libsql/-/libsql-0.4.7.tgz",
-      "integrity": "sha512-T9eIRCs6b0J1SHKYIvD8+KCJMcWZ900iZyxdnSCdqxN12Z1ijzT+jY5nrk72Jw4B0HGzms2NgpryArlJqvc3Lw==",
-      "cpu": [
-        "x64",
-        "arm64",
-        "wasm32"
-      ],
-      "license": "MIT",
-      "os": [
-        "darwin",
-        "linux",
-        "win32"
-      ],
-      "dependencies": {
-        "@neon-rs/load": "^0.0.4",
-        "detect-libc": "2.0.2"
-      },
-      "optionalDependencies": {
-        "@libsql/darwin-arm64": "0.4.7",
-        "@libsql/darwin-x64": "0.4.7",
-        "@libsql/linux-arm64-gnu": "0.4.7",
-        "@libsql/linux-arm64-musl": "0.4.7",
-        "@libsql/linux-x64-gnu": "0.4.7",
-        "@libsql/linux-x64-musl": "0.4.7",
-        "@libsql/win32-x64-msvc": "0.4.7"
-      }
-    },
     "node_modules/@mastra/deployer": {
-      "version": "0.2.9",
-      "resolved": "https://registry.npmjs.org/@mastra/deployer/-/deployer-0.2.9.tgz",
-      "integrity": "sha512-Iq/JSM0HX6hhnouCrARFvWhcAqJk2/iYZb6ije8LRkDc4k8Injkp8ZuqDc2SJE1SC5bm6mc3Hh6Dt+W+qhnKiw==",
+      "version": "0.10.8",
+      "resolved": "https://registry.npmjs.org/@mastra/deployer/-/deployer-0.10.8.tgz",
+      "integrity": "sha512-5YL96d3XZkNVtwXEmyTtHdm2McFJtvyuYhk3PSWWf1E4dcT8nTI5sKxgM8hA/9Ya4h4X1RPwfyz3OGeFwE1Dmg==",
       "license": "Elastic-2.0",
       "dependencies": {
-        "@babel/core": "^7.26.10",
-        "@babel/helper-module-imports": "^7.25.9",
-        "@mastra/core": "^0.8.3",
-        "@mastra/server": "^1.0.3",
+        "@babel/core": "^7.27.4",
+        "@babel/helper-module-imports": "^7.27.1",
+        "@mastra/server": "^0.10.8",
         "@neon-rs/load": "^0.1.82",
         "@rollup/plugin-alias": "^5.1.1",
-        "@rollup/plugin-commonjs": "^28.0.3",
+        "@rollup/plugin-commonjs": "^28.0.6",
         "@rollup/plugin-json": "^6.1.0",
-        "@rollup/plugin-node-resolve": "^16.0.0",
+        "@rollup/plugin-node-resolve": "^16.0.1",
         "@rollup/plugin-virtual": "^3.0.2",
+        "@sindresorhus/slugify": "^2.2.1",
         "builtins": "^5.1.0",
-        "detect-libc": "^2.0.3",
-        "dotenv": "^16.4.7",
-        "esbuild": "^0.25.1",
+        "detect-libc": "^2.0.4",
+        "dotenv": "^16.5.0",
+        "esbuild": "^0.25.5",
+        "find-workspaces": "^0.3.1",
         "fs-extra": "^11.3.0",
-        "hono": "^4.7.4",
+        "globby": "^14.1.0",
+        "hono": "^4.7.11",
         "resolve-from": "^5.0.0",
-        "rollup": "^4.35.0",
+        "rollup": "^4.43.0",
         "rollup-plugin-esbuild": "^6.2.1",
-        "rollup-plugin-node-externals": "^8.0.0",
+        "rollup-plugin-node-externals": "^8.0.1",
         "typescript-paths": "^1.5.1",
-        "zod": "^3.24.2"
+        "zod": "^3.25.67"
+      },
+      "peerDependencies": {
+        "@mastra/core": "^0.10.2-alpha.0"
       }
     },
     "node_modules/@mastra/deployer/node_modules/@neon-rs/load": {
@@ -6220,201 +5995,111 @@
         "node": ">=14.14"
       }
     },
-    "node_modules/@mastra/deployer/node_modules/resolve-from": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
-      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
+    "node_modules/@mastra/deployer/node_modules/globby": {
+      "version": "14.1.0",
+      "resolved": "https://registry.npmjs.org/globby/-/globby-14.1.0.tgz",
+      "integrity": "sha512-0Ia46fDOaT7k4og1PDW4YbodWWr3scS2vAr2lTbsplOt2WkKp0vQbkI9wKis/T5LV/dqPjO3bpS/z6GTJB82LA==",
       "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/@mastra/mcp": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/@mastra/mcp/-/mcp-0.4.0.tgz",
-      "integrity": "sha512-vc8H8+C/JBucjGAYjaY+F0CcNpGZ/S2nSPrBQkUc+49jpUjLSY/i50ruZ11BeL6FElZIfpE6P7yDSwZpsUBmaA==",
-      "license": "Elastic-2.0",
       "dependencies": {
-        "@mastra/core": "^0.9.0",
-        "@modelcontextprotocol/sdk": "^1.9.0",
-        "date-fns": "^4.1.0",
-        "exit-hook": "^4.0.0",
-        "uuid": "^11.1.0"
+        "@sindresorhus/merge-streams": "^2.1.0",
+        "fast-glob": "^3.3.3",
+        "ignore": "^7.0.3",
+        "path-type": "^6.0.0",
+        "slash": "^5.1.0",
+        "unicorn-magic": "^0.3.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/@mastra/mcp/node_modules/@libsql/client": {
-      "version": "0.14.0",
-      "resolved": "https://registry.npmjs.org/@libsql/client/-/client-0.14.0.tgz",
-      "integrity": "sha512-/9HEKfn6fwXB5aTEEoMeFh4CtG0ZzbncBb1e++OCdVpgKZ/xyMsIVYXm0w7Pv4RUel803vE6LwniB3PqD72R0Q==",
+    "node_modules/@mastra/deployer/node_modules/ignore": {
+      "version": "7.0.5",
+      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
+      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
       "license": "MIT",
-      "dependencies": {
-        "@libsql/core": "^0.14.0",
-        "@libsql/hrana-client": "^0.7.0",
-        "js-base64": "^3.7.5",
-        "libsql": "^0.4.4",
-        "promise-limit": "^2.7.0"
+      "engines": {
+        "node": ">= 4"
       }
     },
-    "node_modules/@mastra/mcp/node_modules/@libsql/core": {
-      "version": "0.14.0",
-      "resolved": "https://registry.npmjs.org/@libsql/core/-/core-0.14.0.tgz",
-      "integrity": "sha512-nhbuXf7GP3PSZgdCY2Ecj8vz187ptHlZQ0VRc751oB2C1W8jQUXKKklvt7t1LJiUTQBVJuadF628eUk+3cRi4Q==",
+    "node_modules/@mastra/deployer/node_modules/path-type": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/path-type/-/path-type-6.0.0.tgz",
+      "integrity": "sha512-Vj7sf++t5pBD637NSfkxpHSMfWaeig5+DKWLhcqIYx6mWQz5hdJTGDVMQiJcw1ZYkhs7AazKDGpRVji1LJCZUQ==",
       "license": "MIT",
-      "dependencies": {
-        "js-base64": "^3.7.5"
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/@mastra/mcp/node_modules/@libsql/darwin-arm64": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/darwin-arm64/-/darwin-arm64-0.4.7.tgz",
-      "integrity": "sha512-yOL742IfWUlUevnI5PdnIT4fryY3LYTdLm56bnY0wXBw7dhFcnjuA7jrH3oSVz2mjZTHujxoITgAE7V6Z+eAbg==",
-      "cpu": [
-        "arm64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "darwin"
-      ]
-    },
-    "node_modules/@mastra/mcp/node_modules/@libsql/darwin-x64": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/darwin-x64/-/darwin-x64-0.4.7.tgz",
-      "integrity": "sha512-ezc7V75+eoyyH07BO9tIyJdqXXcRfZMbKcLCeF8+qWK5nP8wWuMcfOVywecsXGRbT99zc5eNra4NEx6z5PkSsA==",
-      "cpu": [
-        "x64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "darwin"
-      ]
-    },
-    "node_modules/@mastra/mcp/node_modules/@libsql/linux-arm64-gnu": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-arm64-gnu/-/linux-arm64-gnu-0.4.7.tgz",
-      "integrity": "sha512-WlX2VYB5diM4kFfNaYcyhw5y+UJAI3xcMkEUJZPtRDEIu85SsSFrQ+gvoKfcVh76B//ztSeEX2wl9yrjF7BBCA==",
-      "cpu": [
-        "arm64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ]
-    },
-    "node_modules/@mastra/mcp/node_modules/@libsql/linux-arm64-musl": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-arm64-musl/-/linux-arm64-musl-0.4.7.tgz",
-      "integrity": "sha512-6kK9xAArVRlTCpWeqnNMCoXW1pe7WITI378n4NpvU5EJ0Ok3aNTIC2nRPRjhro90QcnmLL1jPcrVwO4WD1U0xw==",
-      "cpu": [
-        "arm64"
-      ],
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ]
-    },
-    "node_modules/@mastra/mcp/node_modules/@libsql/linux-x64-gnu": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-x64-gnu/-/linux-x64-gnu-0.4.7.tgz",
-      "integrity": "sha512-CMnNRCmlWQqqzlTw6NeaZXzLWI8bydaXDke63JTUCvu8R+fj/ENsLrVBtPDlxQ0wGsYdXGlrUCH8Qi9gJep0yQ==",
-      "cpu": [
-        "x64"
-      ],
+    "node_modules/@mastra/deployer/node_modules/resolve-from": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
+      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
       "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ]
+      "engines": {
+        "node": ">=8"
+      }
     },
-    "node_modules/@mastra/mcp/node_modules/@libsql/linux-x64-musl": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/linux-x64-musl/-/linux-x64-musl-0.4.7.tgz",
-      "integrity": "sha512-nI6tpS1t6WzGAt1Kx1n1HsvtBbZ+jHn0m7ogNNT6pQHZQj7AFFTIMeDQw/i/Nt5H38np1GVRNsFe99eSIMs9XA==",
-      "cpu": [
-        "x64"
-      ],
+    "node_modules/@mastra/deployer/node_modules/slash": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-5.1.0.tgz",
+      "integrity": "sha512-ZA6oR3T/pEyuqwMgAKT0/hAv8oAXckzbkmR0UkUosQ+Mc4RxGoJkRmwHgHufaenlyAgE1Mxgpdcrf75y6XcnDg==",
       "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ]
+      "engines": {
+        "node": ">=14.16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
     },
-    "node_modules/@mastra/mcp/node_modules/@libsql/win32-x64-msvc": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/@libsql/win32-x64-msvc/-/win32-x64-msvc-0.4.7.tgz",
-      "integrity": "sha512-7pJzOWzPm6oJUxml+PCDRzYQ4A1hTMHAciTAHfFK4fkbDZX33nWPVG7Y3vqdKtslcwAzwmrNDc6sXy2nwWnbiw==",
-      "cpu": [
-        "x64"
-      ],
+    "node_modules/@mastra/libsql": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@mastra/libsql/-/libsql-0.11.0.tgz",
+      "integrity": "sha512-bnSXI24nJNYbZAN4z6rNlE7Vs0BStKLTbOLffRf9au0AUKRg44TBzGnJve/JpprPDT9KfFrww+CgdCYPWnSh7Q==",
       "license": "MIT",
-      "optional": true,
-      "os": [
-        "win32"
-      ]
+      "dependencies": {
+        "@libsql/client": "^0.15.9"
+      },
+      "peerDependencies": {
+        "@mastra/core": ">=0.10.7-0 <0.11.0-0"
+      }
     },
-    "node_modules/@mastra/mcp/node_modules/@mastra/core": {
-      "version": "0.9.0",
-      "resolved": "https://registry.npmjs.org/@mastra/core/-/core-0.9.0.tgz",
-      "integrity": "sha512-2cOwnZFlS5JoIuFkn334qjffzx8xBP1lP4rpoH9N1SpyllwW7P9iaFjrWuVpX/IX29FbhJHX1l2g/0FO+pL+BA==",
+    "node_modules/@mastra/loggers": {
+      "version": "0.10.2",
+      "resolved": "https://registry.npmjs.org/@mastra/loggers/-/loggers-0.10.2.tgz",
+      "integrity": "sha512-ooxINwsY0Gp8ROkZ9ZVRjTWFs1f3hmot/eSIJcPAnNoiRcbeBFhVF8JZFKT5VlPjPducjU3Q++IjPSFDAvyDDg==",
       "license": "Elastic-2.0",
       "dependencies": {
-        "@libsql/client": "^0.14.0",
-        "@opentelemetry/api": "^1.9.0",
-        "@opentelemetry/auto-instrumentations-node": "^0.56.1",
-        "@opentelemetry/core": "^1.30.1",
-        "@opentelemetry/exporter-trace-otlp-grpc": "^0.57.2",
-        "@opentelemetry/exporter-trace-otlp-http": "^0.57.2",
-        "@opentelemetry/otlp-exporter-base": "^0.57.2",
-        "@opentelemetry/otlp-transformer": "^0.57.2",
-        "@opentelemetry/resources": "^1.30.1",
-        "@opentelemetry/sdk-metrics": "^1.30.1",
-        "@opentelemetry/sdk-node": "^0.57.2",
-        "@opentelemetry/sdk-trace-base": "^1.30.1",
-        "@opentelemetry/sdk-trace-node": "^1.30.1",
-        "@opentelemetry/semantic-conventions": "^1.30.0",
-        "ai": "^4.2.2",
-        "cohere-ai": "^7.16.0",
-        "date-fns": "^3.6.0",
-        "dotenv": "^16.4.7",
-        "fastembed": "^1.14.4",
-        "hono": "^4.5.1",
-        "hono-openapi": "^0.4.6",
-        "json-schema": "^0.4.0",
-        "json-schema-to-zod": "^2.6.0",
-        "pino": "^9.6.0",
-        "pino-pretty": "^13.0.0",
-        "radash": "^12.1.0",
-        "sift": "^17.1.3",
-        "xstate": "^5.19.2"
-      },
-      "engines": {
-        "node": ">=20"
+        "pino": "^9.7.0",
+        "pino-pretty": "^13.0.0"
       },
       "peerDependencies": {
-        "zod": "^3.24.0"
+        "@mastra/core": ">=0.10.4-0 <0.11.0"
       }
     },
-    "node_modules/@mastra/mcp/node_modules/@mastra/core/node_modules/date-fns": {
-      "version": "3.6.0",
-      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-3.6.0.tgz",
-      "integrity": "sha512-fRHTG8g/Gif+kSh50gaGEdToemgfj74aRX3swtiouboip5JDLAyDE9F11nHMIcvOaXeOC6D7SpNhi7uFyB7Uww==",
-      "license": "MIT",
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/kossnocorp"
+    "node_modules/@mastra/mcp": {
+      "version": "0.10.5",
+      "resolved": "https://registry.npmjs.org/@mastra/mcp/-/mcp-0.10.5.tgz",
+      "integrity": "sha512-YOXptwjquGEjZkbzkYsgxF09YopUHFpg9sPgMasUHMpZ9P9NICDskg48iVtSxA9KEVjQ4bMk50dhBllkGXaN5Q==",
+      "license": "Elastic-2.0",
+      "dependencies": {
+        "@modelcontextprotocol/sdk": "^1.13.0",
+        "date-fns": "^4.1.0",
+        "exit-hook": "^4.0.0",
+        "fast-deep-equal": "^3.1.3",
+        "uuid": "^11.1.0",
+        "zod-from-json-schema": "^0.0.5"
+      },
+      "peerDependencies": {
+        "@mastra/core": "^0.10.2-alpha.0",
+        "zod": "^3.0.0"
       }
     },
-    "node_modules/@mastra/mcp/node_modules/@sinclair/typebox": {
-      "version": "0.34.33",
-      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.34.33.tgz",
-      "integrity": "sha512-5HAV9exOMcXRUxo+9iYB5n09XxzCXnfy4VTNW4xnDv+FgjzAGY989C28BIdljKqmF+ZltUwujE3aossvcVtq6g==",
-      "license": "MIT",
-      "optional": true,
-      "peer": true
-    },
     "node_modules/@mastra/mcp/node_modules/date-fns": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
@@ -6425,135 +6110,50 @@
         "url": "https://github.com/sponsors/kossnocorp"
       }
     },
-    "node_modules/@mastra/mcp/node_modules/detect-libc": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
-      "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/@mastra/mcp/node_modules/hono-openapi": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/hono-openapi/-/hono-openapi-0.4.7.tgz",
-      "integrity": "sha512-ooBNhDEsFdB9cqxZVHljonW1uiTTioZR8OyPHh9OzWOyh4vsrmSHEnSmEoFJaERfEvel0jEEh1FtV7csOMOkLQ==",
-      "license": "MIT",
+    "node_modules/@mastra/memory": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@mastra/memory/-/memory-0.11.0.tgz",
+      "integrity": "sha512-bZGmEZ22k+L92cTmi/QZi7ctlxB0toPk0+0Sflow6Kiw02z22AGIAlNc4obVqUx664+R2nWbvSOmh/ShOiVWig==",
+      "license": "Elastic-2.0",
       "dependencies": {
-        "json-schema-walker": "^2.0.0"
+        "@upstash/redis": "^1.35.0",
+        "ai": "^4.3.16",
+        "js-tiktoken": "^1.0.20",
+        "pg": "^8.16.0",
+        "pg-pool": "^3.10.0",
+        "postgres": "^3.4.7",
+        "redis": "^4.7.1",
+        "xxhash-wasm": "^1.1.0",
+        "zod": "^3.25.67",
+        "zod-to-json-schema": "^3.24.5"
       },
       "peerDependencies": {
-        "@hono/arktype-validator": "^2.0.0",
-        "@hono/effect-validator": "^1.2.0",
-        "@hono/typebox-validator": "^0.2.0 || ^0.3.0",
-        "@hono/valibot-validator": "^0.5.1",
-        "@hono/zod-validator": "^0.4.1",
-        "@sinclair/typebox": "^0.34.9",
-        "@valibot/to-json-schema": "^1.0.0-beta.3",
-        "arktype": "^2.0.0",
-        "effect": "^3.11.3",
-        "hono": "^4.6.13",
-        "openapi-types": "^12.1.3",
-        "valibot": "^1.0.0-beta.9",
-        "zod": "^3.23.8",
-        "zod-openapi": "^4.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@hono/arktype-validator": {
-          "optional": true
-        },
-        "@hono/effect-validator": {
-          "optional": true
-        },
-        "@hono/typebox-validator": {
-          "optional": true
-        },
-        "@hono/valibot-validator": {
-          "optional": true
-        },
-        "@hono/zod-validator": {
-          "optional": true
-        },
-        "@sinclair/typebox": {
-          "optional": true
-        },
-        "@valibot/to-json-schema": {
-          "optional": true
-        },
-        "arktype": {
-          "optional": true
-        },
-        "effect": {
-          "optional": true
-        },
-        "hono": {
-          "optional": true
-        },
-        "valibot": {
-          "optional": true
-        },
-        "zod": {
-          "optional": true
-        },
-        "zod-openapi": {
-          "optional": true
-        }
+        "@mastra/core": ">=0.10.7-0 <0.11.0-0"
       }
     },
-    "node_modules/@mastra/mcp/node_modules/libsql": {
-      "version": "0.4.7",
-      "resolved": "https://registry.npmjs.org/libsql/-/libsql-0.4.7.tgz",
-      "integrity": "sha512-T9eIRCs6b0J1SHKYIvD8+KCJMcWZ900iZyxdnSCdqxN12Z1ijzT+jY5nrk72Jw4B0HGzms2NgpryArlJqvc3Lw==",
-      "cpu": [
-        "x64",
-        "arm64",
-        "wasm32"
-      ],
-      "license": "MIT",
-      "os": [
-        "darwin",
-        "linux",
-        "win32"
-      ],
-      "dependencies": {
-        "@neon-rs/load": "^0.0.4",
-        "detect-libc": "2.0.2"
-      },
-      "optionalDependencies": {
-        "@libsql/darwin-arm64": "0.4.7",
-        "@libsql/darwin-x64": "0.4.7",
-        "@libsql/linux-arm64-gnu": "0.4.7",
-        "@libsql/linux-arm64-musl": "0.4.7",
-        "@libsql/linux-x64-gnu": "0.4.7",
-        "@libsql/linux-x64-musl": "0.4.7",
-        "@libsql/win32-x64-msvc": "0.4.7"
-      }
-    },
-    "node_modules/@mastra/memory": {
-      "version": "0.2.10",
-      "resolved": "https://registry.npmjs.org/@mastra/memory/-/memory-0.2.10.tgz",
-      "integrity": "sha512-YyMDpDhIYJk/oSnvdqJ8P60oeaWXXgvVhP7DzXe1tl9gpmhazTukmAiLvwled8RBNW31a0ScZ9HUGOHMiTprrg==",
+    "node_modules/@mastra/schema-compat": {
+      "version": "0.10.3",
+      "resolved": "https://registry.npmjs.org/@mastra/schema-compat/-/schema-compat-0.10.3.tgz",
+      "integrity": "sha512-ro8mp2TqZMp6J2VEnbCBxofUdmQ9kqdCDOHXuI3KiKoUVwohRBaQ+QoJYYKVmvyjQ69gblGaLdxre9OfB2V40Q==",
       "license": "Elastic-2.0",
       "dependencies": {
-        "@mastra/core": "^0.8.3",
-        "@upstash/redis": "^1.34.5",
-        "ai": "^4.2.2",
-        "js-tiktoken": "^1.0.19",
-        "pg": "^8.13.3",
-        "pg-pool": "^3.7.1",
-        "postgres": "^3.4.5",
-        "redis": "^4.7.0",
-        "xxhash-wasm": "^1.1.0",
-        "zod": "^3.24.2"
+        "json-schema": "^0.4.0",
+        "zod-from-json-schema": "^0.0.5",
+        "zod-to-json-schema": "^3.24.5"
+      },
+      "peerDependencies": {
+        "ai": "^4.0.0",
+        "zod": "^3.0.0"
       }
     },
     "node_modules/@mastra/server": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/@mastra/server/-/server-1.0.3.tgz",
-      "integrity": "sha512-VfzmaHbbsMFdOkqn3iH6CwByreIPRHXHcn0YZG32W4OUJ2oNl2AplFSDA1Fxn2dLJy+KYWuM8NUnRxXvhOJSbQ==",
+      "version": "0.10.8",
+      "resolved": "https://registry.npmjs.org/@mastra/server/-/server-0.10.8.tgz",
+      "integrity": "sha512-nDZvpEB/JetVO7MhfDcDJnbDHKt6RxJ9FQ741CtryTlix9M+Pp2UtlKhayPyC/8p7NShYfojAeeiDMEY6BHnIw==",
       "license": "Elastic-2.0",
       "peerDependencies": {
-        "@mastra/core": "^0.8.3"
+        "@mastra/core": "^0.10.2-alpha.0",
+        "zod": "^3.0.0"
       }
     },
     "node_modules/@mdn/browser-compat-data": {
@@ -6573,14 +6173,15 @@
       }
     },
     "node_modules/@modelcontextprotocol/sdk": {
-      "version": "1.10.2",
-      "resolved": "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.10.2.tgz",
-      "integrity": "sha512-rb6AMp2DR4SN+kc6L1ta2NCpApyA9WYNx3CrTSZvGxq9wH71bRur+zRqPfg0vQ9mjywR7qZdX2RGHOPq3ss+tA==",
+      "version": "1.13.0",
+      "resolved": "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.13.0.tgz",
+      "integrity": "sha512-P5FZsXU0kY881F6Hbk9GhsYx02/KgWK1DYf7/tyE/1lcFKhDYPQR9iYjhQXJn+Sg6hQleMo3DB7h7+p4wgp2Lw==",
       "license": "MIT",
       "dependencies": {
+        "ajv": "^6.12.6",
         "content-type": "^1.0.5",
         "cors": "^2.8.5",
-        "cross-spawn": "^7.0.3",
+        "cross-spawn": "^7.0.5",
         "eventsource": "^3.0.2",
         "express": "^5.0.1",
         "express-rate-limit": "^7.5.0",
@@ -7302,7 +6903,6 @@
       "version": "2.1.5",
       "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
       "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@nodelib/fs.stat": "2.0.5",
@@ -7316,7 +6916,6 @@
       "version": "2.0.5",
       "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
       "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">= 8"
@@ -7326,7 +6925,6 @@
       "version": "1.2.8",
       "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
       "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@nodelib/fs.scandir": "2.1.5",
@@ -7392,1381 +6990,1350 @@
       }
     },
     "node_modules/@opentelemetry/api-logs": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/api-logs/-/api-logs-0.57.2.tgz",
-      "integrity": "sha512-uIX52NnTM0iBh84MShlpouI7UKqkZ7MrUszTmaypHBu4r7NofznSnQRfJ+uUeDtQDj6w8eFGg5KBLDAwAPz1+A==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/api-logs/-/api-logs-0.201.1.tgz",
+      "integrity": "sha512-IxcFDP1IGMDemVFG2by/AMK+/o6EuBQ8idUq3xZ6MxgQGeumYZuX5OwR0h9HuvcUc/JPjQGfU5OHKIKYDJcXeA==",
       "license": "Apache-2.0",
       "dependencies": {
         "@opentelemetry/api": "^1.3.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": ">=8.0.0"
       }
     },
     "node_modules/@opentelemetry/auto-instrumentations-node": {
-      "version": "0.56.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/auto-instrumentations-node/-/auto-instrumentations-node-0.56.1.tgz",
-      "integrity": "sha512-4cK0+unfkXRRbQQg2r9K3ki8JlE0j9Iw8+4DZEkChShAnmviiE+/JMgHGvK+VVcLrSlgV6BBHv4+ZTLukQwhkA==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
-        "@opentelemetry/instrumentation-amqplib": "^0.46.1",
-        "@opentelemetry/instrumentation-aws-lambda": "^0.50.3",
-        "@opentelemetry/instrumentation-aws-sdk": "^0.49.1",
-        "@opentelemetry/instrumentation-bunyan": "^0.45.1",
-        "@opentelemetry/instrumentation-cassandra-driver": "^0.45.1",
-        "@opentelemetry/instrumentation-connect": "^0.43.1",
-        "@opentelemetry/instrumentation-cucumber": "^0.14.1",
-        "@opentelemetry/instrumentation-dataloader": "^0.16.1",
-        "@opentelemetry/instrumentation-dns": "^0.43.1",
-        "@opentelemetry/instrumentation-express": "^0.47.1",
-        "@opentelemetry/instrumentation-fastify": "^0.44.2",
-        "@opentelemetry/instrumentation-fs": "^0.19.1",
-        "@opentelemetry/instrumentation-generic-pool": "^0.43.1",
-        "@opentelemetry/instrumentation-graphql": "^0.47.1",
-        "@opentelemetry/instrumentation-grpc": "^0.57.1",
-        "@opentelemetry/instrumentation-hapi": "^0.45.2",
-        "@opentelemetry/instrumentation-http": "^0.57.1",
-        "@opentelemetry/instrumentation-ioredis": "^0.47.1",
-        "@opentelemetry/instrumentation-kafkajs": "^0.7.1",
-        "@opentelemetry/instrumentation-knex": "^0.44.1",
-        "@opentelemetry/instrumentation-koa": "^0.47.1",
-        "@opentelemetry/instrumentation-lru-memoizer": "^0.44.1",
-        "@opentelemetry/instrumentation-memcached": "^0.43.1",
-        "@opentelemetry/instrumentation-mongodb": "^0.52.0",
-        "@opentelemetry/instrumentation-mongoose": "^0.46.1",
-        "@opentelemetry/instrumentation-mysql": "^0.45.1",
-        "@opentelemetry/instrumentation-mysql2": "^0.45.2",
-        "@opentelemetry/instrumentation-nestjs-core": "^0.44.1",
-        "@opentelemetry/instrumentation-net": "^0.43.1",
-        "@opentelemetry/instrumentation-pg": "^0.51.1",
-        "@opentelemetry/instrumentation-pino": "^0.46.1",
-        "@opentelemetry/instrumentation-redis": "^0.46.1",
-        "@opentelemetry/instrumentation-redis-4": "^0.46.1",
-        "@opentelemetry/instrumentation-restify": "^0.45.1",
-        "@opentelemetry/instrumentation-router": "^0.44.1",
-        "@opentelemetry/instrumentation-socket.io": "^0.46.1",
-        "@opentelemetry/instrumentation-tedious": "^0.18.1",
-        "@opentelemetry/instrumentation-undici": "^0.10.1",
-        "@opentelemetry/instrumentation-winston": "^0.44.1",
-        "@opentelemetry/resource-detector-alibaba-cloud": "^0.30.1",
-        "@opentelemetry/resource-detector-aws": "^1.12.0",
-        "@opentelemetry/resource-detector-azure": "^0.6.1",
-        "@opentelemetry/resource-detector-container": "^0.6.1",
-        "@opentelemetry/resource-detector-gcp": "^0.33.1",
-        "@opentelemetry/resources": "^1.24.0",
-        "@opentelemetry/sdk-node": "^0.57.1"
-      },
-      "engines": {
-        "node": ">=14"
+      "version": "0.59.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/auto-instrumentations-node/-/auto-instrumentations-node-0.59.0.tgz",
+      "integrity": "sha512-kqoEBQss8fGGGRND0ycXZrwCXa/ePFop6W+YvZF5PikA9EsH0J/F2W6zvjetKjtdjyl6AUDW8I7gslZPXLLz3Q==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.201.0",
+        "@opentelemetry/instrumentation-amqplib": "^0.48.0",
+        "@opentelemetry/instrumentation-aws-lambda": "^0.52.0",
+        "@opentelemetry/instrumentation-aws-sdk": "^0.53.0",
+        "@opentelemetry/instrumentation-bunyan": "^0.47.0",
+        "@opentelemetry/instrumentation-cassandra-driver": "^0.47.0",
+        "@opentelemetry/instrumentation-connect": "^0.45.0",
+        "@opentelemetry/instrumentation-cucumber": "^0.16.0",
+        "@opentelemetry/instrumentation-dataloader": "^0.18.0",
+        "@opentelemetry/instrumentation-dns": "^0.45.0",
+        "@opentelemetry/instrumentation-express": "^0.50.0",
+        "@opentelemetry/instrumentation-fastify": "^0.46.0",
+        "@opentelemetry/instrumentation-fs": "^0.21.0",
+        "@opentelemetry/instrumentation-generic-pool": "^0.45.0",
+        "@opentelemetry/instrumentation-graphql": "^0.49.0",
+        "@opentelemetry/instrumentation-grpc": "^0.201.0",
+        "@opentelemetry/instrumentation-hapi": "^0.47.0",
+        "@opentelemetry/instrumentation-http": "^0.201.0",
+        "@opentelemetry/instrumentation-ioredis": "^0.49.0",
+        "@opentelemetry/instrumentation-kafkajs": "^0.10.0",
+        "@opentelemetry/instrumentation-knex": "^0.46.0",
+        "@opentelemetry/instrumentation-koa": "^0.49.0",
+        "@opentelemetry/instrumentation-lru-memoizer": "^0.46.0",
+        "@opentelemetry/instrumentation-memcached": "^0.45.0",
+        "@opentelemetry/instrumentation-mongodb": "^0.54.0",
+        "@opentelemetry/instrumentation-mongoose": "^0.48.0",
+        "@opentelemetry/instrumentation-mysql": "^0.47.0",
+        "@opentelemetry/instrumentation-mysql2": "^0.47.0",
+        "@opentelemetry/instrumentation-nestjs-core": "^0.47.0",
+        "@opentelemetry/instrumentation-net": "^0.45.0",
+        "@opentelemetry/instrumentation-oracledb": "^0.27.0",
+        "@opentelemetry/instrumentation-pg": "^0.53.0",
+        "@opentelemetry/instrumentation-pino": "^0.48.0",
+        "@opentelemetry/instrumentation-redis": "^0.48.0",
+        "@opentelemetry/instrumentation-redis-4": "^0.48.0",
+        "@opentelemetry/instrumentation-restify": "^0.47.0",
+        "@opentelemetry/instrumentation-router": "^0.46.0",
+        "@opentelemetry/instrumentation-runtime-node": "^0.15.0",
+        "@opentelemetry/instrumentation-socket.io": "^0.48.0",
+        "@opentelemetry/instrumentation-tedious": "^0.20.0",
+        "@opentelemetry/instrumentation-undici": "^0.12.0",
+        "@opentelemetry/instrumentation-winston": "^0.46.0",
+        "@opentelemetry/resource-detector-alibaba-cloud": "^0.31.1",
+        "@opentelemetry/resource-detector-aws": "^2.1.0",
+        "@opentelemetry/resource-detector-azure": "^0.8.0",
+        "@opentelemetry/resource-detector-container": "^0.7.1",
+        "@opentelemetry/resource-detector-gcp": "^0.35.0",
+        "@opentelemetry/resources": "^2.0.0",
+        "@opentelemetry/sdk-node": "^0.201.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
-        "@opentelemetry/api": "^1.4.1"
+        "@opentelemetry/api": "^1.4.1",
+        "@opentelemetry/core": "^2.0.0"
       }
     },
     "node_modules/@opentelemetry/context-async-hooks": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/context-async-hooks/-/context-async-hooks-1.30.1.tgz",
-      "integrity": "sha512-s5vvxXPVdjqS3kTLKMeBMvop9hbWkwzBpu+mUO2M7sZtlkyDJGwFe33wRKnbaYDo8ExRVBIIdwIGrqpxHuKttA==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/context-async-hooks/-/context-async-hooks-2.0.1.tgz",
+      "integrity": "sha512-XuY23lSI3d4PEqKA+7SLtAgwqIfc6E/E9eAQWLN1vlpC53ybO3o6jW4BsXo1xvz9lYyyWItfQDDLzezER01mCw==",
       "license": "Apache-2.0",
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": ">=1.0.0 <1.10.0"
       }
     },
     "node_modules/@opentelemetry/core": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/core/-/core-1.30.1.tgz",
-      "integrity": "sha512-OOCM2C/QIURhJMuKaekP3TRBxBKxG/TWWA0TL2J6nXUtDnuCtccy49LUJF8xPFXMX+0LMcxFpCo8M9cGY1W6rQ==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/core/-/core-2.0.1.tgz",
+      "integrity": "sha512-MaZk9SJIDgo1peKevlbhP6+IwIiNPNmswNL4AF0WaQJLbHXjr9SrZMgS12+iqr9ToV4ZVosCcc0f8Rg67LXjxw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/semantic-conventions": "1.28.0"
+        "@opentelemetry/semantic-conventions": "^1.29.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": ">=1.0.0 <1.10.0"
       }
     },
-    "node_modules/@opentelemetry/core/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
-      }
-    },
     "node_modules/@opentelemetry/exporter-logs-otlp-grpc": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-grpc/-/exporter-logs-otlp-grpc-0.57.2.tgz",
-      "integrity": "sha512-eovEy10n3umjKJl2Ey6TLzikPE+W4cUQ4gCwgGP1RqzTGtgDra0WjIqdy29ohiUKfvmbiL3MndZww58xfIvyFw==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-grpc/-/exporter-logs-otlp-grpc-0.201.1.tgz",
+      "integrity": "sha512-ACV2Az9BHRcAaPMYBnYMwKHNn2JwkzzsT3cdeG6+Tokm47fFfpf2xk3sq3QvX0Gk+TXW7q6d+OfBuYfWoAud2g==",
       "license": "Apache-2.0",
       "dependencies": {
         "@grpc/grpc-js": "^1.7.1",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-grpc-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/sdk-logs": "0.57.2"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-grpc-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-transformer": "0.201.1",
+        "@opentelemetry/sdk-logs": "0.201.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/exporter-logs-otlp-http": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-http/-/exporter-logs-otlp-http-0.57.2.tgz",
-      "integrity": "sha512-0rygmvLcehBRp56NQVLSleJ5ITTduq/QfU7obOkyWgPpFHulwpw2LYTqNIz5TczKZuy5YY+5D3SDnXZL1tXImg==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-http/-/exporter-logs-otlp-http-0.201.1.tgz",
+      "integrity": "sha512-flYr1tr/wlUxsVc2ZYt/seNLgp3uagyUg9MtjiHYyaMQcN4XuEuI4UjUFwXAGQjd2khmXeie5YnTmO8gzyzemw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/sdk-logs": "0.57.2"
+        "@opentelemetry/api-logs": "0.201.1",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-transformer": "0.201.1",
+        "@opentelemetry/sdk-logs": "0.201.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/exporter-logs-otlp-proto": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-proto/-/exporter-logs-otlp-proto-0.57.2.tgz",
-      "integrity": "sha512-ta0ithCin0F8lu9eOf4lEz9YAScecezCHkMMyDkvd9S7AnZNX5ikUmC5EQOQADU+oCcgo/qkQIaKcZvQ0TYKDw==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-proto/-/exporter-logs-otlp-proto-0.201.1.tgz",
+      "integrity": "sha512-ZVkutDoQYLAkWmpbmd9XKZ9NeBQS6GPxLl/NZ/uDMq+tFnmZu1p0cvZ43x5+TpFoGkjPR6QYHCxkcZBwI9M8ag==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-logs": "0.57.2",
-        "@opentelemetry/sdk-trace-base": "1.30.1"
+        "@opentelemetry/api-logs": "0.201.1",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-transformer": "0.201.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-logs": "0.201.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/exporter-metrics-otlp-grpc": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-grpc/-/exporter-metrics-otlp-grpc-0.57.2.tgz",
-      "integrity": "sha512-r70B8yKR41F0EC443b5CGB4rUaOMm99I5N75QQt6sHKxYDzSEc6gm48Diz1CI1biwa5tDPznpylTrywO/pT7qw==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-grpc/-/exporter-metrics-otlp-grpc-0.201.1.tgz",
+      "integrity": "sha512-ywo4TpQNOLi07K7P3CaymzS8XlDGfTFmMQ4oSPsZv38/gAf3/wPVh2uL5qYAFqrVokNCmkcaeCwX3QSy0g9b/A==",
       "license": "Apache-2.0",
       "dependencies": {
         "@grpc/grpc-js": "^1.7.1",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/exporter-metrics-otlp-http": "0.57.2",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-grpc-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-metrics": "1.30.1"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/exporter-metrics-otlp-http": "0.201.1",
+        "@opentelemetry/otlp-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-grpc-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-transformer": "0.201.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-metrics": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/exporter-metrics-otlp-http": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-http/-/exporter-metrics-otlp-http-0.57.2.tgz",
-      "integrity": "sha512-ttb9+4iKw04IMubjm3t0EZsYRNWr3kg44uUuzfo9CaccYlOh8cDooe4QObDUkvx9d5qQUrbEckhrWKfJnKhemA==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-http/-/exporter-metrics-otlp-http-0.201.1.tgz",
+      "integrity": "sha512-LMRVg2yTev28L51RLLUK3gY0avMa1RVBq7IkYNtXDBxJRcd0TGGq/0rqfk7Y4UIM9NCJhDIUFHeGg8NpSgSWcw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-metrics": "1.30.1"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-transformer": "0.201.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-metrics": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/exporter-metrics-otlp-proto": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-proto/-/exporter-metrics-otlp-proto-0.57.2.tgz",
-      "integrity": "sha512-HX068Q2eNs38uf7RIkNN9Hl4Ynl+3lP0++KELkXMCpsCbFO03+0XNNZ1SkwxPlP9jrhQahsMPMkzNXpq3fKsnw==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-proto/-/exporter-metrics-otlp-proto-0.201.1.tgz",
+      "integrity": "sha512-9ie2jcaUQZdIoe6B02r0rF4Gz+JsZ9mev/2pYou1N0woOUkFM8xwO6BAlORnrFVslqF/XO5WG3q5FsTbuC5iiw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/exporter-metrics-otlp-http": "0.57.2",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-metrics": "1.30.1"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/exporter-metrics-otlp-http": "0.201.1",
+        "@opentelemetry/otlp-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-transformer": "0.201.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-metrics": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/exporter-prometheus": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-prometheus/-/exporter-prometheus-0.57.2.tgz",
-      "integrity": "sha512-VqIqXnuxWMWE/1NatAGtB1PvsQipwxDcdG4RwA/umdBcW3/iOHp0uejvFHTRN2O78ZPged87ErJajyUBPUhlDQ==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-prometheus/-/exporter-prometheus-0.201.1.tgz",
+      "integrity": "sha512-J6/4KgljApWda/2YBMHHZg6vaZ6H8BjFInO8YQW+N0al1LjGAAq3pFRCEHpU6GI7ZlkphCxKy6MUjXOZVM8KWQ==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-metrics": "1.30.1"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-metrics": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/exporter-trace-otlp-grpc": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-grpc/-/exporter-trace-otlp-grpc-0.57.2.tgz",
-      "integrity": "sha512-gHU1vA3JnHbNxEXg5iysqCWxN9j83d7/epTYBZflqQnTyCC4N7yZXn/dMM+bEmyhQPGjhCkNZLx4vZuChH1PYw==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-grpc/-/exporter-trace-otlp-grpc-0.201.1.tgz",
+      "integrity": "sha512-0ZM5CBoZbufXckxi/SWwP5B++CjPWS6N1i+K7f+GhRxYWVGt/yh4eiV3jklZKWw/DUyMkUvUOo0GW1RxoiLoZQ==",
       "license": "Apache-2.0",
       "dependencies": {
         "@grpc/grpc-js": "^1.7.1",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-grpc-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-grpc-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-transformer": "0.201.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/exporter-trace-otlp-http": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-http/-/exporter-trace-otlp-http-0.57.2.tgz",
-      "integrity": "sha512-sB/gkSYFu+0w2dVQ0PWY9fAMl172PKMZ/JrHkkW8dmjCL0CYkmXeE+ssqIL/yBUTPOvpLIpenX5T9RwXRBW/3g==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-http/-/exporter-trace-otlp-http-0.201.1.tgz",
+      "integrity": "sha512-Nw3pIqATC/9LfSGrMiQeeMQ7/z7W2D0wKPxtXwAcr7P64JW7KSH4YSX7Ji8Ti3MmB79NQg6imdagfegJDB0rng==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-transformer": "0.201.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/exporter-trace-otlp-proto": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-proto/-/exporter-trace-otlp-proto-0.57.2.tgz",
-      "integrity": "sha512-awDdNRMIwDvUtoRYxRhja5QYH6+McBLtoz1q9BeEsskhZcrGmH/V1fWpGx8n+Rc+542e8pJA6y+aullbIzQmlw==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-proto/-/exporter-trace-otlp-proto-0.201.1.tgz",
+      "integrity": "sha512-wMxdDDyW+lmmenYGBp0evCoKzajXqIw6SSaZtaF/uqKR9/POhC/9vudnc+kf8W49hYFyIEutPrc1hA0exe3UwQ==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-transformer": "0.201.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/exporter-zipkin": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-zipkin/-/exporter-zipkin-1.30.1.tgz",
-      "integrity": "sha512-6S2QIMJahIquvFaaxmcwpvQQRD/YFaMTNoIxrfPIPOeITN+a8lfEcPDxNxn8JDAaxkg+4EnXhz8upVDYenoQjA==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-zipkin/-/exporter-zipkin-2.0.1.tgz",
+      "integrity": "sha512-a9eeyHIipfdxzCfc2XPrE+/TI3wmrZUDFtG2RRXHSbZZULAny7SyybSvaDvS77a7iib5MPiAvluwVvbGTsHxsw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1",
-        "@opentelemetry/semantic-conventions": "1.28.0"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1",
+        "@opentelemetry/semantic-conventions": "^1.29.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.0.0"
       }
     },
-    "node_modules/@opentelemetry/exporter-zipkin/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
-      }
-    },
     "node_modules/@opentelemetry/instrumentation": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation/-/instrumentation-0.57.2.tgz",
-      "integrity": "sha512-BdBGhQBh8IjZ2oIIX6F2/Q3LKm/FDDKi6ccYKcBTeilh6SNdNKveDOLk73BkSJjQLJk6qe4Yh+hHw1UPhCDdrg==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation/-/instrumentation-0.201.1.tgz",
+      "integrity": "sha512-6EOSoT2zcyBM3VryAzn35ytjRrOMeaWZyzQ/PHVfxoXp5rMf7UUgVToqxOhQffKOHtC7Dma4bHt+DuwIBBZyZA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
+        "@opentelemetry/api-logs": "0.201.1",
         "@types/shimmer": "^1.2.0",
         "import-in-the-middle": "^1.8.1",
         "require-in-the-middle": "^7.1.1",
-        "semver": "^7.5.2",
         "shimmer": "^1.2.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-amqplib": {
-      "version": "0.46.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-amqplib/-/instrumentation-amqplib-0.46.1.tgz",
-      "integrity": "sha512-AyXVnlCf/xV3K/rNumzKxZqsULyITJH6OVLiW6730JPRqWA7Zc9bvYoVNpN6iOpTU8CasH34SU/ksVJmObFibQ==",
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-amqplib/-/instrumentation-amqplib-0.48.0.tgz",
+      "integrity": "sha512-zXcClQX3sttvBih1CjdPbvve/If1lCHPFK41fDpJE5NYjK38dwTMOUEV0+/ulfq4iU4oEV+ReCA+ZaXAm/uYdw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-aws-lambda": {
-      "version": "0.50.3",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-aws-lambda/-/instrumentation-aws-lambda-0.50.3.tgz",
-      "integrity": "sha512-kotm/mRvSWUauudxcylc5YCDei+G/r+jnOH6q5S99aPLQ/Ms8D2yonMIxEJUILIPlthEmwLYxkw3ualWzMjm/A==",
+      "version": "0.52.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-aws-lambda/-/instrumentation-aws-lambda-0.52.0.tgz",
+      "integrity": "sha512-xGVhBxxO7OuOl72XNwt1MOgaA6d3pSKI2Y5r3OfGNkx602KzW1t2vBHzJf8s4DAJYdMd5/RJLRi1z87CBu7yyg==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0",
         "@types/aws-lambda": "8.10.147"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-aws-sdk": {
-      "version": "0.49.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-aws-sdk/-/instrumentation-aws-sdk-0.49.1.tgz",
-      "integrity": "sha512-Vbj4BYeV/1K4Pbbfk+gQ8gwYL0w+tBeUwG88cOxnF7CLPO1XnskGV8Q3Gzut2Ah/6Dg17dBtlzEqL3UiFP2Z6A==",
+      "version": "0.53.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-aws-sdk/-/instrumentation-aws-sdk-0.53.0.tgz",
+      "integrity": "sha512-CXB2cu0qnp5lHtNZRpvz0oOZrIKiWfHOiNVGWln9KY0m9sBheEqc58x3Ptpi5lMyso67heVCGDAc9+KbLAZwTQ==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1",
-        "@opentelemetry/propagation-utils": "^0.30.16",
-        "@opentelemetry/semantic-conventions": "^1.27.0"
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
+        "@opentelemetry/propagation-utils": "^0.31.1",
+        "@opentelemetry/semantic-conventions": "^1.31.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-bunyan": {
-      "version": "0.45.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-bunyan/-/instrumentation-bunyan-0.45.1.tgz",
-      "integrity": "sha512-T9POV9ccS41UjpsjLrJ4i0m8LfplBiN3dMeH9XZ2btiDrjoaWtDrst6tNb1avetBjkeshOuBp1EWKP22EVSr0g==",
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-bunyan/-/instrumentation-bunyan-0.47.0.tgz",
+      "integrity": "sha512-Sux5us8fkBLO/z+H8P2fSu+fRIm1xTeUHlwtM/E4CNZS9W/sAYrc8djZVa2JrwNXj/tE6U5vRJVObGekIkULow==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/api-logs": "^0.57.1",
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/api-logs": "^0.201.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@types/bunyan": "1.8.11"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-cassandra-driver": {
-      "version": "0.45.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-cassandra-driver/-/instrumentation-cassandra-driver-0.45.1.tgz",
-      "integrity": "sha512-RqnP0rK2hcKK1AKcmYvedLiL6G5TvFGiSUt2vI9wN0cCBdTt9Y9+wxxY19KoGxq7e9T/aHow6P5SUhCVI1sHvQ==",
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-cassandra-driver/-/instrumentation-cassandra-driver-0.47.0.tgz",
+      "integrity": "sha512-MMn/Y2ErClGe7fmzTfR3iJcbEIspAn9hxbnj8oH7bVpPHcWbPphYICkNfLqah4tKVd+zazhs1agCiHL8y/e12g==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-connect": {
-      "version": "0.43.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-connect/-/instrumentation-connect-0.43.1.tgz",
-      "integrity": "sha512-ht7YGWQuV5BopMcw5Q2hXn3I8eG8TH0J/kc/GMcW4CuNTgiP6wCu44BOnucJWL3CmFWaRHI//vWyAhaC8BwePw==",
+      "version": "0.45.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-connect/-/instrumentation-connect-0.45.0.tgz",
+      "integrity": "sha512-OHdp71gsRnm0lVD7SEtYSJFfvq4r6QN/5lgRK+Vrife1DHy+Insm66JJZN2Frt1waIzmDNn3VLCCafTnItfVcA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0",
         "@types/connect": "3.4.38"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-cucumber": {
-      "version": "0.14.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-cucumber/-/instrumentation-cucumber-0.14.1.tgz",
-      "integrity": "sha512-ybO+tmH85pDO0ywTskmrMtZcccKyQr7Eb7wHy1keR2HFfx46SzZbjHo1AuGAX//Hook3gjM7+w211gJ2bwKe1Q==",
+      "version": "0.16.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-cucumber/-/instrumentation-cucumber-0.16.0.tgz",
+      "integrity": "sha512-bLKOQFgKimQkD8th+y0zMD9vNBjq79BWmPd7QqOGV2atQFbb2QJnorp/Y6poTVQNiITv0GE2mmmcqbjF+Y+JQA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.0.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-dataloader": {
-      "version": "0.16.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-dataloader/-/instrumentation-dataloader-0.16.1.tgz",
-      "integrity": "sha512-K/qU4CjnzOpNkkKO4DfCLSQshejRNAJtd4esgigo/50nxCB6XCyi1dhAblUHM9jG5dRm8eu0FB+t87nIo99LYQ==",
+      "version": "0.18.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-dataloader/-/instrumentation-dataloader-0.18.0.tgz",
+      "integrity": "sha512-egPb8OcGZP6GUU/dbB8NnVgnSIqlM0nHS8KkADq51rVaMkzBcevtinYDFYTQu9tuQ6GEwaSdiQxiQORpYaVeQw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1"
+        "@opentelemetry/instrumentation": "^0.201.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-dns": {
-      "version": "0.43.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-dns/-/instrumentation-dns-0.43.1.tgz",
-      "integrity": "sha512-e/tMZYU1nc+k+J3259CQtqVZIPsPRSLNoAQbGEmSKrjLEY/KJSbpBZ17lu4dFVBzqoF1cZYIZxn9WPQxy4V9ng==",
+      "version": "0.45.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-dns/-/instrumentation-dns-0.45.0.tgz",
+      "integrity": "sha512-gE02Jj97aaYUdZIvp2RwWPy3DLN86k15YvPRzkMaPWZKVwsKrHcA+xVX8k3rh9o0g64PC/U2f+LXiJr14PyVLg==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1"
+        "@opentelemetry/instrumentation": "^0.201.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-express": {
-      "version": "0.47.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-express/-/instrumentation-express-0.47.1.tgz",
-      "integrity": "sha512-QNXPTWteDclR2B4pDFpz0TNghgB33UMjUt14B+BZPmtH1MwUFAfLHBaP5If0Z5NZC+jaH8oF2glgYjrmhZWmSw==",
+      "version": "0.50.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-express/-/instrumentation-express-0.50.0.tgz",
+      "integrity": "sha512-0VF7HM8hTe0B5oXqCfBljMYFeQ3WKKqs0kCTRT02/Pjnmj5bOmR62r2dstjxbxnGKoeFRUHD/QAown9gyf659A==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-fastify": {
-      "version": "0.44.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-fastify/-/instrumentation-fastify-0.44.2.tgz",
-      "integrity": "sha512-arSp97Y4D2NWogoXRb8CzFK3W2ooVdvqRRtQDljFt9uC3zI6OuShgey6CVFC0JxT1iGjkAr1r4PDz23mWrFULQ==",
+      "version": "0.46.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-fastify/-/instrumentation-fastify-0.46.0.tgz",
+      "integrity": "sha512-tib8SH5RCqhYRw9Qcpep9tP6ABxyXFDljdRy2aKpklHaFAyDELr3EpEAkGdkMZtO5Y3/QhUsmzYZp1np9jkjUg==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-fs": {
-      "version": "0.19.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-fs/-/instrumentation-fs-0.19.1.tgz",
-      "integrity": "sha512-6g0FhB3B9UobAR60BGTcXg4IHZ6aaYJzp0Ki5FhnxyAPt8Ns+9SSvgcrnsN2eGmk3RWG5vYycUGOEApycQL24A==",
+      "version": "0.21.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-fs/-/instrumentation-fs-0.21.0.tgz",
+      "integrity": "sha512-p2Fn78KSSbSSIJOOTn9FbxEzNRIIsYn9KTemKhABuunVqHixIqQ3hUjChbR+RbjPNZQthDC/0GHDeihRoyLdLQ==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1"
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-generic-pool": {
-      "version": "0.43.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-generic-pool/-/instrumentation-generic-pool-0.43.1.tgz",
-      "integrity": "sha512-M6qGYsp1cURtvVLGDrPPZemMFEbuMmCXgQYTReC/IbimV5sGrLBjB+/hANUpRZjX67nGLdKSVLZuQQAiNz+sww==",
+      "version": "0.45.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-generic-pool/-/instrumentation-generic-pool-0.45.0.tgz",
+      "integrity": "sha512-+fk7tnpzkkBAQzEtyJA0zRv7aBDhr05zczyBn//iJdmDG+ZfQFuIKK4dXNnv9FUZpedW0wcHlPqbP5FIGhAsLQ==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1"
+        "@opentelemetry/instrumentation": "^0.201.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-graphql": {
-      "version": "0.47.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-graphql/-/instrumentation-graphql-0.47.1.tgz",
-      "integrity": "sha512-EGQRWMGqwiuVma8ZLAZnExQ7sBvbOx0N/AE/nlafISPs8S+QtXX+Viy6dcQwVWwYHQPAcuY3bFt3xgoAwb4ZNQ==",
+      "version": "0.49.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-graphql/-/instrumentation-graphql-0.49.0.tgz",
+      "integrity": "sha512-FZaOS/BmE5npzk95X3Iqfo80a6wEJlkAtk7wLUJG/VZaB8RbBjJow4g0YdtvK8GNGEQW02KiQ+VtzdPGRemlwg==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1"
+        "@opentelemetry/instrumentation": "^0.201.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-grpc": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-grpc/-/instrumentation-grpc-0.57.2.tgz",
-      "integrity": "sha512-TR6YQA67cLSZzdxbf2SrbADJy2Y8eBW1+9mF15P0VK2MYcpdoUSmQTF1oMkBwa3B9NwqDFA2fq7wYTTutFQqaQ==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-grpc/-/instrumentation-grpc-0.201.1.tgz",
+      "integrity": "sha512-OIkXkVnilh8E6YKz/PiQtWeERqbcbjtVppMc7A2h39eaoaKnckXxom3YXhX+/PMhfmjbUnqw6k/KvmUr9zig1Q==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "0.57.2",
-        "@opentelemetry/semantic-conventions": "1.28.0"
+        "@opentelemetry/instrumentation": "0.201.1",
+        "@opentelemetry/semantic-conventions": "^1.29.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
-    "node_modules/@opentelemetry/instrumentation-grpc/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
-      }
-    },
     "node_modules/@opentelemetry/instrumentation-hapi": {
-      "version": "0.45.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-hapi/-/instrumentation-hapi-0.45.2.tgz",
-      "integrity": "sha512-7Ehow/7Wp3aoyCrZwQpU7a2CnoMq0XhIcioFuKjBb0PLYfBfmTsFTUyatlHu0fRxhwcRsSQRTvEhmZu8CppBpQ==",
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-hapi/-/instrumentation-hapi-0.47.0.tgz",
+      "integrity": "sha512-0BCiQl2+oAuhSzbZrgpZgRvg7PclTfb7GxuBqWmWj9XkRk6cKla18S0pBqRCtl+qluRIaZ7tyXKmdtlsXj0QIw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-http": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-http/-/instrumentation-http-0.57.2.tgz",
-      "integrity": "sha512-1Uz5iJ9ZAlFOiPuwYg29Bf7bJJc/GeoeJIFKJYQf67nTVKFe8RHbEtxgkOmK4UGZNHKXcpW4P8cWBYzBn1USpg==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-http/-/instrumentation-http-0.201.1.tgz",
+      "integrity": "sha512-xhkL/eOntScSLS8C2/LHKZ9Z9MEyGB9Yil7lF3JV0+YBeLXHQUIw2xPD7T0qw0DnqlrN8c/gi8hb5BEXZcyHRg==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/instrumentation": "0.57.2",
-        "@opentelemetry/semantic-conventions": "1.28.0",
-        "forwarded-parse": "2.1.2",
-        "semver": "^7.5.2"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/instrumentation": "0.201.1",
+        "@opentelemetry/semantic-conventions": "^1.29.0",
+        "forwarded-parse": "2.1.2"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
-    "node_modules/@opentelemetry/instrumentation-http/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
-      }
-    },
     "node_modules/@opentelemetry/instrumentation-ioredis": {
-      "version": "0.47.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-ioredis/-/instrumentation-ioredis-0.47.1.tgz",
-      "integrity": "sha512-OtFGSN+kgk/aoKgdkKQnBsQFDiG8WdCxu+UrHr0bXScdAmtSzLSraLo7wFIb25RVHfRWvzI5kZomqJYEg/l1iA==",
+      "version": "0.49.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-ioredis/-/instrumentation-ioredis-0.49.0.tgz",
+      "integrity": "sha512-CcbA9ylntqK7/lo7NUD/I+Uj6xcIiFFk1O2RnY23MugJunqZIFufvYkdh1mdG2bvBKdIVvA2nkVVt1Igw0uw1A==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
-        "@opentelemetry/redis-common": "^0.36.2",
+        "@opentelemetry/instrumentation": "^0.201.0",
+        "@opentelemetry/redis-common": "^0.37.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-kafkajs": {
-      "version": "0.7.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-kafkajs/-/instrumentation-kafkajs-0.7.1.tgz",
-      "integrity": "sha512-OtjaKs8H7oysfErajdYr1yuWSjMAectT7Dwr+axIoZqT9lmEOkD/H/3rgAs8h/NIuEi2imSXD+vL4MZtOuJfqQ==",
+      "version": "0.10.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-kafkajs/-/instrumentation-kafkajs-0.10.0.tgz",
+      "integrity": "sha512-0roBjhMaW5li1gXVqrBRjzeLPWUiym8TPQi3iXqMA3GizPzilE4hwhIVI7GxtMHAdS15TgkUce6WVYVOBFrrbg==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
-        "@opentelemetry/semantic-conventions": "^1.27.0"
+        "@opentelemetry/instrumentation": "^0.201.0",
+        "@opentelemetry/semantic-conventions": "^1.30.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-knex": {
-      "version": "0.44.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-knex/-/instrumentation-knex-0.44.1.tgz",
-      "integrity": "sha512-U4dQxkNhvPexffjEmGwCq68FuftFK15JgUF05y/HlK3M6W/G2iEaACIfXdSnwVNe9Qh0sPfw8LbOPxrWzGWGMQ==",
+      "version": "0.46.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-knex/-/instrumentation-knex-0.46.0.tgz",
+      "integrity": "sha512-+AxDwDdLJB467mEPOQKHod/1NDzX8msUAOEiViMkM7xAJoUsHTrP6EKlbjrCKkK+X2Eqh2pTO0ibeLkhG96oNA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-koa": {
-      "version": "0.47.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-koa/-/instrumentation-koa-0.47.1.tgz",
-      "integrity": "sha512-l/c+Z9F86cOiPJUllUCt09v+kICKvT+Vg1vOAJHtHPsJIzurGayucfCMq2acd/A/yxeNWunl9d9eqZ0G+XiI6A==",
+      "version": "0.49.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-koa/-/instrumentation-koa-0.49.0.tgz",
+      "integrity": "sha512-LO2pdZ5SF2LzWZLwrPTja/sQN8Kl4Wu5QvWSFJJLLGpeVKQWC4n41qjPUAAu668w43s42xqfs9bC4hWmQe7o8g==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-lru-memoizer": {
-      "version": "0.44.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-lru-memoizer/-/instrumentation-lru-memoizer-0.44.1.tgz",
-      "integrity": "sha512-5MPkYCvG2yw7WONEjYj5lr5JFehTobW7wX+ZUFy81oF2lr9IPfZk9qO+FTaM0bGEiymwfLwKe6jE15nHn1nmHg==",
+      "version": "0.46.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-lru-memoizer/-/instrumentation-lru-memoizer-0.46.0.tgz",
+      "integrity": "sha512-k8wdehAJYuSYWKiIDXrXSd7+33M4qOUEhrE3ymNFOHxVjwtUWpSh6JYSFe+5pqGilhl4CqUgxCkaQ9kPy3rAOQ==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1"
+        "@opentelemetry/instrumentation": "^0.201.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-memcached": {
-      "version": "0.43.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-memcached/-/instrumentation-memcached-0.43.1.tgz",
-      "integrity": "sha512-rK5YWC22gmsLp2aEbaPk5F+9r6BFFZuc9GTnW/ErrWpz2XNHUgeFInoPDg4t+Trs8OttIfn8XwkfFkSKqhxanw==",
+      "version": "0.45.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-memcached/-/instrumentation-memcached-0.45.0.tgz",
+      "integrity": "sha512-9NjbvCBM7p+wh/sHfSGDvrtinFYqIr6qunL9nN3e86eIQh3WyE9YdnlFGRbBR+MOzTCwSzrKAvY+J0fQe91VHA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0",
         "@types/memcached": "^2.2.6"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-mongodb": {
-      "version": "0.52.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mongodb/-/instrumentation-mongodb-0.52.0.tgz",
-      "integrity": "sha512-1xmAqOtRUQGR7QfJFfGV/M2kC7wmI2WgZdpru8hJl3S0r4hW0n3OQpEHlSGXJAaNFyvT+ilnwkT+g5L4ljHR6g==",
+      "version": "0.54.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mongodb/-/instrumentation-mongodb-0.54.0.tgz",
+      "integrity": "sha512-xTECmvFNfavpNz7btxmmvkCZKdHphQSSf0J4tSw4OOT0CSTythB/IWo41mYBd6GIutkmeA12dkKPd8zAU7zzyA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-mongoose": {
-      "version": "0.46.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mongoose/-/instrumentation-mongoose-0.46.1.tgz",
-      "integrity": "sha512-3kINtW1LUTPkiXFRSSBmva1SXzS/72we/jL22N+BnF3DFcoewkdkHPYOIdAAk9gSicJ4d5Ojtt1/HeibEc5OQg==",
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mongoose/-/instrumentation-mongoose-0.48.0.tgz",
+      "integrity": "sha512-kvopwp/kb1wN8jd0HhIBx/ZxbSmwqhN7LLvl9a7fXYACYlewUtCnVJLG80kwuG+rexRZlxeDfjoacFRDQSf9XA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-mysql": {
-      "version": "0.45.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mysql/-/instrumentation-mysql-0.45.1.tgz",
-      "integrity": "sha512-TKp4hQ8iKQsY7vnp/j0yJJ4ZsP109Ht6l4RHTj0lNEG1TfgTrIH5vJMbgmoYXWzNHAqBH2e7fncN12p3BP8LFg==",
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mysql/-/instrumentation-mysql-0.47.0.tgz",
+      "integrity": "sha512-QWJNDNW0JyHj3cGtQOeNBcrDeOY35yX/JnDg8jEvxzmoEABHyj0EqI8fHPdOQmdctTjKTjzbqwtuAzLYIfkdAA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0",
         "@types/mysql": "2.15.26"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-mysql2": {
-      "version": "0.45.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mysql2/-/instrumentation-mysql2-0.45.2.tgz",
-      "integrity": "sha512-h6Ad60FjCYdJZ5DTz1Lk2VmQsShiViKe0G7sYikb0GHI0NVvApp2XQNRHNjEMz87roFttGPLHOYVPlfy+yVIhQ==",
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mysql2/-/instrumentation-mysql2-0.47.0.tgz",
+      "integrity": "sha512-rVKuKJ6HFVTNXNo8WuC3lBL/9zQ0OZfga/2dLseg/jlQZzUlWijsA57trnA92pcYxs32HBPSfKpuA88ZAVBFpA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0",
-        "@opentelemetry/sql-common": "^0.40.1"
+        "@opentelemetry/sql-common": "^0.41.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-nestjs-core": {
-      "version": "0.44.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-nestjs-core/-/instrumentation-nestjs-core-0.44.1.tgz",
-      "integrity": "sha512-4TXaqJK27QXoMqrt4+hcQ6rKFd8B6V4JfrTJKnqBmWR1cbaqd/uwyl9yxhNH1JEkyo8GaBfdpBC4ZE4FuUhPmg==",
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-nestjs-core/-/instrumentation-nestjs-core-0.47.0.tgz",
+      "integrity": "sha512-xTtWbqdvlxRfhYidLEq0XvQUGqqgT4Fom21nxJ7XYvOoUJ4KNOxFBnfGW9RcXtFHDkux6rIjNP5CiPCYMZ007g==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
-        "@opentelemetry/semantic-conventions": "^1.27.0"
+        "@opentelemetry/instrumentation": "^0.201.0",
+        "@opentelemetry/semantic-conventions": "^1.30.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-net": {
-      "version": "0.43.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-net/-/instrumentation-net-0.43.1.tgz",
-      "integrity": "sha512-TaMqP6tVx9/SxlY81dHlSyP5bWJIKq+K7vKfk4naB/LX4LBePPY3++1s0edpzH+RfwN+tEGVW9zTb9ci0up/lQ==",
+      "version": "0.45.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-net/-/instrumentation-net-0.45.0.tgz",
+      "integrity": "sha512-kFdY4IMth8obBPXoAlpLkea7l85Joe+p7oep+BexrHQ0iX+0cvnfoYBMMSE/vAp6T1N3Nu6RDT2Wzf3mqkHxjw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/@opentelemetry/instrumentation-oracledb": {
+      "version": "0.27.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-oracledb/-/instrumentation-oracledb-0.27.0.tgz",
+      "integrity": "sha512-b/JBJroC22DqgeMUSLYyleN6ohyXbCK1YGvBsCuDdiYUmOOyyWYSKdm4D26hTwFv1TKce+Im6aGcXF1hq2WKuQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.201.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0",
+        "@types/oracledb": "6.5.2"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-pg": {
-      "version": "0.51.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-pg/-/instrumentation-pg-0.51.1.tgz",
-      "integrity": "sha512-QxgjSrxyWZc7Vk+qGSfsejPVFL1AgAJdSBMYZdDUbwg730D09ub3PXScB9d04vIqPriZ+0dqzjmQx0yWKiCi2Q==",
+      "version": "0.53.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-pg/-/instrumentation-pg-0.53.0.tgz",
+      "integrity": "sha512-riWbJvSviTAsjeuq8fn7Y7+CXEYf3sGR18WfLeM7GgSnptTOur1++SLTN7XogqiwP3LFFQ0GLoYe+hxVOEyEpw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.26.0",
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0",
-        "@opentelemetry/sql-common": "^0.40.1",
+        "@opentelemetry/sql-common": "^0.41.0",
         "@types/pg": "8.6.1",
         "@types/pg-pool": "2.0.6"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-pino": {
-      "version": "0.46.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-pino/-/instrumentation-pino-0.46.1.tgz",
-      "integrity": "sha512-HB8gD/9CNAKlTV+mdZehnFC4tLUtQ7e+729oGq88e4WipxzZxmMYuRwZ2vzOA9/APtq+MRkERJ9PcoDqSIjZ+g==",
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-pino/-/instrumentation-pino-0.48.0.tgz",
+      "integrity": "sha512-+X+GTaXFuExrmQ3XS1HH8E+4KkKQ1HPzjNGnckuW/SQVOxRGeZMwJu1s60lx4eLpQuXXRh9nJaCAqMi/As347w==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/api-logs": "^0.57.1",
-        "@opentelemetry/core": "^1.25.0",
-        "@opentelemetry/instrumentation": "^0.57.1"
+        "@opentelemetry/api-logs": "^0.201.0",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-redis": {
-      "version": "0.46.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-redis/-/instrumentation-redis-0.46.1.tgz",
-      "integrity": "sha512-AN7OvlGlXmlvsgbLHs6dS1bggp6Fcki+GxgYZdSrb/DB692TyfjR7sVILaCe0crnP66aJuXsg9cge3hptHs9UA==",
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-redis/-/instrumentation-redis-0.48.0.tgz",
+      "integrity": "sha512-bp82CqAcBNk0+nneAX2L+wbCKiNHTnTEJlppOEjxESIR8AocSKO7gnWpotTh5Bki2UULUn62MBXJmRnIzj0ikw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
-        "@opentelemetry/redis-common": "^0.36.2",
+        "@opentelemetry/instrumentation": "^0.201.0",
+        "@opentelemetry/redis-common": "^0.37.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-redis-4": {
-      "version": "0.46.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-redis-4/-/instrumentation-redis-4-0.46.1.tgz",
-      "integrity": "sha512-UMqleEoabYMsWoTkqyt9WAzXwZ4BlFZHO40wr3d5ZvtjKCHlD4YXLm+6OLCeIi/HkX7EXvQaz8gtAwkwwSEvcQ==",
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-redis-4/-/instrumentation-redis-4-0.48.0.tgz",
+      "integrity": "sha512-aHZGrVwOsCM5u2PQdK1/PJuIWjGjYhOKEqqaPg3Mere2C6brwp+ih1bjcGyMRBS+7KNn5OSPcsFWpcW17Bfotw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
-        "@opentelemetry/redis-common": "^0.36.2",
+        "@opentelemetry/instrumentation": "^0.201.0",
+        "@opentelemetry/redis-common": "^0.37.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-restify": {
-      "version": "0.45.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-restify/-/instrumentation-restify-0.45.1.tgz",
-      "integrity": "sha512-Zd6Go9iEa+0zcoA2vDka9r/plYKaT3BhD3ESIy4JNIzFWXeQBGbH3zZxQIsz0jbNTMEtonlymU7eTLeaGWiApA==",
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-restify/-/instrumentation-restify-0.47.0.tgz",
+      "integrity": "sha512-A1VixeXnRAQQfWidjnNqOwqGp1K5/r6fIyCdL+1Yvde11HiruMQOf6B71D7wWJHRtNKpLhq3o8JzeNGJoBEMpA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-router": {
-      "version": "0.44.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-router/-/instrumentation-router-0.44.1.tgz",
-      "integrity": "sha512-l4T/S7ByjpY5TCUPeDe1GPns02/5BpR0jroSMexyH3ZnXJt9PtYqx1IKAlOjaFEGEOQF2tGDsMi4PY5l+fSniQ==",
+      "version": "0.46.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-router/-/instrumentation-router-0.46.0.tgz",
+      "integrity": "sha512-p98dJcw0reSyfkhRwzx8HrhyjcKmyguIE0KCLcxBnvQFnPL7EfUR2up2M9ggceFiZO5GUo1gk+r/mP+B9VBsQw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/@opentelemetry/instrumentation-runtime-node": {
+      "version": "0.15.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-runtime-node/-/instrumentation-runtime-node-0.15.0.tgz",
+      "integrity": "sha512-K3aPMYImALNsovPUjlIHctS2oH1YESlIAQMgiHXvcUxxz6+d66pPE1a4IoGP19iFOmRDMjshgHR/0DXMOEvZKg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.201.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-socket.io": {
-      "version": "0.46.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-socket.io/-/instrumentation-socket.io-0.46.1.tgz",
-      "integrity": "sha512-9AsCVUAHOqvfe2RM/2I0DsDnx2ihw1d5jIN4+Bly1YPFTJIbk4+bXjAkr9+X6PUfhiV5urQHZkiYYPU1Q4yzPA==",
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-socket.io/-/instrumentation-socket.io-0.48.0.tgz",
+      "integrity": "sha512-bVFiRvQnAW9hT+8FZVuhhybAvopAShLGm6LYz8raNZokxEw2FzGDVXONWaAM5D2/RbCbMl7R+PLN//3SEU/k0g==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-tedious": {
-      "version": "0.18.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-tedious/-/instrumentation-tedious-0.18.1.tgz",
-      "integrity": "sha512-5Cuy/nj0HBaH+ZJ4leuD7RjgvA844aY2WW+B5uLcWtxGjRZl3MNLuxnNg5DYWZNPO+NafSSnra0q49KWAHsKBg==",
+      "version": "0.20.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-tedious/-/instrumentation-tedious-0.20.0.tgz",
+      "integrity": "sha512-8OqIj554Rh8sll9myfDaFD1cYY8XKpxK3SMzCTZGc4BqS61gU0kd7UEydZeplrkQHDgySP4nvtFfkQCaZyTS4Q==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/instrumentation": "^0.57.1",
+        "@opentelemetry/instrumentation": "^0.201.0",
         "@opentelemetry/semantic-conventions": "^1.27.0",
         "@types/tedious": "^4.0.14"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-undici": {
-      "version": "0.10.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-undici/-/instrumentation-undici-0.10.1.tgz",
-      "integrity": "sha512-rkOGikPEyRpMCmNu9AQuV5dtRlDmJp2dK5sw8roVshAGoB6hH/3QjDtRhdwd75SsJwgynWUNRUYe0wAkTo16tQ==",
+      "version": "0.12.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-undici/-/instrumentation-undici-0.12.0.tgz",
+      "integrity": "sha512-SLqTWPWWwqSZVYZw3a9sdcNXsahJfimvDpYaoDd6ryvQGDlOrHVKr56gL5qD3XDVa67DmV5ZQrxRrnYUdlp3BQ==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.8.0",
-        "@opentelemetry/instrumentation": "^0.57.1"
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.201.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.7.0"
       }
     },
     "node_modules/@opentelemetry/instrumentation-winston": {
-      "version": "0.44.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-winston/-/instrumentation-winston-0.44.1.tgz",
-      "integrity": "sha512-iexblTsT3fP0hHUz/M1mWr+Ylg3bsYN2En/jvKXZtboW3Qkvt17HrQJYTF9leVIkXAfN97QxAcTE99YGbQW7vQ==",
+      "version": "0.46.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-winston/-/instrumentation-winston-0.46.0.tgz",
+      "integrity": "sha512-/nvmsLSON9Ki8C32kOMAkzsCpFfpjI2Fvr51uAY8/8bwG258MUUN8fCbAOMaiaPEKiB807wsE/aym83LYiB0ng==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/api-logs": "^0.57.1",
-        "@opentelemetry/instrumentation": "^0.57.1"
+        "@opentelemetry/api-logs": "^0.201.0",
+        "@opentelemetry/instrumentation": "^0.201.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/otlp-exporter-base": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-exporter-base/-/otlp-exporter-base-0.57.2.tgz",
-      "integrity": "sha512-XdxEzL23Urhidyebg5E6jZoaiW5ygP/mRjxLHixogbqwDy2Faduzb5N0o/Oi+XTIJu+iyxXdVORjXax+Qgfxag==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-exporter-base/-/otlp-exporter-base-0.201.1.tgz",
+      "integrity": "sha512-FiS/mIWmZXyRxYGyXPHY+I/4+XrYVTD7Fz/zwOHkVPQsA1JTakAOP9fAi6trXMio0dIpzvQujLNiBqGM7ExrQw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-transformer": "0.57.2"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-transformer": "0.201.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/otlp-grpc-exporter-base": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-grpc-exporter-base/-/otlp-grpc-exporter-base-0.57.2.tgz",
-      "integrity": "sha512-USn173KTWy0saqqRB5yU9xUZ2xdgb1Rdu5IosJnm9aV4hMTuFFRTUsQxbgc24QxpCHeoKzzCSnS/JzdV0oM2iQ==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-grpc-exporter-base/-/otlp-grpc-exporter-base-0.201.1.tgz",
+      "integrity": "sha512-Y0h9hiMvNtUuXUMkYNAt81hxnFuOHHSeu/RC+pXcHe7S6ac0ROlcjdabBKmYSadJxRrP4YfLahLRuNkVtZow4w==",
       "license": "Apache-2.0",
       "dependencies": {
         "@grpc/grpc-js": "^1.7.1",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/otlp-exporter-base": "0.57.2",
-        "@opentelemetry/otlp-transformer": "0.57.2"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.201.1",
+        "@opentelemetry/otlp-transformer": "0.201.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/otlp-transformer": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-transformer/-/otlp-transformer-0.57.2.tgz",
-      "integrity": "sha512-48IIRj49gbQVK52jYsw70+Jv+JbahT8BqT2Th7C4H7RCM9d0gZ5sgNPoMpWldmfjvIsSgiGJtjfk9MeZvjhoig==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-transformer/-/otlp-transformer-0.201.1.tgz",
+      "integrity": "sha512-+q/8Yuhtu9QxCcjEAXEO8fXLjlSnrnVwfzi9jiWaMAppQp69MoagHHomQj02V2WnGjvBod5ajgkbK4IoWab50A==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-logs": "0.57.2",
-        "@opentelemetry/sdk-metrics": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1",
+        "@opentelemetry/api-logs": "0.201.1",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-logs": "0.201.1",
+        "@opentelemetry/sdk-metrics": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1",
         "protobufjs": "^7.3.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.3.0"
       }
     },
     "node_modules/@opentelemetry/propagation-utils": {
-      "version": "0.30.16",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/propagation-utils/-/propagation-utils-0.30.16.tgz",
-      "integrity": "sha512-ZVQ3Z/PQ+2GQlrBfbMMMT0U7MzvYZLCPP800+ooyaBqm4hMvuQHfP028gB9/db0mwkmyEAMad9houukUVxhwcw==",
+      "version": "0.31.2",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/propagation-utils/-/propagation-utils-0.31.2.tgz",
+      "integrity": "sha512-FlJzdZ0cQY8qqOsJ/A+L/t05LvZtnsMq6vbamunVMYRi9TAy+xq37t+nT/dx3dKJ/2k409jDj9eA0Yhj9RtTug==",
       "license": "Apache-2.0",
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.0.0"
       }
     },
     "node_modules/@opentelemetry/propagator-b3": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/propagator-b3/-/propagator-b3-1.30.1.tgz",
-      "integrity": "sha512-oATwWWDIJzybAZ4pO76ATN5N6FFbOA1otibAVlS8v90B4S1wClnhRUk7K+2CHAwN1JKYuj4jh/lpCEG5BAqFuQ==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/propagator-b3/-/propagator-b3-2.0.1.tgz",
+      "integrity": "sha512-Hc09CaQ8Tf5AGLmf449H726uRoBNGPBL4bjr7AnnUpzWMvhdn61F78z9qb6IqB737TffBsokGAK1XykFEZ1igw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1"
+        "@opentelemetry/core": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": ">=1.0.0 <1.10.0"
       }
     },
     "node_modules/@opentelemetry/propagator-jaeger": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/propagator-jaeger/-/propagator-jaeger-1.30.1.tgz",
-      "integrity": "sha512-Pj/BfnYEKIOImirH76M4hDaBSx6HyZ2CXUqk+Kj02m6BB80c/yo4BdWkn/1gDFfU+YPY+bPR2U0DKBfdxCKwmg==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/propagator-jaeger/-/propagator-jaeger-2.0.1.tgz",
+      "integrity": "sha512-7PMdPBmGVH2eQNb/AtSJizQNgeNTfh6jQFqys6lfhd6P4r+m/nTh3gKPPpaCXVdRQ+z93vfKk+4UGty390283w==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1"
+        "@opentelemetry/core": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": ">=1.0.0 <1.10.0"
       }
     },
     "node_modules/@opentelemetry/redis-common": {
-      "version": "0.36.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/redis-common/-/redis-common-0.36.2.tgz",
-      "integrity": "sha512-faYX1N0gpLhej/6nyp6bgRjzAKXn5GOEMYY7YhciSfCoITAktLUtQ36d24QEWNA1/WA1y6qQunCe0OhHRkVl9g==",
+      "version": "0.37.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/redis-common/-/redis-common-0.37.0.tgz",
+      "integrity": "sha512-tJwgE6jt32bLs/9J6jhQRKU2EZnsD8qaO13aoFyXwF6s4LhpT7YFHf3Z03MqdILk6BA2BFUhoyh7k9fj9i032A==",
       "license": "Apache-2.0",
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       }
     },
     "node_modules/@opentelemetry/resource-detector-alibaba-cloud": {
-      "version": "0.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-alibaba-cloud/-/resource-detector-alibaba-cloud-0.30.1.tgz",
-      "integrity": "sha512-9l0FVP3F4+Z6ax27vMzkmhZdNtxAbDqEfy7rduzya3xFLaRiJSvOpw6cru6Edl5LwO+WvgNui+VzHa9ViE8wCg==",
+      "version": "0.31.2",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-alibaba-cloud/-/resource-detector-alibaba-cloud-0.31.2.tgz",
+      "integrity": "sha512-Itp6duMXkAIQzmDHIf1kc6Llj/fa0BxilaELp0K6Fp9y+b0ex9LksNAQfTDFPHNine7tFoXauvvHbJFXIB6mqw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.26.0",
-        "@opentelemetry/resources": "^1.10.0",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/resources": "^2.0.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.0.0"
       }
     },
     "node_modules/@opentelemetry/resource-detector-aws": {
-      "version": "1.12.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-aws/-/resource-detector-aws-1.12.0.tgz",
-      "integrity": "sha512-Cvi7ckOqiiuWlHBdA1IjS0ufr3sltex2Uws2RK6loVp4gzIJyOijsddAI6IZ5kiO8h/LgCWe8gxPmwkTKImd+Q==",
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-aws/-/resource-detector-aws-2.2.0.tgz",
+      "integrity": "sha512-6k7//RWAv4U1PeZhv0Too0Sv7sp7/A6s6g9h5ZYauPcroh2t4gOmkQSspSLYCynn34YZwn3FGbuaMwTDjHEJig==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.0.0",
-        "@opentelemetry/resources": "^1.10.0",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/resources": "^2.0.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.0.0"
       }
     },
     "node_modules/@opentelemetry/resource-detector-azure": {
-      "version": "0.6.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-azure/-/resource-detector-azure-0.6.1.tgz",
-      "integrity": "sha512-Djr31QCExVfWViaf9cGJnH+bUInD72p0GEfgDGgjCAztyvyji6WJvKjs6qmkpPN+Ig6KLk0ho2VgzT5Kdl4L2Q==",
+      "version": "0.8.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-azure/-/resource-detector-azure-0.8.0.tgz",
+      "integrity": "sha512-YBsJQrt0NGT66BgdVhhTkv7/oe/rTflX/rKteptVK6HNo7z8wbeAbB4SnSNJFfF+v3XrP/ruiTxKnNzoh/ampw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.25.1",
-        "@opentelemetry/resources": "^1.10.1",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/resources": "^2.0.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.0.0"
       }
     },
     "node_modules/@opentelemetry/resource-detector-container": {
-      "version": "0.6.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-container/-/resource-detector-container-0.6.1.tgz",
-      "integrity": "sha512-o4sLzx149DQXDmVa8pgjBDEEKOj9SuQnkSLbjUVOpQNnn10v0WNR6wLwh30mFsK26xOJ6SpqZBGKZiT7i5MjlA==",
+      "version": "0.7.2",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-container/-/resource-detector-container-0.7.2.tgz",
+      "integrity": "sha512-St3Krrbpvq7k0UoUNlm7Z4Xqf9HdS9R5yPslwl/WPaZpj/Bf/54WZTPmNQat+93Ey6PTX0ISKg26DfcjPemUhg==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.26.0",
-        "@opentelemetry/resources": "^1.10.0",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/resources": "^2.0.0",
         "@opentelemetry/semantic-conventions": "^1.27.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.0.0"
       }
     },
     "node_modules/@opentelemetry/resource-detector-gcp": {
-      "version": "0.33.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-gcp/-/resource-detector-gcp-0.33.1.tgz",
-      "integrity": "sha512-/aZJXI1rU6Eus04ih2vU0hxXAibXXMzH1WlDZ8bXcTJmhwmTY8cP392+6l7cWeMnTQOibBUz8UKV3nhcCBAefw==",
+      "version": "0.35.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-gcp/-/resource-detector-gcp-0.35.0.tgz",
+      "integrity": "sha512-JYkyOUc7TZAyHy37N2aPAwFvRdET0+E5qIRjmQLPop9LQi4+N0sKf65g4xCwuY/0M721T/424G3zneJjxyiooA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.0.0",
-        "@opentelemetry/resources": "^1.10.0",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/resources": "^2.0.0",
         "@opentelemetry/semantic-conventions": "^1.27.0",
         "gcp-metadata": "^6.0.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.0.0"
       }
     },
     "node_modules/@opentelemetry/resources": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/resources/-/resources-1.30.1.tgz",
-      "integrity": "sha512-5UxZqiAgLYGFjS4s9qm5mBVo433u+dSPUFWVWXmLAD4wB65oMCoXaJP1KJa9DIYYMeHu3z4BZcStG3LC593cWA==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/resources/-/resources-2.0.1.tgz",
+      "integrity": "sha512-dZOB3R6zvBwDKnHDTB4X1xtMArB/d324VsbiPkX/Yu0Q8T2xceRthoIVFhJdvgVM2QhGVUyX9tzwiNxGtoBJUw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/semantic-conventions": "1.28.0"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/semantic-conventions": "^1.29.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
-        "@opentelemetry/api": ">=1.0.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/resources/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
+        "@opentelemetry/api": ">=1.3.0 <1.10.0"
       }
     },
     "node_modules/@opentelemetry/sdk-logs": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-logs/-/sdk-logs-0.57.2.tgz",
-      "integrity": "sha512-TXFHJ5c+BKggWbdEQ/inpgIzEmS2BGQowLE9UhsMd7YYlUfBQJ4uax0VF/B5NYigdM/75OoJGhAV3upEhK+3gg==",
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-logs/-/sdk-logs-0.201.1.tgz",
+      "integrity": "sha512-Ug8gtpssUNUnfpotB9ZhnSsPSGDu+7LngTMgKl31mmVJwLAKyl6jC8diZrMcGkSgBh0o5dbg9puvLyR25buZfw==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1"
+        "@opentelemetry/api-logs": "0.201.1",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/resources": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": ">=1.4.0 <1.10.0"
       }
     },
     "node_modules/@opentelemetry/sdk-metrics": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-metrics/-/sdk-metrics-1.30.1.tgz",
-      "integrity": "sha512-q9zcZ0Okl8jRgmy7eNW3Ku1XSgg3sDLa5evHZpCwjspw7E8Is4K/haRPDJrBcX3YSn/Y7gUvFnByNYEKQNbNog==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-metrics/-/sdk-metrics-2.0.1.tgz",
+      "integrity": "sha512-wf8OaJoSnujMAHWR3g+/hGvNcsC16rf9s1So4JlMiFaFHiE4HpIA3oUh+uWZQ7CNuK8gVW/pQSkgoa5HkkOl0g==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/resources": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
-        "@opentelemetry/api": ">=1.3.0 <1.10.0"
+        "@opentelemetry/api": ">=1.9.0 <1.10.0"
       }
     },
     "node_modules/@opentelemetry/sdk-node": {
-      "version": "0.57.2",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-node/-/sdk-node-0.57.2.tgz",
-      "integrity": "sha512-8BaeqZyN5sTuPBtAoY+UtKwXBdqyuRKmekN5bFzAO40CgbGzAxfTpiL3PBerT7rhZ7p2nBdq7FaMv/tBQgHE4A==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "@opentelemetry/api-logs": "0.57.2",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/exporter-logs-otlp-grpc": "0.57.2",
-        "@opentelemetry/exporter-logs-otlp-http": "0.57.2",
-        "@opentelemetry/exporter-logs-otlp-proto": "0.57.2",
-        "@opentelemetry/exporter-metrics-otlp-grpc": "0.57.2",
-        "@opentelemetry/exporter-metrics-otlp-http": "0.57.2",
-        "@opentelemetry/exporter-metrics-otlp-proto": "0.57.2",
-        "@opentelemetry/exporter-prometheus": "0.57.2",
-        "@opentelemetry/exporter-trace-otlp-grpc": "0.57.2",
-        "@opentelemetry/exporter-trace-otlp-http": "0.57.2",
-        "@opentelemetry/exporter-trace-otlp-proto": "0.57.2",
-        "@opentelemetry/exporter-zipkin": "1.30.1",
-        "@opentelemetry/instrumentation": "0.57.2",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/sdk-logs": "0.57.2",
-        "@opentelemetry/sdk-metrics": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1",
-        "@opentelemetry/sdk-trace-node": "1.30.1",
-        "@opentelemetry/semantic-conventions": "1.28.0"
-      },
-      "engines": {
-        "node": ">=14"
+      "version": "0.201.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-node/-/sdk-node-0.201.1.tgz",
+      "integrity": "sha512-OdkYe6ZEFbPq+YXhebuiYpPECIBrrKgFJoAQVATllKlB5RDQDTE4J84/8LwGfQqSxBiSK2u1aSaFpzgBVoBrKA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api-logs": "0.201.1",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/exporter-logs-otlp-grpc": "0.201.1",
+        "@opentelemetry/exporter-logs-otlp-http": "0.201.1",
+        "@opentelemetry/exporter-logs-otlp-proto": "0.201.1",
+        "@opentelemetry/exporter-metrics-otlp-grpc": "0.201.1",
+        "@opentelemetry/exporter-metrics-otlp-http": "0.201.1",
+        "@opentelemetry/exporter-metrics-otlp-proto": "0.201.1",
+        "@opentelemetry/exporter-prometheus": "0.201.1",
+        "@opentelemetry/exporter-trace-otlp-grpc": "0.201.1",
+        "@opentelemetry/exporter-trace-otlp-http": "0.201.1",
+        "@opentelemetry/exporter-trace-otlp-proto": "0.201.1",
+        "@opentelemetry/exporter-zipkin": "2.0.1",
+        "@opentelemetry/instrumentation": "0.201.1",
+        "@opentelemetry/propagator-b3": "2.0.1",
+        "@opentelemetry/propagator-jaeger": "2.0.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-logs": "0.201.1",
+        "@opentelemetry/sdk-metrics": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1",
+        "@opentelemetry/sdk-trace-node": "2.0.1",
+        "@opentelemetry/semantic-conventions": "^1.29.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": ">=1.3.0 <1.10.0"
       }
     },
-    "node_modules/@opentelemetry/sdk-node/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
-      }
-    },
     "node_modules/@opentelemetry/sdk-trace-base": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-trace-base/-/sdk-trace-base-1.30.1.tgz",
-      "integrity": "sha512-jVPgBbH1gCy2Lb7X0AVQ8XAfgg0pJ4nvl8/IiQA6nxOsPvS+0zMJaFSs2ltXe0J6C8dqjcnpyqINDJmU30+uOg==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-trace-base/-/sdk-trace-base-2.0.1.tgz",
+      "integrity": "sha512-xYLlvk/xdScGx1aEqvxLwf6sXQLXCjk3/1SQT9X9AoN5rXRhkdvIFShuNNmtTEPRBqcsMbS4p/gJLNI2wXaDuQ==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/resources": "1.30.1",
-        "@opentelemetry/semantic-conventions": "1.28.0"
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/semantic-conventions": "^1.29.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
-        "@opentelemetry/api": ">=1.0.0 <1.10.0"
-      }
-    },
-    "node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.28.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.28.0.tgz",
-      "integrity": "sha512-lp4qAiMTD4sNWW4DbKLBkfiMZ4jbAboJIGOQr5DvciMRI494OapieI9qiODpOt0XBr1LjIDy1xAGAnVs5supTA==",
-      "license": "Apache-2.0",
-      "engines": {
-        "node": ">=14"
+        "@opentelemetry/api": ">=1.3.0 <1.10.0"
       }
     },
     "node_modules/@opentelemetry/sdk-trace-node": {
-      "version": "1.30.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-trace-node/-/sdk-trace-node-1.30.1.tgz",
-      "integrity": "sha512-cBjYOINt1JxXdpw1e5MlHmFRc5fgj4GW/86vsKFxJCJ8AL4PdVtYH41gWwl4qd4uQjqEL1oJVrXkSy5cnduAnQ==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-trace-node/-/sdk-trace-node-2.0.1.tgz",
+      "integrity": "sha512-UhdbPF19pMpBtCWYP5lHbTogLWx9N0EBxtdagvkn5YtsAnCBZzL7SjktG+ZmupRgifsHMjwUaCCaVmqGfSADmA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/context-async-hooks": "1.30.1",
-        "@opentelemetry/core": "1.30.1",
-        "@opentelemetry/propagator-b3": "1.30.1",
-        "@opentelemetry/propagator-jaeger": "1.30.1",
-        "@opentelemetry/sdk-trace-base": "1.30.1",
-        "semver": "^7.5.2"
+        "@opentelemetry/context-async-hooks": "2.0.1",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": ">=1.0.0 <1.10.0"
       }
     },
     "node_modules/@opentelemetry/semantic-conventions": {
-      "version": "1.32.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.32.0.tgz",
-      "integrity": "sha512-s0OpmpQFSfMrmedAn9Lhg4KWJELHCU6uU9dtIJ28N8UGhf9Y55im5X8fEzwhwDwiSqN+ZPSNrDJF7ivf/AuRPQ==",
+      "version": "1.34.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/semantic-conventions/-/semantic-conventions-1.34.0.tgz",
+      "integrity": "sha512-aKcOkyrorBGlajjRdVoJWHTxfxO1vCNHLJVlSDaRHDIdjU+pX8IYQPvPDkYiujKLbRnWU+1TBwEt0QRgSm4SGA==",
       "license": "Apache-2.0",
       "engines": {
         "node": ">=14"
       }
     },
     "node_modules/@opentelemetry/sql-common": {
-      "version": "0.40.1",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/sql-common/-/sql-common-0.40.1.tgz",
-      "integrity": "sha512-nSDlnHSqzC3pXn/wZEZVLuAuJ1MYMXPBwtv2qAbCa3847SaHItdE7SzUq/Jtb0KZmh1zfAbNi3AAMjztTT4Ugg==",
+      "version": "0.41.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/sql-common/-/sql-common-0.41.0.tgz",
+      "integrity": "sha512-pmzXctVbEERbqSfiAgdes9Y63xjoOyXcD7B6IXBkVb+vbM7M9U98mn33nGXxPf4dfYR0M+vhcKRZmbSJ7HfqFA==",
       "license": "Apache-2.0",
       "dependencies": {
-        "@opentelemetry/core": "^1.1.0"
+        "@opentelemetry/core": "^2.0.0"
       },
       "engines": {
-        "node": ">=14"
+        "node": "^18.19.0 || >=20.6.0"
       },
       "peerDependencies": {
         "@opentelemetry/api": "^1.1.0"
@@ -9679,9 +9246,9 @@
       }
     },
     "node_modules/@redis/client": {
-      "version": "1.6.0",
-      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.6.0.tgz",
-      "integrity": "sha512-aR0uffYI700OEEH4gYnitAnv3vzVGXCFvYfdpu/CJKvk4pHfLPEy/JSZyrpQ+15WhXe1yJRXLtfQ84s4mEXnPg==",
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/@redis/client/-/client-1.6.1.tgz",
+      "integrity": "sha512-/KCsg3xSlR+nCK8/8ZYSknYxvXHwubJrU82F3Lm1Fp6789VQ0/3RJKfsmRXjqfaTA++23CvC3hqmqe/2GEt6Kw==",
       "license": "MIT",
       "dependencies": {
         "cluster-key-slot": "1.1.2",
@@ -9752,9 +9319,9 @@
       }
     },
     "node_modules/@rollup/plugin-commonjs": {
-      "version": "28.0.3",
-      "resolved": "https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-28.0.3.tgz",
-      "integrity": "sha512-pyltgilam1QPdn+Zd9gaCfOLcnjMEJ9gV+bTw6/r73INdvzf1ah9zLIJBm+kW7R6IUFIQ1YO+VqZtYxZNWFPEQ==",
+      "version": "28.0.6",
+      "resolved": "https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-28.0.6.tgz",
+      "integrity": "sha512-XSQB1K7FUU5QP+3lOQmVCE3I0FcbbNvmNT4VJSj93iUjayaARrTQeoRdiYQoftAJBLrR9t2agwAd3ekaTgHNlw==",
       "license": "MIT",
       "dependencies": {
         "@rollup/pluginutils": "^5.0.1",
@@ -9778,9 +9345,9 @@
       }
     },
     "node_modules/@rollup/plugin-commonjs/node_modules/fdir": {
-      "version": "6.4.4",
-      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.4.tgz",
-      "integrity": "sha512-1NZP+GK4GfuAv3PqKvxQRDMjdSRZjnkq7KfhlNrCNNlZ0ygQFpebfrnfnq/W7fpUnAv9aGWmY1zKx7FYL3gwhg==",
+      "version": "6.4.6",
+      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
+      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
       "license": "MIT",
       "peerDependencies": {
         "picomatch": "^3 || ^4"
@@ -9865,9 +9432,9 @@
       }
     },
     "node_modules/@rollup/pluginutils": {
-      "version": "5.1.4",
-      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-5.1.4.tgz",
-      "integrity": "sha512-USm05zrsFxYLPdWWq+K3STlWiT/3ELn3RcV5hJMghpeAIhxfsUIg6mt12CBJBInWMV4VneoV7SfGv8xIwo2qNQ==",
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-5.2.0.tgz",
+      "integrity": "sha512-qWJ2ZTbmumwiLFomfzTyt5Kng4hwPi9rwCYN4SHb6eaRU1KNO4ccxINHr/VhH4GgPlt1XfSTLX2LBTme8ne4Zw==",
       "license": "MIT",
       "dependencies": {
         "@types/estree": "^1.0.0",
@@ -9899,9 +9466,9 @@
       }
     },
     "node_modules/@rollup/rollup-android-arm-eabi": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.40.0.tgz",
-      "integrity": "sha512-+Fbls/diZ0RDerhE8kyC6hjADCXA1K4yVNlH0EYfd2XjyH0UGgzaQ8MlT0pCXAThfxv3QUAczHaL+qSv1E4/Cg==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.44.1.tgz",
+      "integrity": "sha512-JAcBr1+fgqx20m7Fwe1DxPUl/hPkee6jA6Pl7n1v2EFiktAHenTaXl5aIFjUIEsfn9w3HE4gK1lEgNGMzBDs1w==",
       "cpu": [
         "arm"
       ],
@@ -9912,9 +9479,9 @@
       ]
     },
     "node_modules/@rollup/rollup-android-arm64": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.40.0.tgz",
-      "integrity": "sha512-PPA6aEEsTPRz+/4xxAmaoWDqh67N7wFbgFUJGMnanCFs0TV99M0M8QhhaSCks+n6EbQoFvLQgYOGXxlMGQe/6w==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.44.1.tgz",
+      "integrity": "sha512-RurZetXqTu4p+G0ChbnkwBuAtwAbIwJkycw1n6GvlGlBuS4u5qlr5opix8cBAYFJgaY05TWtM+LaoFggUmbZEQ==",
       "cpu": [
         "arm64"
       ],
@@ -9925,9 +9492,9 @@
       ]
     },
     "node_modules/@rollup/rollup-darwin-arm64": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.40.0.tgz",
-      "integrity": "sha512-GwYOcOakYHdfnjjKwqpTGgn5a6cUX7+Ra2HeNj/GdXvO2VJOOXCiYYlRFU4CubFM67EhbmzLOmACKEfvp3J1kQ==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.44.1.tgz",
+      "integrity": "sha512-fM/xPesi7g2M7chk37LOnmnSTHLG/v2ggWqKj3CCA1rMA4mm5KVBT1fNoswbo1JhPuNNZrVwpTvlCVggv8A2zg==",
       "cpu": [
         "arm64"
       ],
@@ -9938,9 +9505,9 @@
       ]
     },
     "node_modules/@rollup/rollup-darwin-x64": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.40.0.tgz",
-      "integrity": "sha512-CoLEGJ+2eheqD9KBSxmma6ld01czS52Iw0e2qMZNpPDlf7Z9mj8xmMemxEucinev4LgHalDPczMyxzbq+Q+EtA==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.44.1.tgz",
+      "integrity": "sha512-gDnWk57urJrkrHQ2WVx9TSVTH7lSlU7E3AFqiko+bgjlh78aJ88/3nycMax52VIVjIm3ObXnDL2H00e/xzoipw==",
       "cpu": [
         "x64"
       ],
@@ -9951,9 +9518,9 @@
       ]
     },
     "node_modules/@rollup/rollup-freebsd-arm64": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.40.0.tgz",
-      "integrity": "sha512-r7yGiS4HN/kibvESzmrOB/PxKMhPTlz+FcGvoUIKYoTyGd5toHp48g1uZy1o1xQvybwwpqpe010JrcGG2s5nkg==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.44.1.tgz",
+      "integrity": "sha512-wnFQmJ/zPThM5zEGcnDcCJeYJgtSLjh1d//WuHzhf6zT3Md1BvvhJnWoy+HECKu2bMxaIcfWiu3bJgx6z4g2XA==",
       "cpu": [
         "arm64"
       ],
@@ -9964,9 +9531,9 @@
       ]
     },
     "node_modules/@rollup/rollup-freebsd-x64": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.40.0.tgz",
-      "integrity": "sha512-mVDxzlf0oLzV3oZOr0SMJ0lSDd3xC4CmnWJ8Val8isp9jRGl5Dq//LLDSPFrasS7pSm6m5xAcKaw3sHXhBjoRw==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.44.1.tgz",
+      "integrity": "sha512-uBmIxoJ4493YATvU2c0upGz87f99e3wop7TJgOA/bXMFd2SvKCI7xkxY/5k50bv7J6dw1SXT4MQBQSLn8Bb/Uw==",
       "cpu": [
         "x64"
       ],
@@ -9977,9 +9544,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.40.0.tgz",
-      "integrity": "sha512-y/qUMOpJxBMy8xCXD++jeu8t7kzjlOCkoxxajL58G62PJGBZVl/Gwpm7JK9+YvlB701rcQTzjUZ1JgUoPTnoQA==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.44.1.tgz",
+      "integrity": "sha512-n0edDmSHlXFhrlmTK7XBuwKlG5MbS7yleS1cQ9nn4kIeW+dJH+ExqNgQ0RrFRew8Y+0V/x6C5IjsHrJmiHtkxQ==",
       "cpu": [
         "arm"
       ],
@@ -9990,9 +9557,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm-musleabihf": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.40.0.tgz",
-      "integrity": "sha512-GoCsPibtVdJFPv/BOIvBKO/XmwZLwaNWdyD8TKlXuqp0veo2sHE+A/vpMQ5iSArRUz/uaoj4h5S6Pn0+PdhRjg==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.44.1.tgz",
+      "integrity": "sha512-8WVUPy3FtAsKSpyk21kV52HCxB+me6YkbkFHATzC2Yd3yuqHwy2lbFL4alJOLXKljoRw08Zk8/xEj89cLQ/4Nw==",
       "cpu": [
         "arm"
       ],
@@ -10003,9 +9570,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm64-gnu": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.40.0.tgz",
-      "integrity": "sha512-L5ZLphTjjAD9leJzSLI7rr8fNqJMlGDKlazW2tX4IUF9P7R5TMQPElpH82Q7eNIDQnQlAyiNVfRPfP2vM5Avvg==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.44.1.tgz",
+      "integrity": "sha512-yuktAOaeOgorWDeFJggjuCkMGeITfqvPgkIXhDqsfKX8J3jGyxdDZgBV/2kj/2DyPaLiX6bPdjJDTu9RB8lUPQ==",
       "cpu": [
         "arm64"
       ],
@@ -10016,9 +9583,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm64-musl": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.40.0.tgz",
-      "integrity": "sha512-ATZvCRGCDtv1Y4gpDIXsS+wfFeFuLwVxyUBSLawjgXK2tRE6fnsQEkE4csQQYWlBlsFztRzCnBvWVfcae/1qxQ==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.44.1.tgz",
+      "integrity": "sha512-W+GBM4ifET1Plw8pdVaecwUgxmiH23CfAUj32u8knq0JPFyK4weRy6H7ooxYFD19YxBulL0Ktsflg5XS7+7u9g==",
       "cpu": [
         "arm64"
       ],
@@ -10029,9 +9596,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.40.0.tgz",
-      "integrity": "sha512-wG9e2XtIhd++QugU5MD9i7OnpaVb08ji3P1y/hNbxrQ3sYEelKJOq1UJ5dXczeo6Hj2rfDEL5GdtkMSVLa/AOg==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.44.1.tgz",
+      "integrity": "sha512-1zqnUEMWp9WrGVuVak6jWTl4fEtrVKfZY7CvcBmUUpxAJ7WcSowPSAWIKa/0o5mBL/Ij50SIf9tuirGx63Ovew==",
       "cpu": [
         "loong64"
       ],
@@ -10042,9 +9609,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.40.0.tgz",
-      "integrity": "sha512-vgXfWmj0f3jAUvC7TZSU/m/cOE558ILWDzS7jBhiCAFpY2WEBn5jqgbqvmzlMjtp8KlLcBlXVD2mkTSEQE6Ixw==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.44.1.tgz",
+      "integrity": "sha512-Rl3JKaRu0LHIx7ExBAAnf0JcOQetQffaw34T8vLlg9b1IhzcBgaIdnvEbbsZq9uZp3uAH+JkHd20Nwn0h9zPjA==",
       "cpu": [
         "ppc64"
       ],
@@ -10055,9 +9622,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-riscv64-gnu": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.40.0.tgz",
-      "integrity": "sha512-uJkYTugqtPZBS3Z136arevt/FsKTF/J9dEMTX/cwR7lsAW4bShzI2R0pJVw+hcBTWF4dxVckYh72Hk3/hWNKvA==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.44.1.tgz",
+      "integrity": "sha512-j5akelU3snyL6K3N/iX7otLBIl347fGwmd95U5gS/7z6T4ftK288jKq3A5lcFKcx7wwzb5rgNvAg3ZbV4BqUSw==",
       "cpu": [
         "riscv64"
       ],
@@ -10068,9 +9635,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-riscv64-musl": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.40.0.tgz",
-      "integrity": "sha512-rKmSj6EXQRnhSkE22+WvrqOqRtk733x3p5sWpZilhmjnkHkpeCgWsFFo0dGnUGeA+OZjRl3+VYq+HyCOEuwcxQ==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.44.1.tgz",
+      "integrity": "sha512-ppn5llVGgrZw7yxbIm8TTvtj1EoPgYUAbfw0uDjIOzzoqlZlZrLJ/KuiE7uf5EpTpCTrNt1EdtzF0naMm0wGYg==",
       "cpu": [
         "riscv64"
       ],
@@ -10081,9 +9648,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-s390x-gnu": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.40.0.tgz",
-      "integrity": "sha512-SpnYlAfKPOoVsQqmTFJ0usx0z84bzGOS9anAC0AZ3rdSo3snecihbhFTlJZ8XMwzqAcodjFU4+/SM311dqE5Sw==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.44.1.tgz",
+      "integrity": "sha512-Hu6hEdix0oxtUma99jSP7xbvjkUM/ycke/AQQ4EC5g7jNRLLIwjcNwaUy95ZKBJJwg1ZowsclNnjYqzN4zwkAw==",
       "cpu": [
         "s390x"
       ],
@@ -10094,9 +9661,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-x64-gnu": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.40.0.tgz",
-      "integrity": "sha512-RcDGMtqF9EFN8i2RYN2W+64CdHruJ5rPqrlYw+cgM3uOVPSsnAQps7cpjXe9be/yDp8UC7VLoCoKC8J3Kn2FkQ==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.44.1.tgz",
+      "integrity": "sha512-EtnsrmZGomz9WxK1bR5079zee3+7a+AdFlghyd6VbAjgRJDbTANJ9dcPIPAi76uG05micpEL+gPGmAKYTschQw==",
       "cpu": [
         "x64"
       ],
@@ -10107,9 +9674,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-x64-musl": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.40.0.tgz",
-      "integrity": "sha512-HZvjpiUmSNx5zFgwtQAV1GaGazT2RWvqeDi0hV+AtC8unqqDSsaFjPxfsO6qPtKRRg25SisACWnJ37Yio8ttaw==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.44.1.tgz",
+      "integrity": "sha512-iAS4p+J1az6Usn0f8xhgL4PaU878KEtutP4hqw52I4IO6AGoyOkHCxcc4bqufv1tQLdDWFx8lR9YlwxKuv3/3g==",
       "cpu": [
         "x64"
       ],
@@ -10120,9 +9687,9 @@
       ]
     },
     "node_modules/@rollup/rollup-win32-arm64-msvc": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.40.0.tgz",
-      "integrity": "sha512-UtZQQI5k/b8d7d3i9AZmA/t+Q4tk3hOC0tMOMSq2GlMYOfxbesxG4mJSeDp0EHs30N9bsfwUvs3zF4v/RzOeTQ==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.44.1.tgz",
+      "integrity": "sha512-NtSJVKcXwcqozOl+FwI41OH3OApDyLk3kqTJgx8+gp6On9ZEt5mYhIsKNPGuaZr3p9T6NWPKGU/03Vw4CNU9qg==",
       "cpu": [
         "arm64"
       ],
@@ -10133,9 +9700,9 @@
       ]
     },
     "node_modules/@rollup/rollup-win32-ia32-msvc": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.40.0.tgz",
-      "integrity": "sha512-+m03kvI2f5syIqHXCZLPVYplP8pQch9JHyXKZ3AGMKlg8dCyr2PKHjwRLiW53LTrN/Nc3EqHOKxUxzoSPdKddA==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.44.1.tgz",
+      "integrity": "sha512-JYA3qvCOLXSsnTR3oiyGws1Dm0YTuxAAeaYGVlGpUsHqloPcFjPg+X0Fj2qODGLNwQOAcCiQmHub/V007kiH5A==",
       "cpu": [
         "ia32"
       ],
@@ -10146,9 +9713,9 @@
       ]
     },
     "node_modules/@rollup/rollup-win32-x64-msvc": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.40.0.tgz",
-      "integrity": "sha512-lpPE1cLfP5oPzVjKMx10pgBmKELQnFJXHgvtHCtuJWOv8MxqdEIMNtgHgBFf7Ea2/7EuVwa9fodWUfXAlXZLZQ==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.44.1.tgz",
+      "integrity": "sha512-J8o22LuF0kTe7m+8PvW9wk3/bRq5+mRo5Dqo6+vXb7otCm3TPhYOJqOaQtGU9YMWQSL3krMnoOxMr0+9E6F3Ug==",
       "cpu": [
         "x64"
       ],
@@ -10261,9 +9828,9 @@
       }
     },
     "node_modules/@sindresorhus/merge-streams": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/@sindresorhus/merge-streams/-/merge-streams-4.0.0.tgz",
-      "integrity": "sha512-tlqY9xq5ukxTUZBmoOp+m61cqwQD5pHJtFY3Mn8CA8ps6yghLH/Hw8UPdqg4OLmFW3IFlcXnQNmo/dh8HzXYIQ==",
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/@sindresorhus/merge-streams/-/merge-streams-2.3.0.tgz",
+      "integrity": "sha512-LtoMMhxAlorcGhmFYI+LhPgbPZCkgP6ra1YL604EeF6U98pLlQ3iWIGMdWSC+vWmPBWBNgmDBAhnAobLROJmwg==",
       "license": "MIT",
       "engines": {
         "node": ">=18"
@@ -10272,6 +9839,61 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/@sindresorhus/slugify": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/@sindresorhus/slugify/-/slugify-2.2.1.tgz",
+      "integrity": "sha512-MkngSCRZ8JdSOCHRaYd+D01XhvU3Hjy6MGl06zhOk614hp9EOAp5gIkBeQg7wtmxpitU6eAL4kdiRMcJa2dlrw==",
+      "license": "MIT",
+      "dependencies": {
+        "@sindresorhus/transliterate": "^1.0.0",
+        "escape-string-regexp": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@sindresorhus/slugify/node_modules/escape-string-regexp": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
+      "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@sindresorhus/transliterate": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/@sindresorhus/transliterate/-/transliterate-1.6.0.tgz",
+      "integrity": "sha512-doH1gimEu3A46VX6aVxpHTeHrytJAG6HgdxntYnCFiIFHEM/ZGpG8KiZGBChchjQmG0XFIBL552kBTjVcMZXwQ==",
+      "license": "MIT",
+      "dependencies": {
+        "escape-string-regexp": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@sindresorhus/transliterate/node_modules/escape-string-regexp": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
+      "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/@sinonjs/commons": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
@@ -11838,9 +11460,9 @@
       }
     },
     "node_modules/@types/estree": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.7.tgz",
-      "integrity": "sha512-w28IoSUCJpidD/TGviZwwMJckNESJZXFu7NBZ5YJ4mEUnNraUn9Pm8HSZm/jDF1pDWYKspWE7oVphigUPRakIQ==",
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
+      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
       "license": "MIT"
     },
     "node_modules/@types/estree-jsx": {
@@ -12111,6 +11733,15 @@
         "@types/node": "*"
       }
     },
+    "node_modules/@types/oracledb": {
+      "version": "6.5.2",
+      "resolved": "https://registry.npmjs.org/@types/oracledb/-/oracledb-6.5.2.tgz",
+      "integrity": "sha512-kK1eBS/Adeyis+3OlBDMeQQuasIDLUYXsi2T15ccNJ0iyUpQ4xDF7svFu3+bGVrI0CMBUclPciz+lsQR3JX3TQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
     "node_modules/@types/parse-json": {
       "version": "4.0.2",
       "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.2.tgz",
@@ -12609,12 +12240,12 @@
       ]
     },
     "node_modules/@upstash/redis": {
-      "version": "1.34.8",
-      "resolved": "https://registry.npmjs.org/@upstash/redis/-/redis-1.34.8.tgz",
-      "integrity": "sha512-eGJgOKc+2Uq4AdSM0lNx+WvFFhQeyhJ32SGNuSniLPg4lNb6m5h2AQ77qL+TgWiMZO8HCQ82Zsc/RlVBevCWTg==",
+      "version": "1.35.0",
+      "resolved": "https://registry.npmjs.org/@upstash/redis/-/redis-1.35.0.tgz",
+      "integrity": "sha512-WUm0Jz1xN4DBDGeJIi2Y0kVsolWRB2tsVds4SExaiLg4wBdHFMB+8IfZtBWr+BP0FvhuBr5G1/VLrJ9xzIWHsg==",
       "license": "MIT",
       "dependencies": {
-        "crypto-js": "^4.2.0"
+        "uncrypto": "^0.1.3"
       }
     },
     "node_modules/@webassemblyjs/ast": {
@@ -12991,15 +12622,15 @@
       }
     },
     "node_modules/ai": {
-      "version": "4.3.9",
-      "resolved": "https://registry.npmjs.org/ai/-/ai-4.3.9.tgz",
-      "integrity": "sha512-P2RpV65sWIPdUlA4f1pcJ11pB0N1YmqPVLEmC4j8WuBwKY0L3q9vGhYPh0Iv+spKHKyn0wUbMfas+7Z6nTfS0g==",
+      "version": "4.3.16",
+      "resolved": "https://registry.npmjs.org/ai/-/ai-4.3.16.tgz",
+      "integrity": "sha512-KUDwlThJ5tr2Vw0A1ZkbDKNME3wzWhuVfAOwIvFUzl1TPVDFAXDFTXio3p+jaKneB+dKNCvFFlolYmmgHttG1g==",
       "license": "Apache-2.0",
       "dependencies": {
         "@ai-sdk/provider": "1.1.3",
-        "@ai-sdk/provider-utils": "2.2.7",
-        "@ai-sdk/react": "1.2.9",
-        "@ai-sdk/ui-utils": "1.2.8",
+        "@ai-sdk/provider-utils": "2.2.8",
+        "@ai-sdk/react": "1.2.12",
+        "@ai-sdk/ui-utils": "1.2.11",
         "@opentelemetry/api": "1.9.0",
         "jsondiffpatch": "0.6.0"
       },
@@ -13020,7 +12651,6 @@
       "version": "6.12.6",
       "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
       "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "fast-deep-equal": "^3.1.1",
@@ -13794,9 +13424,9 @@
       }
     },
     "node_modules/axios": {
-      "version": "1.8.4",
-      "resolved": "https://registry.npmjs.org/axios/-/axios-1.8.4.tgz",
-      "integrity": "sha512-eBSYY4Y68NNlHbHBMdeDmKNtDgXWhQsJcGqzO3iLUM0GraQFSS9cVgPX5I9b3lbdFKyYoAEGAZF1DwhTaljNAw==",
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.10.0.tgz",
+      "integrity": "sha512-/1xYAC4MP/HEG+3duIhFr4ZQXR4sQXOIe+o6sdqzeykGLx6Upp/1p8MHqhINOvGeP7xyNHe7tsiJByc4SSVUxw==",
       "license": "MIT",
       "dependencies": {
         "follow-redirects": "^1.15.6",
@@ -14217,7 +13847,9 @@
       "version": "3.2.0",
       "resolved": "https://registry.npmjs.org/boolean/-/boolean-3.2.0.tgz",
       "integrity": "sha512-d0II/GO9uf9lfUHH2BQsjxzRJZBdsjgsBiW4BvhWk/3qoKwQFjIDVN19PfX8F2D/r9PCMTtLWjYVCFrpeYUzsw==",
-      "license": "MIT"
+      "dev": true,
+      "license": "MIT",
+      "optional": true
     },
     "node_modules/bowser": {
       "version": "2.11.0",
@@ -14226,9 +13858,9 @@
       "license": "MIT"
     },
     "node_modules/brace-expansion": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
-      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
+      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -14239,7 +13871,6 @@
       "version": "3.0.3",
       "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
       "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "fill-range": "^7.1.1"
@@ -14581,7 +14212,6 @@
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/bundle-name/-/bundle-name-4.1.0.tgz",
       "integrity": "sha512-tjwM5exMg6BGRI+kNmTntNsvdZS1X8BFYS6tnJ2hdH0kVxM6/eVZ2xy+FqStSWvYmtfFMDLIxurorHwDKfDz5Q==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "run-applescript": "^7.0.0"
@@ -14695,9 +14325,9 @@
       }
     },
     "node_modules/cacache/node_modules/rimraf/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -15028,6 +14658,7 @@
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
       "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
+      "dev": true,
       "license": "ISC",
       "engines": {
         "node": ">=10"
@@ -16132,12 +15763,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/crypto-js": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-4.2.0.tgz",
-      "integrity": "sha512-KALDyEYgpY+Rlob/iriUtjV6d5Eq+Y191A5g4UqLAi8CyGP9N1+FdVbkc1SxKc2r4YAYqG8JzO2KGL+AizD70Q==",
-      "license": "MIT"
-    },
     "node_modules/css-declaration-sorter": {
       "version": "7.2.0",
       "resolved": "https://registry.npmjs.org/css-declaration-sorter/-/css-declaration-sorter-7.2.0.tgz",
@@ -17192,7 +16817,6 @@
       "version": "5.2.1",
       "resolved": "https://registry.npmjs.org/default-browser/-/default-browser-5.2.1.tgz",
       "integrity": "sha512-WY/3TUME0x3KPYdRRxEJJvXRHV4PyPoUsxtZa78lwItwRQRHhd2U9xOscaT/YTf8uCXIAjeJOFBVEh/7FtD8Xg==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "bundle-name": "^4.1.0",
@@ -17209,7 +16833,6 @@
       "version": "5.0.0",
       "resolved": "https://registry.npmjs.org/default-browser-id/-/default-browser-id-5.0.0.tgz",
       "integrity": "sha512-A6p/pu/6fyBcA1TRz/GqWYPViplrftcW2gZC9q79ngNCKAeR/X3gcEdXQHl4KNXV+3wgIJ1CPkJQ3IHM6lcsyA==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=18"
@@ -17245,6 +16868,7 @@
       "version": "1.1.4",
       "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
       "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "es-define-property": "^1.0.0",
@@ -17262,7 +16886,6 @@
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/define-lazy-prop/-/define-lazy-prop-3.0.0.tgz",
       "integrity": "sha512-N+MeXYoqr3pOgn8xfyRPREN7gHakLYjhsHhWGT3fWAiL4IkAt0iDw14QiiEm2bE30c5XX5q0FtAA3CK5f9/BUg==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=12"
@@ -17275,6 +16898,7 @@
       "version": "1.2.1",
       "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
       "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "define-data-property": "^1.0.1",
@@ -17353,9 +16977,9 @@
       }
     },
     "node_modules/detect-libc": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.3.tgz",
-      "integrity": "sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==",
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
+      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
       "license": "Apache-2.0",
       "engines": {
         "node": ">=8"
@@ -17375,6 +16999,7 @@
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/detect-node/-/detect-node-2.1.0.tgz",
       "integrity": "sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==",
+      "dev": true,
       "license": "MIT"
     },
     "node_modules/detect-node-es": {
@@ -17470,9 +17095,9 @@
       }
     },
     "node_modules/dir-compare/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -17763,14 +17388,14 @@
       }
     },
     "node_modules/drizzle-kit": {
-      "version": "0.31.1",
-      "resolved": "https://registry.npmjs.org/drizzle-kit/-/drizzle-kit-0.31.1.tgz",
-      "integrity": "sha512-PUjYKWtzOzPtdtQlTHQG3qfv4Y0XT8+Eas6UbxCmxTj7qgMf+39dDujf1BP1I+qqZtw9uzwTh8jYtkMuCq+B0Q==",
+      "version": "0.31.2",
+      "resolved": "https://registry.npmjs.org/drizzle-kit/-/drizzle-kit-0.31.2.tgz",
+      "integrity": "sha512-Z2Uqxvu4HNFzlDkG3NQ2BYpII8SlOMkpjsC5XFh9TsYP2nYhfVamVjQ8spiMFXH3vGOyUt1cQ5FZ1JSgl6+8QQ==",
       "license": "MIT",
       "dependencies": {
         "@drizzle-team/brocli": "^0.10.2",
         "@esbuild-kit/esm-loader": "^2.5.5",
-        "esbuild": "^0.25.2",
+        "esbuild": "^0.25.4",
         "esbuild-register": "^3.5.0"
       },
       "bin": {
@@ -18513,12 +18138,14 @@
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/es6-error/-/es6-error-4.1.1.tgz",
       "integrity": "sha512-Um/+FxMr9CISWh0bi5Zv0iOD+4cFh5qLeks1qhAopKVAJw3drgKbKySikp7wGhDL0HPeaja0P5ULZrxLkniUVg==",
-      "license": "MIT"
+      "dev": true,
+      "license": "MIT",
+      "optional": true
     },
     "node_modules/esbuild": {
-      "version": "0.25.2",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.2.tgz",
-      "integrity": "sha512-16854zccKPnC+toMywC+uKNeYSv+/eXkevRAfwRD/G9Cleq66m8XFIrigkbvauLLlCfDL45Q2cWegSg53gGBnQ==",
+      "version": "0.25.5",
+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.5.tgz",
+      "integrity": "sha512-P8OtKZRv/5J5hhz0cUAdu/cLuPIKXpQl1R9pZtvmHWQvrAUVd0UNIPT4IB4W3rNOqVO0rlqHmCIbSwxh/c9yUQ==",
       "hasInstallScript": true,
       "license": "MIT",
       "bin": {
@@ -18528,31 +18155,31 @@
         "node": ">=18"
       },
       "optionalDependencies": {
-        "@esbuild/aix-ppc64": "0.25.2",
-        "@esbuild/android-arm": "0.25.2",
-        "@esbuild/android-arm64": "0.25.2",
-        "@esbuild/android-x64": "0.25.2",
-        "@esbuild/darwin-arm64": "0.25.2",
-        "@esbuild/darwin-x64": "0.25.2",
-        "@esbuild/freebsd-arm64": "0.25.2",
-        "@esbuild/freebsd-x64": "0.25.2",
-        "@esbuild/linux-arm": "0.25.2",
-        "@esbuild/linux-arm64": "0.25.2",
-        "@esbuild/linux-ia32": "0.25.2",
-        "@esbuild/linux-loong64": "0.25.2",
-        "@esbuild/linux-mips64el": "0.25.2",
-        "@esbuild/linux-ppc64": "0.25.2",
-        "@esbuild/linux-riscv64": "0.25.2",
-        "@esbuild/linux-s390x": "0.25.2",
-        "@esbuild/linux-x64": "0.25.2",
-        "@esbuild/netbsd-arm64": "0.25.2",
-        "@esbuild/netbsd-x64": "0.25.2",
-        "@esbuild/openbsd-arm64": "0.25.2",
-        "@esbuild/openbsd-x64": "0.25.2",
-        "@esbuild/sunos-x64": "0.25.2",
-        "@esbuild/win32-arm64": "0.25.2",
-        "@esbuild/win32-ia32": "0.25.2",
-        "@esbuild/win32-x64": "0.25.2"
+        "@esbuild/aix-ppc64": "0.25.5",
+        "@esbuild/android-arm": "0.25.5",
+        "@esbuild/android-arm64": "0.25.5",
+        "@esbuild/android-x64": "0.25.5",
+        "@esbuild/darwin-arm64": "0.25.5",
+        "@esbuild/darwin-x64": "0.25.5",
+        "@esbuild/freebsd-arm64": "0.25.5",
+        "@esbuild/freebsd-x64": "0.25.5",
+        "@esbuild/linux-arm": "0.25.5",
+        "@esbuild/linux-arm64": "0.25.5",
+        "@esbuild/linux-ia32": "0.25.5",
+        "@esbuild/linux-loong64": "0.25.5",
+        "@esbuild/linux-mips64el": "0.25.5",
+        "@esbuild/linux-ppc64": "0.25.5",
+        "@esbuild/linux-riscv64": "0.25.5",
+        "@esbuild/linux-s390x": "0.25.5",
+        "@esbuild/linux-x64": "0.25.5",
+        "@esbuild/netbsd-arm64": "0.25.5",
+        "@esbuild/netbsd-x64": "0.25.5",
+        "@esbuild/openbsd-arm64": "0.25.5",
+        "@esbuild/openbsd-x64": "0.25.5",
+        "@esbuild/sunos-x64": "0.25.5",
+        "@esbuild/win32-arm64": "0.25.5",
+        "@esbuild/win32-ia32": "0.25.5",
+        "@esbuild/win32-x64": "0.25.5"
       }
     },
     "node_modules/esbuild-register": {
@@ -18938,9 +18565,9 @@
       }
     },
     "node_modules/eslint-config-erb/node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
-      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
+      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -19012,9 +18639,9 @@
       }
     },
     "node_modules/eslint-config-erb/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -19625,9 +19252,9 @@
       }
     },
     "node_modules/eslint-plugin-import/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -19735,9 +19362,9 @@
       }
     },
     "node_modules/eslint-plugin-jsx-a11y/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -19855,9 +19482,9 @@
       }
     },
     "node_modules/eslint-plugin-react/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -19937,9 +19564,9 @@
       }
     },
     "node_modules/eslint/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -20129,9 +19756,9 @@
       }
     },
     "node_modules/eventsource": {
-      "version": "3.0.6",
-      "resolved": "https://registry.npmjs.org/eventsource/-/eventsource-3.0.6.tgz",
-      "integrity": "sha512-l19WpE2m9hSuyP06+FbuUUf1G+R0SFLrtQfbRb9PRr+oimOfxQhgGCbVaXg5IvZyyTThJsxh6L/srkMiCeBPDA==",
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/eventsource/-/eventsource-3.0.7.tgz",
+      "integrity": "sha512-CRT1WTyuQoD771GW56XEZFQ/ZoSfWid1alKGDYMmkt2yl8UXrVR4pspqWNEcqKvVIzg6PAltWjxcSSPrboA4iA==",
       "license": "MIT",
       "dependencies": {
         "eventsource-parser": "^3.0.1"
@@ -20141,9 +19768,9 @@
       }
     },
     "node_modules/eventsource-parser": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/eventsource-parser/-/eventsource-parser-3.0.1.tgz",
-      "integrity": "sha512-VARTJ9CYeuQYb0pZEPbzi740OWFgpHe7AYJ2WFZVnUDUQp5Dk2yJUgF36YsZ81cOyxT0QxmXD2EQpapAouzWVA==",
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/eventsource-parser/-/eventsource-parser-3.0.2.tgz",
+      "integrity": "sha512-6RxOBZ/cYgd8usLwsEl+EC09Au/9BcmCKYF2/xbml6DNczf7nv0MQb+7BA2F+li6//I+28VNlQR37XfQtcAJuA==",
       "license": "MIT",
       "engines": {
         "node": ">=18.0.0"
@@ -20289,9 +19916,9 @@
       }
     },
     "node_modules/express-rate-limit": {
-      "version": "7.5.0",
-      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-7.5.0.tgz",
-      "integrity": "sha512-eB5zbQh5h+VenMPM3fh+nw1YExi5nMr6HUCR62ELSP11huvxm/Uir1H1QEyTkk5QX6A58pX6NmaTMceKZ0Eodg==",
+      "version": "7.5.1",
+      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-7.5.1.tgz",
+      "integrity": "sha512-7iN8iPMDzOMHPUYllBEsQdWVB6fPDMPqwjBaFrgr4Jgr/+okjvzAy+UHlYYL/Vs0OsOrMkwS6PJDkFlJwoxUnw==",
       "license": "MIT",
       "engines": {
         "node": ">= 16"
@@ -20300,7 +19927,7 @@
         "url": "https://github.com/sponsors/express-rate-limit"
       },
       "peerDependencies": {
-        "express": "^4.11 || 5 || ^5.0.0-beta.1"
+        "express": ">= 4.11"
       }
     },
     "node_modules/express/node_modules/cookie": {
@@ -20402,7 +20029,6 @@
       "version": "3.3.3",
       "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
       "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "@nodelib/fs.stat": "^2.0.2",
@@ -20419,7 +20045,6 @@
       "version": "5.1.2",
       "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
       "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
-      "dev": true,
       "license": "ISC",
       "dependencies": {
         "is-glob": "^4.0.1"
@@ -20432,7 +20057,6 @@
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
       "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
-      "dev": true,
       "license": "MIT"
     },
     "node_modules/fast-levenshtein": {
@@ -20485,18 +20109,6 @@
         "fxparser": "src/cli/cli.js"
       }
     },
-    "node_modules/fastembed": {
-      "version": "1.14.4",
-      "resolved": "https://registry.npmjs.org/fastembed/-/fastembed-1.14.4.tgz",
-      "integrity": "sha512-ZU9hpQRkYKPD/k0A6NzFe/Z9voSU3Saxve/1kLY9aS9iyUJYLJPI/3gsDgRA9uxwIMi8w7/tjH1lRW8K1N+wWA==",
-      "license": "MIT",
-      "dependencies": {
-        "@anush008/tokenizers": "^0.0.0",
-        "onnxruntime-node": "1.21.0",
-        "progress": "^2.0.3",
-        "tar": "^6.2.0"
-      }
-    },
     "node_modules/fastest-levenshtein": {
       "version": "1.0.16",
       "resolved": "https://registry.npmjs.org/fastest-levenshtein/-/fastest-levenshtein-1.0.16.tgz",
@@ -20511,7 +20123,6 @@
       "version": "1.19.1",
       "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
       "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
-      "dev": true,
       "license": "ISC",
       "dependencies": {
         "reusify": "^1.0.4"
@@ -20702,7 +20313,6 @@
       "version": "7.1.1",
       "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
       "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "to-regex-range": "^5.0.1"
@@ -20767,6 +20377,46 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/find-workspaces": {
+      "version": "0.3.1",
+      "resolved": "https://registry.npmjs.org/find-workspaces/-/find-workspaces-0.3.1.tgz",
+      "integrity": "sha512-UDkGILGJSA1LN5Aa7McxCid4sqW3/e+UYsVwyxki3dDT0F8+ym0rAfnCkEfkL0rO7M+8/mvkim4t/s3IPHmg+w==",
+      "license": "MIT",
+      "dependencies": {
+        "fast-glob": "^3.3.2",
+        "pkg-types": "^1.0.3",
+        "yaml": "^2.3.4"
+      }
+    },
+    "node_modules/find-workspaces/node_modules/confbox": {
+      "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/confbox/-/confbox-0.1.8.tgz",
+      "integrity": "sha512-RMtmw0iFkeR4YV+fUOSucriAQNb9g8zFR52MWCtl+cCZOFRNL6zeB395vPzFhEjjn4fMxXudmELnl/KF/WrK6w==",
+      "license": "MIT"
+    },
+    "node_modules/find-workspaces/node_modules/pkg-types": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/pkg-types/-/pkg-types-1.3.1.tgz",
+      "integrity": "sha512-/Jm5M4RvtBFVkKWRu2BLUTNP8/M2a+UwuAX+ae4770q1qVGtfjG+WTCupoZixokjmHiry8uI+dlY8KXYV5HVVQ==",
+      "license": "MIT",
+      "dependencies": {
+        "confbox": "^0.1.8",
+        "mlly": "^1.7.4",
+        "pathe": "^2.0.1"
+      }
+    },
+    "node_modules/find-workspaces/node_modules/yaml": {
+      "version": "2.8.0",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.0.tgz",
+      "integrity": "sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==",
+      "license": "ISC",
+      "bin": {
+        "yaml": "bin.mjs"
+      },
+      "engines": {
+        "node": ">= 14.6"
+      }
+    },
     "node_modules/flat": {
       "version": "5.0.2",
       "resolved": "https://registry.npmjs.org/flat/-/flat-5.0.2.tgz",
@@ -20997,6 +20647,7 @@
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
       "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
+      "dev": true,
       "license": "ISC",
       "dependencies": {
         "minipass": "^3.0.0"
@@ -21264,6 +20915,18 @@
         "node": ">=8.0.0"
       }
     },
+    "node_modules/get-port": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/get-port/-/get-port-7.1.0.tgz",
+      "integrity": "sha512-QB9NKEeDg3xxVwCCwJQ9+xycaz6pBB6iQ76wiWMl1927n0Kir6alPiP+yuiICLLU4jpMe08dXfpebuQppFA2zw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/get-proto": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
@@ -21364,9 +21027,9 @@
       "license": "BSD-2-Clause"
     },
     "node_modules/glob/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -21391,7 +21054,9 @@
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/global-agent/-/global-agent-3.0.0.tgz",
       "integrity": "sha512-PT6XReJ+D07JvGoxQMkT6qji/jVNfX/h364XHZOWeRzy64sSFr+xJ5OX7LI3b4MPQzdL4H8Y8M0xzPpsVMwA8Q==",
+      "dev": true,
       "license": "BSD-3-Clause",
+      "optional": true,
       "dependencies": {
         "boolean": "^3.0.1",
         "es6-error": "^4.1.1",
@@ -21417,6 +21082,7 @@
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
       "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "define-properties": "^1.2.1",
@@ -21582,6 +21248,7 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
       "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "es-define-property": "^1.0.0"
@@ -21875,9 +21542,9 @@
       "license": "MIT"
     },
     "node_modules/hono": {
-      "version": "4.7.7",
-      "resolved": "https://registry.npmjs.org/hono/-/hono-4.7.7.tgz",
-      "integrity": "sha512-2PCpQRbN87Crty8/L/7akZN3UyZIAopSoRxCwRbJgUuV1+MHNFHzYFxZTg4v/03cXUm+jce/qa2VSBZpKBm3Qw==",
+      "version": "4.8.2",
+      "resolved": "https://registry.npmjs.org/hono/-/hono-4.8.2.tgz",
+      "integrity": "sha512-hM+1RIn9PK1I6SiTNS6/y7O1mvg88awYLFEuEtoiMtRyT3SD2iu9pSFgbBXT3b1Ua4IwzvSTLvwO0SEhDxCi4w==",
       "license": "MIT",
       "engines": {
         "node": ">=16.9.0"
@@ -22417,9 +22084,9 @@
       }
     },
     "node_modules/import-in-the-middle": {
-      "version": "1.13.1",
-      "resolved": "https://registry.npmjs.org/import-in-the-middle/-/import-in-the-middle-1.13.1.tgz",
-      "integrity": "sha512-k2V9wNm9B+ysuelDTHjI9d5KPc4l8zAZTGqj+pcynvWkypZd857ryzN8jNC7Pg2YZXNMJcHRPpaDyCBbNyVRpA==",
+      "version": "1.14.2",
+      "resolved": "https://registry.npmjs.org/import-in-the-middle/-/import-in-the-middle-1.14.2.tgz",
+      "integrity": "sha512-5tCuY9BV8ujfOpwtAGgsTx9CGUapcFMEEyByLv1B+v2+6DhAcw+Zr0nhQT7uwaZ7DiourxFEscghOR8e1aPLQw==",
       "license": "Apache-2.0",
       "dependencies": {
         "acorn": "^8.14.0",
@@ -22780,7 +22447,6 @@
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-3.0.0.tgz",
       "integrity": "sha512-eljcgEDlEns/7AXFosB5K/2nCM4P7FQPkGc/DWLy5rmFEWvZayGrik1d9/QIY5nJ4f9YsVvBkA6kJpHn9rISdQ==",
-      "dev": true,
       "license": "MIT",
       "bin": {
         "is-docker": "cli.js"
@@ -22881,7 +22547,6 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/is-inside-container/-/is-inside-container-1.0.0.tgz",
       "integrity": "sha512-KIYLCCJghfHZxqjYBE7rEy0OBuTd5xCHS7tHVgvCLkx7StIoaxwNW3hCALgEUjFfeRk+MG/Qxmp/vtETEF3tRA==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "is-docker": "^3.0.0"
@@ -22949,7 +22614,6 @@
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
       "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=0.12.0"
@@ -23222,7 +22886,6 @@
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-3.1.0.tgz",
       "integrity": "sha512-UcVfVfaK4Sc4m7X3dUSoHoozQGBEFeDC+zVo06t98xe8CzHSZZBekNXH+tu0NalHolcJ/QAGqS46Hef7QXBIMw==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "is-inside-container": "^1.0.0"
@@ -23425,9 +23088,9 @@
       }
     },
     "node_modules/jake/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -24530,7 +24193,6 @@
       "version": "0.4.1",
       "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
       "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
-      "dev": true,
       "license": "MIT"
     },
     "node_modules/json-schema-typed": {
@@ -24572,7 +24234,9 @@
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
       "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
-      "license": "ISC"
+      "dev": true,
+      "license": "ISC",
+      "optional": true
     },
     "node_modules/json5": {
       "version": "2.2.3",
@@ -24916,34 +24580,35 @@
       }
     },
     "node_modules/libsql": {
-      "version": "0.5.7",
-      "resolved": "https://registry.npmjs.org/libsql/-/libsql-0.5.7.tgz",
-      "integrity": "sha512-YbWW3YsGZl6PrBRNAtUVuMLqKRqYcYPa/QqhQCuR67SlcOHIhJ11ksTLAHxXkDRJs6kSrzr9JgGJGJQ91e1Bww==",
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/libsql/-/libsql-0.5.13.tgz",
+      "integrity": "sha512-5Bwoa/CqzgkTwySgqHA5TsaUDRrdLIbdM4egdPcaAnqO3aC+qAgS6BwdzuZwARA5digXwiskogZ8H7Yy4XfdOg==",
       "cpu": [
         "x64",
         "arm64",
-        "wasm32"
+        "wasm32",
+        "arm"
       ],
       "license": "MIT",
-      "optional": true,
       "os": [
         "darwin",
         "linux",
         "win32"
       ],
-      "peer": true,
       "dependencies": {
         "@neon-rs/load": "^0.0.4",
         "detect-libc": "2.0.2"
       },
       "optionalDependencies": {
-        "@libsql/darwin-arm64": "0.5.7",
-        "@libsql/darwin-x64": "0.5.7",
-        "@libsql/linux-arm64-gnu": "0.5.7",
-        "@libsql/linux-arm64-musl": "0.5.7",
-        "@libsql/linux-x64-gnu": "0.5.7",
-        "@libsql/linux-x64-musl": "0.5.7",
-        "@libsql/win32-x64-msvc": "0.5.7"
+        "@libsql/darwin-arm64": "0.5.13",
+        "@libsql/darwin-x64": "0.5.13",
+        "@libsql/linux-arm-gnueabihf": "0.5.13",
+        "@libsql/linux-arm-musleabihf": "0.5.13",
+        "@libsql/linux-arm64-gnu": "0.5.13",
+        "@libsql/linux-arm64-musl": "0.5.13",
+        "@libsql/linux-x64-gnu": "0.5.13",
+        "@libsql/linux-x64-musl": "0.5.13",
+        "@libsql/win32-x64-msvc": "0.5.13"
       }
     },
     "node_modules/libsql/node_modules/detect-libc": {
@@ -24951,8 +24616,6 @@
       "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.2.tgz",
       "integrity": "sha512-UX6sGumvvqSaXgdKGUsgZWqcUyIXZ/vZTrlRT/iobiKhGL0zL4d3osHj3uqllWJK+i+sixDS/3COVEOFbupFyw==",
       "license": "Apache-2.0",
-      "optional": true,
-      "peer": true,
       "engines": {
         "node": ">=8"
       }
@@ -25356,36 +25019,1186 @@
       }
     },
     "node_modules/mastra": {
-      "version": "0.4.9",
-      "resolved": "https://registry.npmjs.org/mastra/-/mastra-0.4.9.tgz",
-      "integrity": "sha512-JXWYfLvNgE5USLDos0JGRHEVy145h5DLkUQLpUFweE37Vg7Ht7XleuJKU6YvCh/KDBkC6Oa6k7vsxeMy+3y2nQ==",
+      "version": "0.10.8",
+      "resolved": "https://registry.npmjs.org/mastra/-/mastra-0.10.8.tgz",
+      "integrity": "sha512-8x4P1sR3K9IjAzl+LoYCMeCEF57bWb6k6ChmSxSKiWl3ePYDZucUj6a43tvSZklnRD3boD5mb0iy8jQaeYKkEA==",
       "license": "Elastic-2.0",
       "dependencies": {
-        "@clack/prompts": "^0.8.2",
+        "@clack/prompts": "^0.11.0",
         "@lukeed/uuid": "^2.0.1",
-        "@mastra/core": "^0.8.3",
-        "@mastra/deployer": "^0.2.9",
-        "@opentelemetry/instrumentation": "^0.57.2",
+        "@mastra/deployer": "^0.10.8",
+        "@mastra/loggers": "^0.10.2",
+        "@mastra/mcp": "^0.10.5",
+        "@opentelemetry/auto-instrumentations-node": "^0.60.1",
+        "@opentelemetry/core": "^2.0.1",
+        "@opentelemetry/exporter-trace-otlp-grpc": "^0.202.0",
+        "@opentelemetry/exporter-trace-otlp-http": "^0.202.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/resources": "^2.0.1",
+        "@opentelemetry/sdk-node": "^0.202.0",
+        "@opentelemetry/sdk-trace-base": "^2.0.1",
+        "@opentelemetry/semantic-conventions": "^1.34.0",
         "@webcontainer/env": "^1.1.1",
         "commander": "^12.1.0",
-        "dotenv": "^16.4.7",
-        "execa": "^9.5.2",
+        "dotenv": "^16.5.0",
+        "execa": "^9.6.0",
         "fs-extra": "^11.3.0",
-        "json-schema-to-zod": "^2.6.0",
+        "get-port": "^7.1.0",
+        "json-schema-to-zod": "^2.6.1",
+        "open": "^10.1.2",
         "picocolors": "^1.1.1",
-        "posthog-node": "^4.10.1",
+        "posthog-node": "4.18.0",
         "prettier": "^3.5.3",
         "prompt": "^1.3.0",
+        "shell-quote": "^1.8.3",
         "shiki": "^1.29.2",
+        "strip-json-comments": "^5.0.2",
         "superjson": "^2.2.2",
         "swr": "^2.3.3",
         "tcp-port-used": "^1.0.2",
-        "yocto-spinner": "^0.1.2",
-        "zod": "^3.24.2",
-        "zod-to-json-schema": "^3.24.3"
+        "yocto-spinner": "^0.2.3",
+        "zod": "^3.25.67",
+        "zod-to-json-schema": "^3.24.5"
       },
       "bin": {
         "mastra": "dist/index.js"
+      },
+      "peerDependencies": {
+        "@mastra/core": "^0.10.2-alpha.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/api-logs": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/api-logs/-/api-logs-0.202.0.tgz",
+      "integrity": "sha512-fTBjMqKCfotFWfLzaKyhjLvyEyq5vDKTTFfBmx21btv3gvy8Lq6N5Dh2OzqeuN4DjtpSvNT1uNVfg08eD2Rfxw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      },
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/auto-instrumentations-node": {
+      "version": "0.60.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/auto-instrumentations-node/-/auto-instrumentations-node-0.60.1.tgz",
+      "integrity": "sha512-oMBVXiun0qWhj693Y24Ie+75q45YXHRFeH9vX/XBWKRNJIM/02ufjmNvmOdoHY0EPxU9rBmWCW82Uidf54iSPA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/instrumentation-amqplib": "^0.49.0",
+        "@opentelemetry/instrumentation-aws-lambda": "^0.53.0",
+        "@opentelemetry/instrumentation-aws-sdk": "^0.54.0",
+        "@opentelemetry/instrumentation-bunyan": "^0.48.0",
+        "@opentelemetry/instrumentation-cassandra-driver": "^0.48.0",
+        "@opentelemetry/instrumentation-connect": "^0.46.0",
+        "@opentelemetry/instrumentation-cucumber": "^0.17.0",
+        "@opentelemetry/instrumentation-dataloader": "^0.19.0",
+        "@opentelemetry/instrumentation-dns": "^0.46.0",
+        "@opentelemetry/instrumentation-express": "^0.51.0",
+        "@opentelemetry/instrumentation-fastify": "^0.47.0",
+        "@opentelemetry/instrumentation-fs": "^0.22.0",
+        "@opentelemetry/instrumentation-generic-pool": "^0.46.0",
+        "@opentelemetry/instrumentation-graphql": "^0.50.0",
+        "@opentelemetry/instrumentation-grpc": "^0.202.0",
+        "@opentelemetry/instrumentation-hapi": "^0.49.0",
+        "@opentelemetry/instrumentation-http": "^0.202.0",
+        "@opentelemetry/instrumentation-ioredis": "^0.50.0",
+        "@opentelemetry/instrumentation-kafkajs": "^0.11.0",
+        "@opentelemetry/instrumentation-knex": "^0.47.0",
+        "@opentelemetry/instrumentation-koa": "^0.50.1",
+        "@opentelemetry/instrumentation-lru-memoizer": "^0.47.0",
+        "@opentelemetry/instrumentation-memcached": "^0.46.0",
+        "@opentelemetry/instrumentation-mongodb": "^0.55.1",
+        "@opentelemetry/instrumentation-mongoose": "^0.49.0",
+        "@opentelemetry/instrumentation-mysql": "^0.48.0",
+        "@opentelemetry/instrumentation-mysql2": "^0.48.0",
+        "@opentelemetry/instrumentation-nestjs-core": "^0.48.0",
+        "@opentelemetry/instrumentation-net": "^0.46.1",
+        "@opentelemetry/instrumentation-oracledb": "^0.28.0",
+        "@opentelemetry/instrumentation-pg": "^0.54.0",
+        "@opentelemetry/instrumentation-pino": "^0.49.0",
+        "@opentelemetry/instrumentation-redis": "^0.49.1",
+        "@opentelemetry/instrumentation-redis-4": "^0.49.0",
+        "@opentelemetry/instrumentation-restify": "^0.48.1",
+        "@opentelemetry/instrumentation-router": "^0.47.0",
+        "@opentelemetry/instrumentation-runtime-node": "^0.16.0",
+        "@opentelemetry/instrumentation-socket.io": "^0.49.0",
+        "@opentelemetry/instrumentation-tedious": "^0.21.0",
+        "@opentelemetry/instrumentation-undici": "^0.13.1",
+        "@opentelemetry/instrumentation-winston": "^0.47.0",
+        "@opentelemetry/resource-detector-alibaba-cloud": "^0.31.2",
+        "@opentelemetry/resource-detector-aws": "^2.2.0",
+        "@opentelemetry/resource-detector-azure": "^0.9.0",
+        "@opentelemetry/resource-detector-container": "^0.7.2",
+        "@opentelemetry/resource-detector-gcp": "^0.36.0",
+        "@opentelemetry/resources": "^2.0.0",
+        "@opentelemetry/sdk-node": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.4.1",
+        "@opentelemetry/core": "^2.0.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/exporter-logs-otlp-grpc": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-grpc/-/exporter-logs-otlp-grpc-0.202.0.tgz",
+      "integrity": "sha512-Y84L8Yja/A2qjGEzC/To0yrMUXHrtwJzHtZ2za1/ulZplRe5QFsLNyHixIS42ZYUKuNyWMDgOFhnN2Pz5uThtg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@grpc/grpc-js": "^1.7.1",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-grpc-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-transformer": "0.202.0",
+        "@opentelemetry/sdk-logs": "0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/exporter-logs-otlp-http": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-http/-/exporter-logs-otlp-http-0.202.0.tgz",
+      "integrity": "sha512-mJWLkmoG+3r+SsYQC+sbWoy1rjowJhMhFvFULeIPTxSI+EZzKPya0+NZ3+vhhgx2UTybGQlye3FBtCH3o6Rejg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api-logs": "0.202.0",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-transformer": "0.202.0",
+        "@opentelemetry/sdk-logs": "0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/exporter-logs-otlp-proto": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-logs-otlp-proto/-/exporter-logs-otlp-proto-0.202.0.tgz",
+      "integrity": "sha512-qYwbmNWPkP7AbzX8o4DRu5bb/a0TWYNcpZc1NEAOhuV7pgBpAUPEClxRWPN94ulIia+PfQjzFGMaRwmLGmNP6g==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api-logs": "0.202.0",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-transformer": "0.202.0",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-logs": "0.202.0",
+        "@opentelemetry/sdk-trace-base": "2.0.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/exporter-metrics-otlp-grpc": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-grpc/-/exporter-metrics-otlp-grpc-0.202.0.tgz",
+      "integrity": "sha512-/dq/rf4KCkTYoP+NyPXTE+5wjvfhAHSqK62vRsJ/IalG61VPQvwaL18yWcavbI+44ImQwtMeZxfIJSox7oQL0w==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@grpc/grpc-js": "^1.7.1",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/exporter-metrics-otlp-http": "0.202.0",
+        "@opentelemetry/otlp-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-grpc-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-transformer": "0.202.0",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-metrics": "2.0.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/exporter-metrics-otlp-http": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-http/-/exporter-metrics-otlp-http-0.202.0.tgz",
+      "integrity": "sha512-ooYcrf/m9ZuVGpQnER7WRH+JZbDPD389HG7VS/EnvIEF5WpNYEqf+NdmtaAcs51d81QrytTYAubc5bVWi//28w==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-transformer": "0.202.0",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-metrics": "2.0.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/exporter-metrics-otlp-proto": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-metrics-otlp-proto/-/exporter-metrics-otlp-proto-0.202.0.tgz",
+      "integrity": "sha512-X0RpPpPjyCAmIq9tySZm0Hk3Ltw8KWsqeNq5I7gS9AR9RzbVHb/l+eiMI1CqSRvW9R47HXcUu/epmEzY8ebFAg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/exporter-metrics-otlp-http": "0.202.0",
+        "@opentelemetry/otlp-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-transformer": "0.202.0",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-metrics": "2.0.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/exporter-prometheus": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-prometheus/-/exporter-prometheus-0.202.0.tgz",
+      "integrity": "sha512-6RvQqZHAPFiwL1OKRJe4ta6SgJx/g8or41B+OovVVEie3HeCDhDGL9S1VJNkBozUz6wTY8a47fQwdMrCOUdMhQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-metrics": "2.0.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/exporter-trace-otlp-grpc": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-grpc/-/exporter-trace-otlp-grpc-0.202.0.tgz",
+      "integrity": "sha512-d5wLdbNA3ahpSeD0I34vbDFMTh4vPsXemH0bKDXLeCVULCAjOJXuZmEiuRammiDgVvvX7CAb/IGLDz8d2QHvoA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@grpc/grpc-js": "^1.7.1",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-grpc-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-transformer": "0.202.0",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/exporter-trace-otlp-http": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-http/-/exporter-trace-otlp-http-0.202.0.tgz",
+      "integrity": "sha512-/hKE8DaFCJuaQqE1IxpgkcjOolUIwgi3TgHElPVKGdGRBSmJMTmN/cr6vWa55pCJIXPyhKvcMrbrya7DZ3VmzA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-transformer": "0.202.0",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/exporter-trace-otlp-proto": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/exporter-trace-otlp-proto/-/exporter-trace-otlp-proto-0.202.0.tgz",
+      "integrity": "sha512-z3vzdMclCETGIn8uUBgpz7w651ftCiH2qh3cewhBk+rF0EYPNQ3mJvyxktLnKIBZ/ci0zUknAzzYC7LIIZmggQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-transformer": "0.202.0",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation/-/instrumentation-0.202.0.tgz",
+      "integrity": "sha512-Uz3BxZWPgDwgHM2+vCKEQRh0R8WKrd/q6Tus1vThRClhlPO39Dyz7mDrOr6KuqGXAlBQ1e5Tnymzri4RMZNaWA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api-logs": "0.202.0",
+        "import-in-the-middle": "^1.8.1",
+        "require-in-the-middle": "^7.1.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-amqplib": {
+      "version": "0.49.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-amqplib/-/instrumentation-amqplib-0.49.0.tgz",
+      "integrity": "sha512-OCGkE+1JoUN+gOzs3u0GSa7GV//KX6NMKzaPchedae7ZwFVyyBQ8VECJngHgW3k/FLABFnq9Oiym2WZGiWugVQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-aws-lambda": {
+      "version": "0.53.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-aws-lambda/-/instrumentation-aws-lambda-0.53.0.tgz",
+      "integrity": "sha512-dZywDIc4t7o28eU9W4QMB+mNhRdH5/kVxVmxRtB46/diHg8Im6RFncuiCVJ1l9ig/RUtwR3dU9LX1huFBwxkPw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0",
+        "@types/aws-lambda": "8.10.147"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-aws-sdk": {
+      "version": "0.54.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-aws-sdk/-/instrumentation-aws-sdk-0.54.0.tgz",
+      "integrity": "sha512-4XnXfpACX8fpOnt/D8d/1AFg3uOwBTG9TopQBuikDZJYUrLUSdT7UiotCFqAM/Z6hQJh72Jy3591C/OrmKct7A==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/propagation-utils": "^0.31.2",
+        "@opentelemetry/semantic-conventions": "^1.31.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-bunyan": {
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-bunyan/-/instrumentation-bunyan-0.48.0.tgz",
+      "integrity": "sha512-Q6ay5CXIKuyejadPoLboz+jKumB3Zuxyk35ycFh9vfIeww3+mNRyMVj6KxHRS0Imbv9zhNbP3uyrUpvEMMyHuw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api-logs": "^0.202.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@types/bunyan": "1.8.11"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-cassandra-driver": {
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-cassandra-driver/-/instrumentation-cassandra-driver-0.48.0.tgz",
+      "integrity": "sha512-0dcX8Kx0S6ZAOknrbA+BBh1j5lg5F20W18m5VYoGUxkuLIUbWkQA3uaqeTfqbOwmnBmb1upDPUWPR+g5N12B4Q==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-connect": {
+      "version": "0.46.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-connect/-/instrumentation-connect-0.46.0.tgz",
+      "integrity": "sha512-YNq/7M1JXnWRkpKPC9dbYZA36cg547gY0p1bijW7vuZJ9t5f3alo6w8TWtZwV/hOFtBGHDXVhKVfp2Mh6zVHjQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0",
+        "@types/connect": "3.4.38"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-cucumber": {
+      "version": "0.17.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-cucumber/-/instrumentation-cucumber-0.17.0.tgz",
+      "integrity": "sha512-TTfQ9DmUlbeBsYZjNdJqs8mlcn1uY3t/AsTsALDBEFg6tWV+S1ADM9kVmKnscfbCwcQX2x17f/6a1Kpq5p91ww==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.0.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-dataloader": {
+      "version": "0.19.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-dataloader/-/instrumentation-dataloader-0.19.0.tgz",
+      "integrity": "sha512-zIVRnRs3zDZCqStQcpIdRx3Dz9WXFSVj9qimqI7CRuKao9qnrZYUVQHvvVlLZX3JAg+nDC6JRS95zvbq50hj4A==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-dns": {
+      "version": "0.46.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-dns/-/instrumentation-dns-0.46.0.tgz",
+      "integrity": "sha512-m8u72x2fSIjhP1ITJX9Ims3eR4Qn8ze+QWy9NHYO01JlmiMamoc9TfIOd4dyOtxVja4tjnkWceKQdlEH9F9BoA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-express": {
+      "version": "0.51.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-express/-/instrumentation-express-0.51.0.tgz",
+      "integrity": "sha512-v1mgfvyeQh7yfsZ8wZlr+jgFGk9FxzLfNH0EH0UYGO9das8fCIkixsEasZMWhjwAJKjlf+ElTZ2jE2pT7I3DyQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-fastify": {
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-fastify/-/instrumentation-fastify-0.47.0.tgz",
+      "integrity": "sha512-dLld0pI63WR1BXvNiGKFWzqrnhgItiIDNsRf/vVOhKV20HQNUQk5FfzcX0eUyiJtW/+u95Txh/vdfeQRwLELcA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-fs": {
+      "version": "0.22.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-fs/-/instrumentation-fs-0.22.0.tgz",
+      "integrity": "sha512-ktQVFD6pd8eAIW6t2DtDuXj2lxq+wnQ8WUkJLNZzl3rEE2TZEiHg7wIkWVoxl4Cz4pJ2YZJbdU2fHAizuDebDw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-generic-pool": {
+      "version": "0.46.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-generic-pool/-/instrumentation-generic-pool-0.46.0.tgz",
+      "integrity": "sha512-QJUH9n5Ld0xz54gX1k3L2RDoSyJjeZaASA17Zvm0uVa40v+s8oMfCa1/4y9TONFSVbL0fPbAGojVsRRtg6dJ5w==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-graphql": {
+      "version": "0.50.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-graphql/-/instrumentation-graphql-0.50.0.tgz",
+      "integrity": "sha512-Nn3vBS5T0Dv4+9WF1dGR0Lgsxuz6ztQmTsxoHvesm6YAAXiHffnwsxBEJUKEJcjxfXzjO1SVuLDkv1bAeQ3NFw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-grpc": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-grpc/-/instrumentation-grpc-0.202.0.tgz",
+      "integrity": "sha512-dWvefHNAyAfaHVmxQ/ySLQSI2hGKLgK1sBtvae4w9xruqU08bBMtvmVeGMA/5whfiUDU8ftp1/84U4Zoe5N56A==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.29.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-hapi": {
+      "version": "0.49.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-hapi/-/instrumentation-hapi-0.49.0.tgz",
+      "integrity": "sha512-d4BcCjbW7Pfg4FpbAAF0cK/ue3dN02WMw0uO2G792KzDjxj05MtZm3eBTz672j3ejV9hM0HvPPhUHUsIC0H6Gw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-http": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-http/-/instrumentation-http-0.202.0.tgz",
+      "integrity": "sha512-oX+jyY2KBg4/nVH3vZhSWDbhywkHgE0fq3YinhUBx0jv+YUWC2UKA7qLkxr/CSzfKsFi/Km0NKV+llH17yYGKw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/instrumentation": "0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.29.0",
+        "forwarded-parse": "2.1.2"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-ioredis": {
+      "version": "0.50.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-ioredis/-/instrumentation-ioredis-0.50.0.tgz",
+      "integrity": "sha512-f2e+3xPxMRdlt1rjZpRhxuqrfumlWe3NX0Y+W857RBBV11HhbeZZaYbO5MMaxV3xBZv4dwPSGx96GjExUWY0WA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/redis-common": "^0.37.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-kafkajs": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-kafkajs/-/instrumentation-kafkajs-0.11.0.tgz",
+      "integrity": "sha512-+i9VqVEPNObB1tkwcLV6zAafnve72h2Iwo48E11M/kVXMNXlgGhiYckYCmzba8c2u5XD/V98XZDrCIyO8CLCNA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.30.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-knex": {
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-knex/-/instrumentation-knex-0.47.0.tgz",
+      "integrity": "sha512-OjqjnzXD5+FXVGkOznbRAz9yByb4UWzIUhXjuHvOQ50IUY8mv3rM2Gj6Ar7m5JsENiS5DtAy2Vfwk4e9zNC0ng==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.33.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-koa": {
+      "version": "0.50.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-koa/-/instrumentation-koa-0.50.1.tgz",
+      "integrity": "sha512-HoQ9OuzLx4z6/BfA4medM6cj5+UXWQWakQVCd/Xd+gU+gA1eCxwdoECH44p+mTl3GFS7/icgfGE1if/lguaG0Q==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-lru-memoizer": {
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-lru-memoizer/-/instrumentation-lru-memoizer-0.47.0.tgz",
+      "integrity": "sha512-UJ2UlCAIF+N4zNkiHdMr4O0caN0K6YboAso3/zaFdG1QiPR2zqZcbWAGFBikZ9HSByU+NwbxTXDzlpkcDZIqWg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-memcached": {
+      "version": "0.46.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-memcached/-/instrumentation-memcached-0.46.0.tgz",
+      "integrity": "sha512-FFDcOVJUxZQqbg57gVskZGXRfEsZXwOvCaPv6/qIZRw5glLXPTulpnfG/s8NAltsj2buXSvS4eKFo+0HKH0apw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0",
+        "@types/memcached": "^2.2.6"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-mongodb": {
+      "version": "0.55.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mongodb/-/instrumentation-mongodb-0.55.1.tgz",
+      "integrity": "sha512-Wb13YixWm8nB27ZSQW3h070UWkivoh6bjeyDUY6lLimSUulALr+YHBn0t71U1aTcUeaZv3IBNaPRimFXhz6gBA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-mongoose": {
+      "version": "0.49.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mongoose/-/instrumentation-mongoose-0.49.0.tgz",
+      "integrity": "sha512-nF+43QFe8IoW20TmTJZdxZhnVZGEglODUvzAo3fRmaBFAkwUXRGzRgABS255PCjIbScEaRRDCXc6EAsSkwRNPg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-mysql": {
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mysql/-/instrumentation-mysql-0.48.0.tgz",
+      "integrity": "sha512-o7DwkkRn3eLWfzJdbXrlCS1EhbIOgB0W74eucbP+5Lk0XDGixy4yURTkmNclCcsemgzRZfEq0YvYQV29Yhpo5A==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0",
+        "@types/mysql": "2.15.26"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-mysql2": {
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-mysql2/-/instrumentation-mysql2-0.48.0.tgz",
+      "integrity": "sha512-eCRpv0WV2s0Pa6CpjPWzZiLZDqx8kqZJopJESd4ywoUwtijXzBiTRidp/8aL9k+kl4drhm2GVNr4thUCMlEOSA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0",
+        "@opentelemetry/sql-common": "^0.41.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-nestjs-core": {
+      "version": "0.48.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-nestjs-core/-/instrumentation-nestjs-core-0.48.0.tgz",
+      "integrity": "sha512-ytK4ABSkWcD9vyMU8GpinvodAGaRxBFuxybP/m7sgLtEboXMJjdWnEHb7lH/CX1ICiVKRXWdYg9npdu6yBCW5Q==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.30.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-net": {
+      "version": "0.46.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-net/-/instrumentation-net-0.46.1.tgz",
+      "integrity": "sha512-r7Buqem+odrTTPlWfT7EqS24QnDAL4U+c4e38RzcRtdZF00Z34oqEpge7TZcQLo0vEASWbHQ/WjWNR7ZYKFKBA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-oracledb": {
+      "version": "0.28.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-oracledb/-/instrumentation-oracledb-0.28.0.tgz",
+      "integrity": "sha512-VObbQRd3g8nDLLOeGjm5l6TnB9dtEaJoedLfLwMGrlD6lkai+hdfalYh6FOF5dce+dJouZdW6NUUAaBj4f4KcA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0",
+        "@types/oracledb": "6.5.2"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-pg": {
+      "version": "0.54.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-pg/-/instrumentation-pg-0.54.0.tgz",
+      "integrity": "sha512-KQnEGwm65p1zFZGjKGw+oMilGcR4l1q3qgRmETO7ySEfMddH3t6jwlbqmcjO3N3bVcPkYgjioGVQGvdpvz7O1w==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0",
+        "@opentelemetry/sql-common": "^0.41.0",
+        "@types/pg": "8.15.1",
+        "@types/pg-pool": "2.0.6"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-pino": {
+      "version": "0.49.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-pino/-/instrumentation-pino-0.49.0.tgz",
+      "integrity": "sha512-nngcqUnIeVnDvRMf6fixYwlMbTNzCVGv93CacyR/8TL/pjyumje020PC5q7b6CfcTdToiD5GMTMKvWBiTd08cA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api-logs": "^0.202.0",
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-redis": {
+      "version": "0.49.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-redis/-/instrumentation-redis-0.49.1.tgz",
+      "integrity": "sha512-Ds5Ke9qE9kTlDThqLSJJntkIvuMQCBPiFKwHntocb/3q/9q5D47BNwawO5Mj9sVMV6zkld5M5Pb9Av39iieuOg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/redis-common": "^0.37.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-redis-4": {
+      "version": "0.49.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-redis-4/-/instrumentation-redis-4-0.49.0.tgz",
+      "integrity": "sha512-i+Wsl7M2LXEDA2yXouNJ3fttSzzb5AhlehvSBVRIFuinY51XrrKSH66biO0eox+pYQMwAlPxJ778XcMQffN78A==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/redis-common": "^0.37.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-restify": {
+      "version": "0.48.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-restify/-/instrumentation-restify-0.48.1.tgz",
+      "integrity": "sha512-0KY7mWpm0TJJ8ajhsNsLUmsBE/yNr70o128Crn30eDmnyRQkG7uS0xfDi6keExjF7SKzXQabs3Gtx7SuFmE80Q==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-router": {
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-router/-/instrumentation-router-0.47.0.tgz",
+      "integrity": "sha512-U0zA1LTDqtTWyd5e4SdoqQA/8QUOhc4LDv9U7b+8FMFTty95OF84apUdatl09Dzc51XeWPWIV7VutmSCd/zsUg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-runtime-node": {
+      "version": "0.16.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-runtime-node/-/instrumentation-runtime-node-0.16.0.tgz",
+      "integrity": "sha512-Q/GB9LsKLrRCEIPLAQTDQvydnLmLXBSRkYkWzwKzY/LCkOs+Cl8YiJG08p6D4CaJ6lvP0iG4kwPHk1ydNbdehg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-socket.io": {
+      "version": "0.49.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-socket.io/-/instrumentation-socket.io-0.49.0.tgz",
+      "integrity": "sha512-DpMtNBEcaLCcbP1WVBPCSgRiBs31igTQkal1gUm40VL/XAv5GUqRAUnvHZrQh3yPipOqzV65pdb0jJXdps/tug==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-tedious": {
+      "version": "0.21.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-tedious/-/instrumentation-tedious-0.21.0.tgz",
+      "integrity": "sha512-pt37kHYGQ8D2vBOQwyB/TKUqLPF8Q4rfTNu3whZsPOsc6QHDPXpfQISIupWAnMjAaeujF/Spg6IA04W6jXrzRQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/instrumentation": "^0.202.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0",
+        "@types/tedious": "^4.0.14"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-undici": {
+      "version": "0.13.1",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-undici/-/instrumentation-undici-0.13.1.tgz",
+      "integrity": "sha512-w0e7q983oNa+dQiWOEgU+1R6H48ks6mICZKrIxY08KqZPFroPUYbH4Db7X6p8m4QhuHgI2/wEAgLf9h03ILzcg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/instrumentation": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.7.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/instrumentation-winston": {
+      "version": "0.47.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/instrumentation-winston/-/instrumentation-winston-0.47.0.tgz",
+      "integrity": "sha512-r+GqnZU/aFldQyB5QdOlxsMlH9KZ4+zJfnYplz3lbC9f9ozAIlVAeoshvWTtbv7Oxp2NnK64EfnNP1pClaGEqA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api-logs": "^0.202.0",
+        "@opentelemetry/instrumentation": "^0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/otlp-exporter-base": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-exporter-base/-/otlp-exporter-base-0.202.0.tgz",
+      "integrity": "sha512-nMEOzel+pUFYuBJg2znGmHJWbmvMbdX5/RhoKNKowguMbURhz0fwik5tUKplLcUtl8wKPL1y9zPnPxeBn65N0Q==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-transformer": "0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/otlp-grpc-exporter-base": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-grpc-exporter-base/-/otlp-grpc-exporter-base-0.202.0.tgz",
+      "integrity": "sha512-yIEHVxFA5dmYif7lZbbB66qulLLhrklj6mI2X3cuGW5hYPyUErztEmbroM+6teu/XobBi9bLHid2VT4NIaRuGg==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@grpc/grpc-js": "^1.7.1",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/otlp-exporter-base": "0.202.0",
+        "@opentelemetry/otlp-transformer": "0.202.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/otlp-transformer": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/otlp-transformer/-/otlp-transformer-0.202.0.tgz",
+      "integrity": "sha512-5XO77QFzs9WkexvJQL9ksxL8oVFb/dfi9NWQSq7Sv0Efr9x3N+nb1iklP1TeVgxqJ7m1xWiC/Uv3wupiQGevMw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api-logs": "0.202.0",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-logs": "0.202.0",
+        "@opentelemetry/sdk-metrics": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1",
+        "protobufjs": "^7.3.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.3.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/resource-detector-azure": {
+      "version": "0.9.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-azure/-/resource-detector-azure-0.9.0.tgz",
+      "integrity": "sha512-5wJwAAW2vhbqIhgaRisU1y0F5mUco59F/dKgmnnnT6YNbxjrbdUZYxKF5Wl7deJoACVdL5wi/3N97GCXPEwwCQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/resources": "^2.0.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.0.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/resource-detector-gcp": {
+      "version": "0.36.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/resource-detector-gcp/-/resource-detector-gcp-0.36.0.tgz",
+      "integrity": "sha512-mWnEcg4tA+IDPrkETWo42psEsDN20dzYZSm4ZH8m8uiQALnNksVmf5C3An0GUEj5zrrxMasjSuv4zEH1gI40XQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/core": "^2.0.0",
+        "@opentelemetry/resources": "^2.0.0",
+        "@opentelemetry/semantic-conventions": "^1.27.0",
+        "gcp-metadata": "^6.0.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": "^1.0.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/sdk-logs": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-logs/-/sdk-logs-0.202.0.tgz",
+      "integrity": "sha512-pv8QiQLQzk4X909YKm0lnW4hpuQg4zHwJ4XBd5bZiXcd9urvrJNoNVKnxGHPiDVX/GiLFvr5DMYsDBQbZCypRQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api-logs": "0.202.0",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/resources": "2.0.1"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": ">=1.4.0 <1.10.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@opentelemetry/sdk-node": {
+      "version": "0.202.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/sdk-node/-/sdk-node-0.202.0.tgz",
+      "integrity": "sha512-SF9vXWVd9I5CZ69mW3GfwfLI2SHgyvEqntcg0en5y8kRp5+2PPoa3Mkgj0WzFLrbSgTw4PsXn7c7H6eSdrtV0w==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@opentelemetry/api-logs": "0.202.0",
+        "@opentelemetry/core": "2.0.1",
+        "@opentelemetry/exporter-logs-otlp-grpc": "0.202.0",
+        "@opentelemetry/exporter-logs-otlp-http": "0.202.0",
+        "@opentelemetry/exporter-logs-otlp-proto": "0.202.0",
+        "@opentelemetry/exporter-metrics-otlp-grpc": "0.202.0",
+        "@opentelemetry/exporter-metrics-otlp-http": "0.202.0",
+        "@opentelemetry/exporter-metrics-otlp-proto": "0.202.0",
+        "@opentelemetry/exporter-prometheus": "0.202.0",
+        "@opentelemetry/exporter-trace-otlp-grpc": "0.202.0",
+        "@opentelemetry/exporter-trace-otlp-http": "0.202.0",
+        "@opentelemetry/exporter-trace-otlp-proto": "0.202.0",
+        "@opentelemetry/exporter-zipkin": "2.0.1",
+        "@opentelemetry/instrumentation": "0.202.0",
+        "@opentelemetry/propagator-b3": "2.0.1",
+        "@opentelemetry/propagator-jaeger": "2.0.1",
+        "@opentelemetry/resources": "2.0.1",
+        "@opentelemetry/sdk-logs": "0.202.0",
+        "@opentelemetry/sdk-metrics": "2.0.1",
+        "@opentelemetry/sdk-trace-base": "2.0.1",
+        "@opentelemetry/sdk-trace-node": "2.0.1",
+        "@opentelemetry/semantic-conventions": "^1.29.0"
+      },
+      "engines": {
+        "node": "^18.19.0 || >=20.6.0"
+      },
+      "peerDependencies": {
+        "@opentelemetry/api": ">=1.3.0 <1.10.0"
+      }
+    },
+    "node_modules/mastra/node_modules/@sindresorhus/merge-streams": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/@sindresorhus/merge-streams/-/merge-streams-4.0.0.tgz",
+      "integrity": "sha512-tlqY9xq5ukxTUZBmoOp+m61cqwQD5pHJtFY3Mn8CA8ps6yghLH/Hw8UPdqg4OLmFW3IFlcXnQNmo/dh8HzXYIQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/mastra/node_modules/@types/pg": {
+      "version": "8.15.1",
+      "resolved": "https://registry.npmjs.org/@types/pg/-/pg-8.15.1.tgz",
+      "integrity": "sha512-YKHrkGWBX5+ivzvOQ66I0fdqsQTsvxqM0AGP2i0XrVZ9DP5VA/deEbTf7VuLPGpY7fJB9uGbkZ6KjVhuHcrTkQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*",
+        "pg-protocol": "*",
+        "pg-types": "^4.0.1"
       }
     },
     "node_modules/mastra/node_modules/commander": {
@@ -25398,23 +26211,23 @@
       }
     },
     "node_modules/mastra/node_modules/execa": {
-      "version": "9.5.2",
-      "resolved": "https://registry.npmjs.org/execa/-/execa-9.5.2.tgz",
-      "integrity": "sha512-EHlpxMCpHWSAh1dgS6bVeoLAXGnJNdR93aabr4QCGbzOM73o5XmRfM/e5FUqsw3aagP8S8XEWUWFAxnRBnAF0Q==",
+      "version": "9.6.0",
+      "resolved": "https://registry.npmjs.org/execa/-/execa-9.6.0.tgz",
+      "integrity": "sha512-jpWzZ1ZhwUmeWRhS7Qv3mhpOhLfwI+uAX4e5fOcXqwMR7EcJ0pj2kV1CVzHVMX/LphnKWD3LObjZCoJ71lKpHw==",
       "license": "MIT",
       "dependencies": {
         "@sindresorhus/merge-streams": "^4.0.0",
-        "cross-spawn": "^7.0.3",
+        "cross-spawn": "^7.0.6",
         "figures": "^6.1.0",
         "get-stream": "^9.0.0",
-        "human-signals": "^8.0.0",
+        "human-signals": "^8.0.1",
         "is-plain-obj": "^4.1.0",
         "is-stream": "^4.0.1",
         "npm-run-path": "^6.0.0",
-        "pretty-ms": "^9.0.0",
+        "pretty-ms": "^9.2.0",
         "signal-exit": "^4.1.0",
         "strip-final-newline": "^4.0.0",
-        "yoctocolors": "^2.0.0"
+        "yoctocolors": "^2.1.1"
       },
       "engines": {
         "node": "^18.19.0 || >=20.5.0"
@@ -25514,6 +26327,63 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/mastra/node_modules/pg-types": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-4.0.2.tgz",
+      "integrity": "sha512-cRL3JpS3lKMGsKaWndugWQoLOCoP+Cic8oseVcbr0qhPzYD5DWXK+RZ9LY9wxRf7RQia4SCwQlXk0q6FCPrVng==",
+      "license": "MIT",
+      "dependencies": {
+        "pg-int8": "1.0.1",
+        "pg-numeric": "1.0.2",
+        "postgres-array": "~3.0.1",
+        "postgres-bytea": "~3.0.0",
+        "postgres-date": "~2.1.0",
+        "postgres-interval": "^3.0.0",
+        "postgres-range": "^1.1.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/mastra/node_modules/postgres-array": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-3.0.4.tgz",
+      "integrity": "sha512-nAUSGfSDGOaOAEGwqsRY27GPOea7CNipJPOA7lPbdEpx5Kg3qzdP0AaWC5MlhTWV9s4hFX39nomVZ+C4tnGOJQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/mastra/node_modules/postgres-bytea": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-3.0.0.tgz",
+      "integrity": "sha512-CNd4jim9RFPkObHSjVHlVrxoVQXz7quwNFpz7RY1okNNme49+sVyiTvTRobiLV548Hx/hb1BG+iE7h9493WzFw==",
+      "license": "MIT",
+      "dependencies": {
+        "obuf": "~1.1.2"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/mastra/node_modules/postgres-date": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-2.1.0.tgz",
+      "integrity": "sha512-K7Juri8gtgXVcDfZttFKVmhglp7epKb1K4pgrkLxehjqkrgPhfG6OO8LHLkfaqkbpjNRnra018XwAr1yQFWGcA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/mastra/node_modules/postgres-interval": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-3.0.0.tgz",
+      "integrity": "sha512-BSNDnbyZCXSxgA+1f5UU2GmwhoI0aU5yMxRGO8CdFEcY2BQF9xm/7MqKnYoM1nJDk8nONNWDk9WeSmePFhQdlw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      }
+    },
     "node_modules/mastra/node_modules/signal-exit": {
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
@@ -25538,11 +26408,25 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/mastra/node_modules/strip-json-comments": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-5.0.2.tgz",
+      "integrity": "sha512-4X2FR3UwhNUE9G49aIsJW5hRRR3GXGTBTZRMfv568O60ojM8HcWjV/VxAxCDW3SUND33O6ZY66ZuRcdkj73q2g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=14.16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/matcher": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/matcher/-/matcher-3.0.0.tgz",
       "integrity": "sha512-OkeDaAZ/bQCxeFAozM55PKcKU0yJMPGifLwV4Qgjitu+5MoAfSQN4lsLJeXZ1b8w0x+/Emda6MZgXS1jvsapng==",
+      "dev": true,
       "license": "MIT",
+      "optional": true,
       "dependencies": {
         "escape-string-regexp": "^4.0.0"
       },
@@ -25915,7 +26799,6 @@
       "version": "1.4.1",
       "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
       "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">= 8"
@@ -26531,7 +27414,6 @@
       "version": "4.0.8",
       "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
       "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "braces": "^3.0.3",
@@ -26702,6 +27584,7 @@
       "version": "3.3.6",
       "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
       "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
+      "dev": true,
       "license": "ISC",
       "dependencies": {
         "yallist": "^4.0.0"
@@ -26784,12 +27667,14 @@
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
       "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+      "dev": true,
       "license": "ISC"
     },
     "node_modules/minizlib": {
       "version": "2.1.2",
       "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
       "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "minipass": "^3.0.0",
@@ -26803,12 +27688,14 @@
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
       "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+      "dev": true,
       "license": "ISC"
     },
     "node_modules/mkdirp": {
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
       "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
+      "dev": true,
       "license": "MIT",
       "bin": {
         "mkdirp": "bin/cmd.js"
@@ -26847,9 +27734,9 @@
       }
     },
     "node_modules/module-details-from-path": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/module-details-from-path/-/module-details-from-path-1.0.3.tgz",
-      "integrity": "sha512-ySViT69/76t8VhE1xXHK6Ch4NcDd26gx0MzKXLO+F7NOtnqH68d9zF94nT8ZWSxXh8ELOERsnJO/sWt1xZYw5A==",
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/module-details-from-path/-/module-details-from-path-1.0.4.tgz",
+      "integrity": "sha512-EGWKgxALGMgzvxYF1UyGTy0HXX/2vHLkw6+NvDKW2jypWbHpjQuj4UMcqQWXHERJhVGKikolT06G3bcKe4fi7w==",
       "license": "MIT"
     },
     "node_modules/mrmime": {
@@ -27230,6 +28117,7 @@
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
       "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">= 0.4"
@@ -27328,7 +28216,6 @@
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/obuf/-/obuf-1.1.2.tgz",
       "integrity": "sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==",
-      "dev": true,
       "license": "MIT"
     },
     "node_modules/on-exit-leak-free": {
@@ -27398,105 +28285,10 @@
         "regex-recursion": "^5.1.1"
       }
     },
-    "node_modules/onnxruntime-common": {
-      "version": "1.21.0",
-      "resolved": "https://registry.npmjs.org/onnxruntime-common/-/onnxruntime-common-1.21.0.tgz",
-      "integrity": "sha512-Q632iLLrtCAVOTO65dh2+mNbQir/QNTVBG3h/QdZBpns7mZ0RYbLRBgGABPbpU9351AgYy7SJf1WaeVwMrBFPQ==",
-      "license": "MIT"
-    },
-    "node_modules/onnxruntime-node": {
-      "version": "1.21.0",
-      "resolved": "https://registry.npmjs.org/onnxruntime-node/-/onnxruntime-node-1.21.0.tgz",
-      "integrity": "sha512-NeaCX6WW2L8cRCSqy3bInlo5ojjQqu2fD3D+9W5qb5irwxhEyWKXeH2vZ8W9r6VxaMPUan+4/7NDwZMtouZxEw==",
-      "hasInstallScript": true,
-      "license": "MIT",
-      "os": [
-        "win32",
-        "darwin",
-        "linux"
-      ],
-      "dependencies": {
-        "global-agent": "^3.0.0",
-        "onnxruntime-common": "1.21.0",
-        "tar": "^7.0.1"
-      }
-    },
-    "node_modules/onnxruntime-node/node_modules/chownr": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/chownr/-/chownr-3.0.0.tgz",
-      "integrity": "sha512-+IxzY9BZOQd/XuYPRmrvEVjF/nqj5kgT4kEq7VofrDoM1MxoRjEWkrCC3EtLi59TVawxTAn+orJwFQcrqEN1+g==",
-      "license": "BlueOak-1.0.0",
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/onnxruntime-node/node_modules/minipass": {
-      "version": "7.1.2",
-      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
-      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
-      "license": "ISC",
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      }
-    },
-    "node_modules/onnxruntime-node/node_modules/minizlib": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-3.0.2.tgz",
-      "integrity": "sha512-oG62iEk+CYt5Xj2YqI5Xi9xWUeZhDI8jjQmC5oThVH5JGCTgIjr7ciJDzC7MBzYd//WvR1OTmP5Q38Q8ShQtVA==",
-      "license": "MIT",
-      "dependencies": {
-        "minipass": "^7.1.2"
-      },
-      "engines": {
-        "node": ">= 18"
-      }
-    },
-    "node_modules/onnxruntime-node/node_modules/mkdirp": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-3.0.1.tgz",
-      "integrity": "sha512-+NsyUUAZDmo6YVHzL/stxSu3t9YS1iljliy3BSDrXJ/dkn1KYdmtZODGGjLcc9XLgVVpH4KshHB8XmZgMhaBXg==",
-      "license": "MIT",
-      "bin": {
-        "mkdirp": "dist/cjs/src/bin.js"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/onnxruntime-node/node_modules/tar": {
-      "version": "7.4.3",
-      "resolved": "https://registry.npmjs.org/tar/-/tar-7.4.3.tgz",
-      "integrity": "sha512-5S7Va8hKfV7W5U6g3aYxXmlPoZVAwUMy9AOKyF2fVuZa2UD3qZjg578OrLRt8PcNN1PleVaL/5/yYATNL0ICUw==",
-      "license": "ISC",
-      "dependencies": {
-        "@isaacs/fs-minipass": "^4.0.0",
-        "chownr": "^3.0.0",
-        "minipass": "^7.1.2",
-        "minizlib": "^3.0.1",
-        "mkdirp": "^3.0.1",
-        "yallist": "^5.0.0"
-      },
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/onnxruntime-node/node_modules/yallist": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/yallist/-/yallist-5.0.0.tgz",
-      "integrity": "sha512-YgvUTfwqyc7UXVMrB+SImsVYSmTS8X/tSrtdNZMImM+n7+QTriRXyXim0mBrTXNeqzVF0KWGgHPeiyViFFrNDw==",
-      "license": "BlueOak-1.0.0",
-      "engines": {
-        "node": ">=18"
-      }
-    },
     "node_modules/open": {
-      "version": "10.1.0",
-      "resolved": "https://registry.npmjs.org/open/-/open-10.1.0.tgz",
-      "integrity": "sha512-mnkeQ1qP5Ue2wd+aivTD3NHd/lZ96Lu0jgf0pwktLPtx6cTZiH7tyeGRRHs0zX0rbrahXPnXlUnbeXyaBBuIaw==",
-      "dev": true,
+      "version": "10.1.2",
+      "resolved": "https://registry.npmjs.org/open/-/open-10.1.2.tgz",
+      "integrity": "sha512-cxN6aIDPz6rm8hbebcP7vrQNhvRcveZoJU72Y7vskh4oIm+BZwBECnx5nTmrlres1Qapvx27Qo1Auukpf8PKXw==",
       "license": "MIT",
       "dependencies": {
         "default-browser": "^5.2.1",
@@ -27940,22 +28732,57 @@
       "license": "MIT"
     },
     "node_modules/pbkdf2": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/pbkdf2/-/pbkdf2-3.1.2.tgz",
-      "integrity": "sha512-iuh7L6jA7JEGu2WxDwtQP1ddOpaJNC4KlDEFfdQajSGgGPNi4OyDc2R7QnbY2bR9QjBVGwgvTdNJZoE7RaxUMA==",
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/pbkdf2/-/pbkdf2-3.1.3.tgz",
+      "integrity": "sha512-wfRLBZ0feWRhCIkoMB6ete7czJcnNnqRpcoWQBLqatqXXmelSRqfdDK4F3u9T2s2cXas/hQJcryI/4lAL+XTlA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "create-hash": "^1.1.2",
-        "create-hmac": "^1.1.4",
-        "ripemd160": "^2.0.1",
-        "safe-buffer": "^5.0.1",
-        "sha.js": "^2.4.8"
+        "create-hash": "~1.1.3",
+        "create-hmac": "^1.1.7",
+        "ripemd160": "=2.0.1",
+        "safe-buffer": "^5.2.1",
+        "sha.js": "^2.4.11",
+        "to-buffer": "^1.2.0"
       },
       "engines": {
         "node": ">=0.12"
       }
     },
+    "node_modules/pbkdf2/node_modules/create-hash": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/create-hash/-/create-hash-1.1.3.tgz",
+      "integrity": "sha512-snRpch/kwQhcdlnZKYanNF1m0RDlrCdSKQaH87w1FCFPVPNCQ/Il9QJKAX2jVBZddRdaHBMC+zXa9Gw9tmkNUA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cipher-base": "^1.0.1",
+        "inherits": "^2.0.1",
+        "ripemd160": "^2.0.0",
+        "sha.js": "^2.4.0"
+      }
+    },
+    "node_modules/pbkdf2/node_modules/hash-base": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hash-base/-/hash-base-2.0.2.tgz",
+      "integrity": "sha512-0TROgQ1/SxE6KmxWSvXHvRj90/Xo1JvZShofnYF+f6ZsGtR4eES7WfrQzPalmyagfKZCXpVnitiRebZulWsbiw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "inherits": "^2.0.1"
+      }
+    },
+    "node_modules/pbkdf2/node_modules/ripemd160": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/ripemd160/-/ripemd160-2.0.1.tgz",
+      "integrity": "sha512-J7f4wutN8mdbV08MJnXibYpCOPHR+yzy+iQ/AsjMv2j8cLavQ8VGagDFUwwTAdF8FmRKVeNpbTTEwNHCW1g94w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "hash-base": "^2.0.0",
+        "inherits": "^2.0.1"
+      }
+    },
     "node_modules/pdfjs-dist": {
       "version": "5.2.133",
       "resolved": "https://registry.npmjs.org/pdfjs-dist/-/pdfjs-dist-5.2.133.tgz",
@@ -27991,22 +28818,22 @@
       "license": "MIT"
     },
     "node_modules/pg": {
-      "version": "8.14.1",
-      "resolved": "https://registry.npmjs.org/pg/-/pg-8.14.1.tgz",
-      "integrity": "sha512-0TdbqfjwIun9Fm/r89oB7RFQ0bLgduAhiIqIXOsyKoiC/L54DbuAAzIEN/9Op0f1Po9X7iCPXGoa/Ah+2aI8Xw==",
+      "version": "8.16.2",
+      "resolved": "https://registry.npmjs.org/pg/-/pg-8.16.2.tgz",
+      "integrity": "sha512-OtLWF0mKLmpxelOt9BqVq83QV6bTfsS0XLegIeAKqKjurRnRKie1Dc1iL89MugmSLhftxw6NNCyZhm1yQFLMEQ==",
       "license": "MIT",
       "dependencies": {
-        "pg-connection-string": "^2.7.0",
-        "pg-pool": "^3.8.0",
-        "pg-protocol": "^1.8.0",
-        "pg-types": "^2.1.0",
-        "pgpass": "1.x"
+        "pg-connection-string": "^2.9.1",
+        "pg-pool": "^3.10.1",
+        "pg-protocol": "^1.10.2",
+        "pg-types": "2.2.0",
+        "pgpass": "1.0.5"
       },
       "engines": {
-        "node": ">= 8.0.0"
+        "node": ">= 16.0.0"
       },
       "optionalDependencies": {
-        "pg-cloudflare": "^1.1.1"
+        "pg-cloudflare": "^1.2.6"
       },
       "peerDependencies": {
         "pg-native": ">=3.0.1"
@@ -28018,16 +28845,16 @@
       }
     },
     "node_modules/pg-cloudflare": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.1.1.tgz",
-      "integrity": "sha512-xWPagP/4B6BgFO+EKz3JONXv3YDgvkbVrGw2mTo3D6tVDQRh1e7cqVGvyR3BE+eQgAvx1XhW/iEASj4/jCWl3Q==",
+      "version": "1.2.6",
+      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.2.6.tgz",
+      "integrity": "sha512-uxmJAnmIgmYgnSFzgOf2cqGQBzwnRYcrEgXuFjJNEkpedEIPBSEzxY7ph4uA9k1mI+l/GR0HjPNS6FKNZe8SBQ==",
       "license": "MIT",
       "optional": true
     },
     "node_modules/pg-connection-string": {
-      "version": "2.7.0",
-      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.7.0.tgz",
-      "integrity": "sha512-PI2W9mv53rXJQEOb8xNR8lH7Hr+EKa6oJa38zsK0S/ky2er16ios1wLKhZyxzD7jUReiWokc9WK5nxSnC7W1TA==",
+      "version": "2.9.1",
+      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.9.1.tgz",
+      "integrity": "sha512-nkc6NpDcvPVpZXxrreI/FOtX3XemeLl8E0qFr6F2Lrm/I8WOnaWNhIPK2Z7OHpw7gh5XJThi6j6ppgNoaT1w4w==",
       "license": "MIT"
     },
     "node_modules/pg-int8": {
@@ -28039,19 +28866,28 @@
         "node": ">=4.0.0"
       }
     },
+    "node_modules/pg-numeric": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/pg-numeric/-/pg-numeric-1.0.2.tgz",
+      "integrity": "sha512-BM/Thnrw5jm2kKLE5uJkXqqExRUY/toLHda65XgFTBTFYZyopbKjBe29Ii3RbkvlsMoFwD+tHeGaCjjv0gHlyw==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/pg-pool": {
-      "version": "3.8.0",
-      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.8.0.tgz",
-      "integrity": "sha512-VBw3jiVm6ZOdLBTIcXLNdSotb6Iy3uOCwDGFAksZCXmi10nyRvnP2v3jl4d+IsLYRyXf6o9hIm/ZtUzlByNUdw==",
+      "version": "3.10.1",
+      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.10.1.tgz",
+      "integrity": "sha512-Tu8jMlcX+9d8+QVzKIvM/uJtp07PKr82IUOYEphaWcoBhIYkoHpLXN3qO59nAI11ripznDsEzEv8nUxBVWajGg==",
       "license": "MIT",
       "peerDependencies": {
         "pg": ">=8.0"
       }
     },
     "node_modules/pg-protocol": {
-      "version": "1.8.0",
-      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.8.0.tgz",
-      "integrity": "sha512-jvuYlEkL03NRvOoyoRktBK7+qU5kOvlAwvmrH8sr3wbLrOdVWsRxQfz8mMy9sZFsqJ1hEWNfdWKI4SAmoL+j7g==",
+      "version": "1.10.2",
+      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.10.2.tgz",
+      "integrity": "sha512-Ci7jy8PbaWxfsck2dwZdERcDG2A0MG8JoQILs+uZNjABFuBuItAZCWUNz8sXRDMoui24rJw7WlXqgpMdBSN/vQ==",
       "license": "MIT"
     },
     "node_modules/pg-types": {
@@ -28089,7 +28925,6 @@
       "version": "2.3.1",
       "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
       "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8.6"
@@ -28121,9 +28956,9 @@
       }
     },
     "node_modules/pino": {
-      "version": "9.6.0",
-      "resolved": "https://registry.npmjs.org/pino/-/pino-9.6.0.tgz",
-      "integrity": "sha512-i85pKRCt4qMjZ1+L7sy2Ag4t1atFcdbEt76+7iRJn1g2BvsnRMGu9p8pivl9fs63M2kF/A0OacFZhTub+m/qMg==",
+      "version": "9.7.0",
+      "resolved": "https://registry.npmjs.org/pino/-/pino-9.7.0.tgz",
+      "integrity": "sha512-vnMCM6xZTb1WDmLvtG2lE/2p+t9hDEIvTWJsu6FejkE62vB7gDhvzrpFR4Cw2to+9JNQxVnkAKVPA1KPB98vWg==",
       "license": "MIT",
       "dependencies": {
         "atomic-sleep": "^1.0.0",
@@ -28131,7 +28966,7 @@
         "on-exit-leak-free": "^2.1.0",
         "pino-abstract-transport": "^2.0.0",
         "pino-std-serializers": "^7.0.0",
-        "process-warning": "^4.0.0",
+        "process-warning": "^5.0.0",
         "quick-format-unescaped": "^4.0.3",
         "real-require": "^0.2.0",
         "safe-stable-stringify": "^2.3.1",
@@ -28898,9 +29733,9 @@
       "license": "MIT"
     },
     "node_modules/postgres": {
-      "version": "3.4.5",
-      "resolved": "https://registry.npmjs.org/postgres/-/postgres-3.4.5.tgz",
-      "integrity": "sha512-cDWgoah1Gez9rN3H4165peY9qfpEo+SA61oQv65O3cRUE1pOEoJWwddwcqKE8XZYjbblOJlYDlLV4h67HrEVDg==",
+      "version": "3.4.7",
+      "resolved": "https://registry.npmjs.org/postgres/-/postgres-3.4.7.tgz",
+      "integrity": "sha512-Jtc2612XINuBjIl/QTWsV5UvE8UHuNblcO3vVADSrKsrc6RqGX6lOW1cEo3CM2v0XG4Nat8nI+YM7/f26VxXLw==",
       "license": "Unlicense",
       "engines": {
         "node": ">=12"
@@ -28949,10 +29784,16 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/postgres-range": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/postgres-range/-/postgres-range-1.1.4.tgz",
+      "integrity": "sha512-i/hbxIE9803Alj/6ytL7UHQxRvZkI9O4Sy+J3HGc4F4oo/2eQAjTSNJ0bfxyse3bH0nuVesCk+3IRLaMtG3H6w==",
+      "license": "MIT"
+    },
     "node_modules/posthog-node": {
-      "version": "4.12.0",
-      "resolved": "https://registry.npmjs.org/posthog-node/-/posthog-node-4.12.0.tgz",
-      "integrity": "sha512-YWib8aiPXcICAZa29ZuLyjFaJE8dbxbd+v2apoIEPbyMqOra9bKPYVI8XK15Q44vflaaCOOAtTV8A9DefZSbVQ==",
+      "version": "4.18.0",
+      "resolved": "https://registry.npmjs.org/posthog-node/-/posthog-node-4.18.0.tgz",
+      "integrity": "sha512-XROs1h+DNatgKh/AlIlCtDxWzwrKdYDb2mOs58n4yN8BkGN9ewqeQwG5ApS4/IzwCb7HPttUkOVulkYatd2PIw==",
       "license": "MIT",
       "dependencies": {
         "axios": "^1.8.2"
@@ -29089,9 +29930,9 @@
       "license": "MIT"
     },
     "node_modules/process-warning": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/process-warning/-/process-warning-4.0.1.tgz",
-      "integrity": "sha512-3c2LzQ3rY9d0hc1emcsHhfT9Jwz0cChib/QN89oME2R451w5fy3f0afAhERFZAwrbDU43wk12d0ORBpDVME50Q==",
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/process-warning/-/process-warning-5.0.0.tgz",
+      "integrity": "sha512-a39t9ApHNx2L4+HBnQKqxxHNs1r7KF+Intd8Q/g1bUh6q0WIp9voPXJ/x0j+ZL45KF1pJd9+q2jLIRMfvEshkA==",
       "funding": [
         {
           "type": "github",
@@ -29108,6 +29949,7 @@
       "version": "2.0.3",
       "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
       "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=0.4.0"
@@ -29203,9 +30045,9 @@
       }
     },
     "node_modules/protobufjs": {
-      "version": "7.5.0",
-      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.0.tgz",
-      "integrity": "sha512-Z2E/kOY1QjoMlCytmexzYfDm/w5fKAiRwpSzGtdnXW1zC88Z2yXazHHrOtwCzn+7wSxyE8PYM4rvVcMphF9sOA==",
+      "version": "7.5.3",
+      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.3.tgz",
+      "integrity": "sha512-sildjKwVqOI2kmFDiXQ6aEB0fjYTafpEvIBs8tOR8qI4spuL9OPROLVu2qZqi/xgCfsHIwVqlaF8JBjWFHnKbw==",
       "hasInstallScript": true,
       "license": "BSD-3-Clause",
       "dependencies": {
@@ -29297,7 +30139,6 @@
       "version": "2.3.1",
       "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
       "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=6"
@@ -29372,7 +30213,6 @@
       "version": "1.2.3",
       "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
       "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
-      "dev": true,
       "funding": [
         {
           "type": "github",
@@ -29869,16 +30709,16 @@
       }
     },
     "node_modules/redis": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/redis/-/redis-4.7.0.tgz",
-      "integrity": "sha512-zvmkHEAdGMn+hMRXuMBtu4Vo5P6rHQjLoHftu+lBqq8ZTA3RCVC/WzD790bkKKiNFp7d5/9PcSD19fJyyRvOdQ==",
+      "version": "4.7.1",
+      "resolved": "https://registry.npmjs.org/redis/-/redis-4.7.1.tgz",
+      "integrity": "sha512-S1bJDnqLftzHXHP8JsT5II/CtHWQrASX5K96REjWjlmWKrviSOLWmM7QnRLstAWsu1VBBV1ffV6DzCvxNP0UJQ==",
       "license": "MIT",
       "workspaces": [
         "./packages/*"
       ],
       "dependencies": {
         "@redis/bloom": "1.2.0",
-        "@redis/client": "1.6.0",
+        "@redis/client": "1.6.1",
         "@redis/graph": "1.1.1",
         "@redis/json": "1.0.7",
         "@redis/search": "1.2.0",
@@ -30415,7 +31255,6 @@
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
       "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "iojs": ">=1.0.0",
@@ -30559,7 +31398,9 @@
       "version": "2.15.4",
       "resolved": "https://registry.npmjs.org/roarr/-/roarr-2.15.4.tgz",
       "integrity": "sha512-CHhPh+UNHD2GTXNYhPWLnU8ONHdI+5DI+4EYIAOaiD63rHeYlZvyh8P+in5999TTSFgUYuKUAjzRI4mdh/p+2A==",
+      "dev": true,
       "license": "BSD-3-Clause",
+      "optional": true,
       "dependencies": {
         "boolean": "^3.0.1",
         "detect-node": "^2.0.4",
@@ -30579,12 +31420,12 @@
       "license": "Unlicense"
     },
     "node_modules/rollup": {
-      "version": "4.40.0",
-      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.40.0.tgz",
-      "integrity": "sha512-Noe455xmA96nnqH5piFtLobsGbCij7Tu+tb3c1vYjNbTkfzGqXqQXG3wJaYXkRZuQ0vEYN4bhwg7QnIrqB5B+w==",
+      "version": "4.44.1",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.44.1.tgz",
+      "integrity": "sha512-x8H8aPvD+xbl0Do8oez5f5o8eMS3trfCghc4HhLAnCkj7Vl0d1JWGs0UF/D886zLW2rOj2QymV/JcSSsw+XDNg==",
       "license": "MIT",
       "dependencies": {
-        "@types/estree": "1.0.7"
+        "@types/estree": "1.0.8"
       },
       "bin": {
         "rollup": "dist/bin/rollup"
@@ -30594,26 +31435,26 @@
         "npm": ">=8.0.0"
       },
       "optionalDependencies": {
-        "@rollup/rollup-android-arm-eabi": "4.40.0",
-        "@rollup/rollup-android-arm64": "4.40.0",
-        "@rollup/rollup-darwin-arm64": "4.40.0",
-        "@rollup/rollup-darwin-x64": "4.40.0",
-        "@rollup/rollup-freebsd-arm64": "4.40.0",
-        "@rollup/rollup-freebsd-x64": "4.40.0",
-        "@rollup/rollup-linux-arm-gnueabihf": "4.40.0",
-        "@rollup/rollup-linux-arm-musleabihf": "4.40.0",
-        "@rollup/rollup-linux-arm64-gnu": "4.40.0",
-        "@rollup/rollup-linux-arm64-musl": "4.40.0",
-        "@rollup/rollup-linux-loongarch64-gnu": "4.40.0",
-        "@rollup/rollup-linux-powerpc64le-gnu": "4.40.0",
-        "@rollup/rollup-linux-riscv64-gnu": "4.40.0",
-        "@rollup/rollup-linux-riscv64-musl": "4.40.0",
-        "@rollup/rollup-linux-s390x-gnu": "4.40.0",
-        "@rollup/rollup-linux-x64-gnu": "4.40.0",
-        "@rollup/rollup-linux-x64-musl": "4.40.0",
-        "@rollup/rollup-win32-arm64-msvc": "4.40.0",
-        "@rollup/rollup-win32-ia32-msvc": "4.40.0",
-        "@rollup/rollup-win32-x64-msvc": "4.40.0",
+        "@rollup/rollup-android-arm-eabi": "4.44.1",
+        "@rollup/rollup-android-arm64": "4.44.1",
+        "@rollup/rollup-darwin-arm64": "4.44.1",
+        "@rollup/rollup-darwin-x64": "4.44.1",
+        "@rollup/rollup-freebsd-arm64": "4.44.1",
+        "@rollup/rollup-freebsd-x64": "4.44.1",
+        "@rollup/rollup-linux-arm-gnueabihf": "4.44.1",
+        "@rollup/rollup-linux-arm-musleabihf": "4.44.1",
+        "@rollup/rollup-linux-arm64-gnu": "4.44.1",
+        "@rollup/rollup-linux-arm64-musl": "4.44.1",
+        "@rollup/rollup-linux-loongarch64-gnu": "4.44.1",
+        "@rollup/rollup-linux-powerpc64le-gnu": "4.44.1",
+        "@rollup/rollup-linux-riscv64-gnu": "4.44.1",
+        "@rollup/rollup-linux-riscv64-musl": "4.44.1",
+        "@rollup/rollup-linux-s390x-gnu": "4.44.1",
+        "@rollup/rollup-linux-x64-gnu": "4.44.1",
+        "@rollup/rollup-linux-x64-musl": "4.44.1",
+        "@rollup/rollup-win32-arm64-msvc": "4.44.1",
+        "@rollup/rollup-win32-ia32-msvc": "4.44.1",
+        "@rollup/rollup-win32-x64-msvc": "4.44.1",
         "fsevents": "~2.3.2"
       }
     },
@@ -30637,9 +31478,9 @@
       }
     },
     "node_modules/rollup-plugin-node-externals": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/rollup-plugin-node-externals/-/rollup-plugin-node-externals-8.0.0.tgz",
-      "integrity": "sha512-2HIOpWsWn5DqBoYl6iCAmB4kd5GoGbF68PR4xKR1YBPvywiqjtYvDEjHFodyqRL51iAMDITP074Zxs0OKs6F+g==",
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/rollup-plugin-node-externals/-/rollup-plugin-node-externals-8.0.1.tgz",
+      "integrity": "sha512-j6uve/BPEyHCmQuXpu5/LT5qXw69QLIi6YnFrs6F7tmGFXjkFDT0zqZMt0KaMuWSvkcxJFBklsKfYYoKKEPwyw==",
       "funding": [
         {
           "type": "patreon",
@@ -30722,7 +31563,6 @@
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/run-applescript/-/run-applescript-7.0.0.tgz",
       "integrity": "sha512-9by4Ij99JUr/MCFBUkDKLWK3G9HVXmabKz9U5MlIAIuvuzkiOicRYs8XJLxX+xahD+mLiiCYDqF9dKAgtzKP1A==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=18"
@@ -30735,7 +31575,6 @@
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
       "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
-      "dev": true,
       "funding": [
         {
           "type": "github",
@@ -31094,7 +31933,9 @@
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/semver-compare/-/semver-compare-1.0.0.tgz",
       "integrity": "sha512-YM3/ITh2MJ5MtzaM429anh+x2jiLVjqILF4m4oyQB18W7Ggea7BfqdH/wGMK7dDiMghv/6WG7znWMwUDzJiXow==",
-      "license": "MIT"
+      "dev": true,
+      "license": "MIT",
+      "optional": true
     },
     "node_modules/send": {
       "version": "0.19.0",
@@ -31160,7 +32001,9 @@
       "version": "7.0.1",
       "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
       "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
+      "dev": true,
       "license": "MIT",
+      "optional": true,
       "dependencies": {
         "type-fest": "^0.13.1"
       },
@@ -31175,7 +32018,9 @@
       "version": "0.13.1",
       "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
       "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
+      "dev": true,
       "license": "(MIT OR CC0-1.0)",
+      "optional": true,
       "engines": {
         "node": ">=10"
       },
@@ -31417,11 +32262,13 @@
       }
     },
     "node_modules/shell-quote": {
-      "version": "1.8.1",
-      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.8.1.tgz",
-      "integrity": "sha512-6j1W9l1iAs/4xYBI1SYOVZyFcCis9b4KCLQ8fgAGG07QvzaRLVVRQvAy85yNmmZSjYjg4MWh4gNvlPujU/5LpA==",
-      "dev": true,
+      "version": "1.8.3",
+      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.8.3.tgz",
+      "integrity": "sha512-ObmnIF4hXNg1BqhnHmgbDETF8dLPCggZWBjkQfhZpbszZnYur5DUljTcCHii5LC3J5E0yeO/1LIMyH+UvHQgyw==",
       "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
@@ -31769,6 +32616,7 @@
       "version": "1.1.3",
       "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
       "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==",
+      "dev": true,
       "license": "BSD-3-Clause"
     },
     "node_modules/ssri": {
@@ -32430,6 +33278,7 @@
       "version": "6.2.1",
       "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
       "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
+      "dev": true,
       "license": "ISC",
       "dependencies": {
         "chownr": "^2.0.0",
@@ -32465,6 +33314,7 @@
       "version": "5.0.0",
       "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
       "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
+      "dev": true,
       "license": "ISC",
       "engines": {
         "node": ">=8"
@@ -32474,6 +33324,7 @@
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
       "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+      "dev": true,
       "license": "ISC"
     },
     "node_modules/tcp-port-used": {
@@ -32623,9 +33474,9 @@
       }
     },
     "node_modules/test-exclude/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -32775,11 +33626,25 @@
       "dev": true,
       "license": "BSD-3-Clause"
     },
+    "node_modules/to-buffer": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/to-buffer/-/to-buffer-1.2.1.tgz",
+      "integrity": "sha512-tB82LpAIWjhLYbqjx3X4zEeHN6M8CiuOEy2JY8SEQVdYRe3CCHOFaqrBW1doLDrfpWhplcW7BL+bO3/6S3pcDQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "isarray": "^2.0.5",
+        "safe-buffer": "^5.2.1",
+        "typed-array-buffer": "^1.0.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
     "node_modules/to-regex-range": {
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
       "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "is-number": "^7.0.0"
@@ -33389,6 +34254,12 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/uncrypto": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/uncrypto/-/uncrypto-0.1.3.tgz",
+      "integrity": "sha512-Ql87qFHB3s/De2ClA9e0gsnS6zXG27SkTiSJwjCc9MebbfapQfuPzumMIUMi38ezPZVNFcHI9sUIepeQfw8J8Q==",
+      "license": "MIT"
+    },
     "node_modules/undici-types": {
       "version": "6.21.0",
       "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
@@ -33707,7 +34578,6 @@
       "version": "4.4.1",
       "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
       "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
-      "dev": true,
       "license": "BSD-2-Clause",
       "dependencies": {
         "punycode": "^2.1.0"
@@ -34736,9 +35606,9 @@
       "license": "MIT"
     },
     "node_modules/xstate": {
-      "version": "5.19.2",
-      "resolved": "https://registry.npmjs.org/xstate/-/xstate-5.19.2.tgz",
-      "integrity": "sha512-B8fL2aP0ogn5aviAXFzI5oZseAMqN00fg/TeDa3ZtatyDcViYLIfuQl4y8qmHCiKZgGEzmnTyNtNQL9oeJE2gw==",
+      "version": "5.20.0",
+      "resolved": "https://registry.npmjs.org/xstate/-/xstate-5.20.0.tgz",
+      "integrity": "sha512-lFQ0fLwVa0OMZnjNP8zUkt2fwIS85ZBNPvxE41APVYhYj0++aTssgmsnTAiBHdKYbgnd6+L8DRTZ9jPZAFPuyw==",
       "license": "MIT",
       "funding": {
         "type": "opencollective",
@@ -34853,9 +35723,9 @@
       }
     },
     "node_modules/yocto-spinner": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/yocto-spinner/-/yocto-spinner-0.1.2.tgz",
-      "integrity": "sha512-VfmLIh/ZSZOJnVRQZc/dvpPP90lWL4G0bmxQMP0+U/2vKBA8GSpcBuWv17y7F+CZItRuO97HN1wdbb4p10uhOg==",
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/yocto-spinner/-/yocto-spinner-0.2.3.tgz",
+      "integrity": "sha512-sqBChb33loEnkoXte1bLg45bEBsOP9N1kzQh5JZNKj/0rik4zAPTNSAVPj3uQAdc6slYJ0Ksc403G2XgxsJQFQ==",
       "license": "MIT",
       "dependencies": {
         "yoctocolors": "^2.1.1"
@@ -34919,14 +35789,23 @@
       }
     },
     "node_modules/zod": {
-      "version": "3.24.3",
-      "resolved": "https://registry.npmjs.org/zod/-/zod-3.24.3.tgz",
-      "integrity": "sha512-HhY1oqzWCQWuUqvBFnsyrtZRhyPeR7SUGv+C4+MsisMuVfSPx8HpwWqH8tRahSlt6M3PiFAcoeFhZAqIXTxoSg==",
+      "version": "3.25.67",
+      "resolved": "https://registry.npmjs.org/zod/-/zod-3.25.67.tgz",
+      "integrity": "sha512-idA2YXwpCdqUSKRCACDE6ItZD9TZzy3OZMtpfLoh6oPR47lipysRrJfjzMqFxQ3uJuUPyUeWe1r9vLH33xO/Qw==",
       "license": "MIT",
       "funding": {
         "url": "https://github.com/sponsors/colinhacks"
       }
     },
+    "node_modules/zod-from-json-schema": {
+      "version": "0.0.5",
+      "resolved": "https://registry.npmjs.org/zod-from-json-schema/-/zod-from-json-schema-0.0.5.tgz",
+      "integrity": "sha512-zYEoo86M1qpA1Pq6329oSyHLS785z/mTwfr9V1Xf/ZLhuuBGaMlDGu/pDVGVUe4H4oa1EFgWZT53DP0U3oT9CQ==",
+      "license": "MIT",
+      "dependencies": {
+        "zod": "^3.24.2"
+      }
+    },
     "node_modules/zod-to-json-schema": {
       "version": "3.24.5",
       "resolved": "https://registry.npmjs.org/zod-to-json-schema/-/zod-to-json-schema-3.24.5.tgz",
diff --git a/package.json b/package.json
index f1d591e11..fb83c9027 100644
--- a/package.json
+++ b/package.json
@@ -87,14 +87,15 @@
     ]
   },
   "dependencies": {
-    "@ai-sdk/openai-compatible": "^0.2.11",
+    "@ai-sdk/openai-compatible": "^0.2.14",
     "@electron/notarize": "^3.0.0",
     "@emotion/react": "^11.14.0",
     "@emotion/styled": "^11.14.0",
     "@gitbeaker/rest": "^42.5.0",
-    "@mastra/core": "^0.8.3",
-    "@mastra/mcp": "^0.4.0",
-    "@mastra/memory": "^0.2.10",
+    "@mastra/core": "^0.10.8",
+    "@mastra/libsql": "^0.11.0",
+    "@mastra/mcp": "^0.10.5",
+    "@mastra/memory": "^0.11.0",
     "@mui/icons-material": "^7.0.2",
     "@mui/material": "^7.0.2",
     "@radix-ui/react-dialog": "^1.1.10",
@@ -114,9 +115,8 @@
     "electron-log": "^5.3.2",
     "electron-store": "^10.0.1",
     "electron-updater": "^6.3.9",
-    "js-tiktoken": "^1.0.20",
     "lucide-react": "^0.503.0",
-    "mastra": "^0.4.9",
+    "mastra": "^0.10.8",
     "mermaid": "^11.6.0",
     "pdfjs-dist": "^5.2.133",
     "postcss": "^8.5.3",
diff --git a/src/__tests__/integration/SettingsModal.test.tsx b/src/__tests__/integration/SettingsModal.test.tsx
index 50f872bcf..1ea1b938f 100644
--- a/src/__tests__/integration/SettingsModal.test.tsx
+++ b/src/__tests__/integration/SettingsModal.test.tsx
@@ -41,7 +41,7 @@ describe('SettingsModal Component', () => {
 
     // 設定値が取得されるまで待機
     await waitFor(() => {
-      expect(window.electron.store.get).toHaveBeenCalledTimes(8);
+      expect(window.electron.store.get).toHaveBeenCalledTimes(7);
     });
 
     // データベース設定
@@ -94,7 +94,7 @@ describe('SettingsModal Component', () => {
     );
 
     await waitFor(() => {
-      expect(window.electron.store.get).toHaveBeenCalledTimes(8);
+      expect(window.electron.store.get).toHaveBeenCalledTimes(7);
     });
 
     // 全ての入力フィールドが有効になるまで待機
@@ -210,7 +210,7 @@ describe('SettingsModal Component', () => {
     });
 
     // エージェントの再初期化が呼ばれることを確認
-    expect(window.electron.agent.reinitialize).toHaveBeenCalled();
+    expect(window.electron.settings.reinitialize).toHaveBeenCalled();
 
     // コールバック関数が呼ばれることを確認
     expect(defaultProps.onSettingsUpdated).toHaveBeenCalled();
@@ -236,7 +236,7 @@ describe('SettingsModal Component', () => {
     );
 
     await waitFor(() => {
-      expect(window.electron.store.get).toHaveBeenCalledTimes(8);
+      expect(window.electron.store.get).toHaveBeenCalledTimes(7);
     });
 
     // 必須フィールドを空にする
@@ -312,7 +312,7 @@ describe('SettingsModal Component', () => {
     );
 
     await waitFor(() => {
-      expect(window.electron.store.get).toHaveBeenCalledTimes(8);
+      expect(window.electron.store.get).toHaveBeenCalledTimes(7);
     });
 
     const mcpConfigInput = screen.getByLabelText('MCPサーバー設定（JSON）');
@@ -439,7 +439,7 @@ describe('SettingsModal Component', () => {
     );
 
     await waitFor(() => {
-      expect(window.electron.store.get).toHaveBeenCalledTimes(8);
+      expect(window.electron.store.get).toHaveBeenCalledTimes(7);
     });
 
     // APIキーを更新してバリデーション完了を待機
@@ -486,7 +486,7 @@ describe('SettingsModal Component', () => {
     );
 
     await waitFor(() => {
-      expect(window.electron.store.get).toHaveBeenCalledTimes(8);
+      expect(window.electron.store.get).toHaveBeenCalledTimes(7);
     });
 
     // APIキーを更新
@@ -541,12 +541,6 @@ describe('SettingsModal Component', () => {
       expect(input).toBeDisabled();
     });
 
-    // スイッチが無効化されていることを確認
-    const switches = screen.getAllByRole('checkbox');
-    switches.forEach((switchEl) => {
-      expect(switchEl).toBeDisabled();
-    });
-
     // データがロードされるまで待機
     await waitFor(
       () => {
@@ -581,7 +575,7 @@ describe('SettingsModal Component', () => {
     );
 
     await waitFor(() => {
-      expect(window.electron.store.get).toHaveBeenCalledTimes(8);
+      expect(window.electron.store.get).toHaveBeenCalledTimes(7);
     });
 
     // APIキーを更新
diff --git a/src/__tests__/integration/Sidebar.test.tsx b/src/__tests__/integration/Sidebar.test.tsx
index cfdcf256f..5bf87ed08 100644
--- a/src/__tests__/integration/Sidebar.test.tsx
+++ b/src/__tests__/integration/Sidebar.test.tsx
@@ -3,6 +3,7 @@
  */
 import React from 'react';
 import { render, screen, waitFor, act } from '@testing-library/react';
+import { MemoryRouter, Route, Routes } from 'react-router-dom';
 import userEvent from '@testing-library/user-event';
 import '@testing-library/jest-dom';
 import { v4 as uuidv4 } from 'uuid';
@@ -12,6 +13,9 @@ import type { ChatRoom, ProcessStatus } from '../../main/types';
 import type { Source } from '../../db/schema';
 import { StoreSchema as Settings } from '../../main/store';
 import { createMockElectronWithOptions } from '../../__tests__/test-utils/mockElectronHandler';
+import ChatRoomList from '../../renderer/components/sidebar/ChatRoomList';
+import ReviewHistoryList from '../../renderer/components/review/ReviewHistoryList';
+import { ROUTES } from '../../main/types';
 
 // uuidv4をモック化
 jest.mock('uuid', () => ({
@@ -101,12 +105,41 @@ describe('Sidebar Component', () => {
     onSettingsUpdated: jest.fn(),
   };
 
+  const renderAtPath = (initialPath: string) => {
+    render(
+      // MemoryRouter でテスト用の履歴を用意
+      <MemoryRouter initialEntries={[initialPath]}>
+        <Sidebar
+          onReloadSources={defaultProps.onReloadSources}
+          showSnackbar={defaultProps.showSnackbar}
+        >
+          <Routes>
+            <Route
+              path={ROUTES.CHAT}
+              element={
+                <ChatRoomList onRoomSelect={defaultProps.onRoomSelect} />
+              }
+            />
+            <Route
+              path={ROUTES.REVIEW}
+              element={
+                <ReviewHistoryList
+                  onReviewHistorySelect={defaultProps.onRoomSelect}
+                />
+              }
+            />
+          </Routes>
+        </Sidebar>
+      </MemoryRouter>,
+    );
+  };
+
   // テスト1: 正常にサイドバーとチャットルーム一覧が表示されること
   test('正常にサイドバーとチャットルーム一覧が表示されること', async () => {
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // New Chatボタンが表示されることを確認
-    expect(screen.getByText('New Chat')).toBeInTheDocument();
+    expect(screen.getByText('新規チャット')).toBeInTheDocument();
 
     // チャットルーム一覧が表示されるまで待機
     await waitFor(() => {
@@ -129,7 +162,7 @@ describe('Sidebar Component', () => {
         }),
     );
 
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // ローディング表示を確認
     expect(screen.getByText('チャット履歴取得中')).toBeInTheDocument();
@@ -149,7 +182,7 @@ describe('Sidebar Component', () => {
     // 空の配列を返すようにモックを設定
     window.electron.chat.getRooms = jest.fn().mockResolvedValue([]);
 
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // 空の状態のメッセージが表示されることを確認
     await waitFor(() => {
@@ -160,10 +193,17 @@ describe('Sidebar Component', () => {
   // テスト4: 新規チャットルームの作成
   test('新規チャットルームの作成', async () => {
     const user = userEvent.setup();
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
+    screen.debug(undefined, 100000);
+
+    // チャットルーム一覧が表示されるまで待機
+    await waitFor(() => {
+      expect(screen.getByText('Chat Room 1')).toBeInTheDocument();
+      expect(screen.getByText('Chat Room 2')).toBeInTheDocument();
+    });
 
     // New Chatボタンをクリック
-    await user.click(screen.getByText('New Chat'));
+    await user.click(screen.getByText('新規チャット'));
 
     // uuidv4が呼ばれることを確認
     expect(uuidv4).toHaveBeenCalled();
@@ -175,7 +215,7 @@ describe('Sidebar Component', () => {
   // テスト5: チャットルームの選択
   test('チャットルームの選択', async () => {
     const user = userEvent.setup();
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // チャットルーム一覧が表示されるまで待機
     await waitFor(() => {
@@ -192,7 +232,7 @@ describe('Sidebar Component', () => {
   // テスト6: チャットルームの削除
   test('チャットルームの削除の際に正しく指定したチャットルームが削除されること（チャットルームのソート確認も含む）', async () => {
     const user = userEvent.setup();
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // チャットルーム一覧が表示されるまで待機
     await waitFor(() => {
@@ -232,7 +272,7 @@ describe('Sidebar Component', () => {
       .mockRejectedValue(new Error('Failed to delete chat room'));
 
     const user = userEvent.setup();
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // チャットルーム一覧が表示されるまで待機
     await waitFor(() => {
@@ -257,7 +297,7 @@ describe('Sidebar Component', () => {
   // テスト8: フッターのソース一覧モーダル表示
   test('フッターのソース一覧モーダル表示', async () => {
     const user = userEvent.setup();
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // ソース一覧ボタンをクリック
     await user.click(screen.getByTestId('document-list-button'));
@@ -269,7 +309,7 @@ describe('Sidebar Component', () => {
   // テスト9: フッターの設定モーダル表示
   test('フッターの設定モーダル表示', async () => {
     const user = userEvent.setup();
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // 設定ボタンをクリック
     await user.click(screen.getByTestId('settings-button'));
@@ -283,7 +323,7 @@ describe('Sidebar Component', () => {
     // jestのタイマーを使用
     jest.useFakeTimers();
 
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // 初回の取得を確認
     await waitFor(() => {
@@ -312,7 +352,7 @@ describe('Sidebar Component', () => {
       .fn()
       .mockRejectedValue(new Error('Failed to fetch chat rooms'));
 
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // エラーログが出力されることを確認
     await waitFor(() => {
@@ -327,7 +367,7 @@ describe('Sidebar Component', () => {
 
   // テスト12: 設定エラーバッジの初期表示
   test('設定エラーバッジの初期表示', async () => {
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // 設定エラーがない場合、バッジは非表示
     const settingsButton = screen.getByTestId('settings-button');
@@ -342,7 +382,7 @@ describe('Sidebar Component', () => {
   // テスト13: 設定保存後のバッジ表示更新
   test('設定保存後のバッジ表示更新', async () => {
     const user = userEvent.setup({ delay: null });
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // 設定ボタンをクリックしてモーダルを開く
     await user.click(screen.getByTestId('settings-button'));
@@ -382,7 +422,7 @@ describe('Sidebar Component', () => {
     // タイマーのモック
     jest.useFakeTimers();
 
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // 進める
     act(() => {
@@ -463,28 +503,14 @@ describe('Sidebar Component', () => {
     ];
 
     // ソース取得のモックを設定（最初は処理中、その後完了）
-    let isFirstCall = true;
     window.electron.source.getSources = jest.fn().mockImplementation(() => {
-      if (isFirstCall) {
-        isFirstCall = false;
-        return Promise.resolve({
+      return Promise.resolve({
           success: true,
           sources: processingMockSources,
         });
-      }
-      return Promise.resolve({
-        success: true,
-        sources: completedMockSources,
-      });
     });
 
-    const user = userEvent.setup();
-    render(<Sidebar {...defaultProps} />);
-
-    // 進める
-    act(() => {
-      jest.advanceTimersByTime(5000);
-    });
+    renderAtPath(ROUTES.CHAT);
 
     // ソースデータが取得されるまで待機
     await waitFor(() => {
@@ -498,11 +524,23 @@ describe('Sidebar Component', () => {
       ).toBeInTheDocument();
     });
 
-    // 5秒待機してソースデータが更新されることを確認
+    window.electron.source.getSources = jest.fn().mockImplementation(() => {
+      return Promise.resolve({
+        success: true,
+        sources: completedMockSources,
+      });
+    });
+
+    // 進める
     act(() => {
       jest.advanceTimersByTime(5000);
     });
 
+    // ソースデータが取得されるまで待機
+    await waitFor(() => {
+      expect(window.electron.source.getSources).toHaveBeenCalled();
+    });
+
     // バッジに有効なソース数（2）が表示されることを確認
     await waitFor(() => {
       const button = screen.getByTestId('document-list-button');
@@ -539,7 +577,7 @@ describe('Sidebar Component', () => {
       sources: largeMockSources,
     });
 
-    render(<Sidebar {...defaultProps} />);
+    renderAtPath(ROUTES.CHAT);
 
     // タイマーを進める
     act(() => {
diff --git a/src/__tests__/integration/SourceListModal.test.tsx b/src/__tests__/integration/SourceListModal.test.tsx
index 5a2efa897..451c045c9 100644
--- a/src/__tests__/integration/SourceListModal.test.tsx
+++ b/src/__tests__/integration/SourceListModal.test.tsx
@@ -15,6 +15,8 @@ import SourceListModal from '../../renderer/components/common/SourceListModal';
 import type { Source } from '../../db/schema';
 import { ProcessStatus } from '../../main/types';
 import { createMockElectronWithOptions } from '../../__tests__/test-utils/mockElectronHandler';
+import { kMaxLength } from 'buffer';
+import { truncate } from 'node:original-fs';
 
 // テスト用のモックデータ
 const mockSources: Source[] = [
@@ -128,7 +130,7 @@ describe('SourceListModal Component', () => {
     // 全選択チェックボックスをスキップして、各ソースのチェックボックスを確認
     expect(checkboxes[1]).toBeChecked(); // source1 (isEnabled: 1)
     expect(checkboxes[2]).not.toBeChecked(); // source2 (isEnabled: 0)
-    expect(checkboxes[3]).toBeChecked(); // source3 (isEnabled: 1)
+    expect(checkboxes[3]).not.toBeChecked(); // source3 (isEnabled: 1) completedでない場合はチェックされない
   });
 
   // テスト2: ソースのリロードボタンが機能すること
@@ -372,14 +374,15 @@ describe('SourceListModal Component', () => {
         'ソース状態の更新に失敗しました:',
         expect.any(Error),
       );
-      expect(consoleSpy).toHaveBeenCalledTimes(mockSources.length);
+      expect(consoleSpy).toHaveBeenCalledTimes(1);
     });
 
     // チェックボックスが再度有効化されることを確認
     await waitFor(() => {
-      for (const checkbox of sourceCheckboxes) {
-        expect(checkbox).toBeEnabled();
-      }
+      expect(sourceCheckboxes[0]).toBeEnabled(); // source1 (isEnabled: 1)
+      expect(sourceCheckboxes[1]).toBeEnabled(); // source1 (isEnabled: 1)
+      expect(sourceCheckboxes[2]).toBeDisabled(); // source2 (isEnabled: 0)
+      expect(sourceCheckboxes[3]).toBeDisabled(); // source3 (isEnabled: 1) completedでない場合はチェックされない
     });
 
     consoleSpy.mockRestore();
@@ -422,11 +425,6 @@ describe('SourceListModal Component', () => {
     const checkboxes = screen.getAllByRole('checkbox');
     const allCheckbox = checkboxes[0]; // 全選択チェックボックス
 
-    // クリック前の状態を確保（一つでもチェックが外れているか）
-    const someUnchecked = Array.from(checkboxes)
-      .slice(1)
-      .some((cb) => !(cb as HTMLInputElement).checked);
-
     // クリックしてチェックボックスが無効化されることを確認
     fireEvent.click(allCheckbox);
     expect(allCheckbox).toBeDisabled();
@@ -436,20 +434,35 @@ describe('SourceListModal Component', () => {
       expect(checkbox).toBeDisabled();
     }
 
-    // 各ソースのupdateSourceEnabledが呼ばれることを確認
-    mockSources.forEach((source) => {
-      expect(window.electron.source.updateSourceEnabled).toHaveBeenCalledWith(
-        source.id,
-        someUnchecked, // 一つでもチェックが外れていれば true (全選択)
-      );
-    });
+    // id:1が無効化される（statusがcompletedのみが対象となり、今回はid:1のみ有効から無効になる）
+    expect(window.electron.source.updateSourceEnabled).toHaveBeenCalledWith(
+      1,
+      false,
+    );
+    expect(window.electron.source.updateSourceEnabled).not.toHaveBeenCalledWith(
+      2,
+      true,
+    );
+    expect(window.electron.source.updateSourceEnabled).not.toHaveBeenCalledWith(
+      3,
+      true,
+    );
+    expect(window.electron.source.updateSourceEnabled).not.toHaveBeenCalledWith(
+      2,
+      false,
+    );
+    expect(window.electron.source.updateSourceEnabled).not.toHaveBeenCalledWith(
+      3,
+      false,
+    );
 
     // 処理完了後にチェックボックスが再度有効化されることを確認
+    // チェックボックスが再度有効化されることを確認
     await waitFor(() => {
-      expect(allCheckbox).toBeEnabled();
-      checkboxes.slice(1).forEach((checkbox) => {
-        expect(checkbox).toBeEnabled();
-      });
+      expect(checkboxes[0]).toBeEnabled(); // source1 (isEnabled: 1)
+      expect(checkboxes[1]).toBeEnabled(); // source1 (isEnabled: 1)
+      expect(checkboxes[2]).toBeDisabled(); // source2 (isEnabled: 0)
+      expect(checkboxes[3]).toBeDisabled(); // source3 (isEnabled: 1) completedでない場合はチェックされない
     });
   });
 
@@ -559,11 +572,11 @@ describe('SourceListModal Component', () => {
         `${mockSources[0].path}の有効化/無効化に失敗しました: Update failed`,
         'error',
       );
-      expect(props.showSnackbar).toHaveBeenCalledWith(
+      expect(props.showSnackbar).not.toHaveBeenCalledWith(
         `${mockSources[1].path}の有効化/無効化に失敗しました: Update failed`,
         'error',
       );
-      expect(props.showSnackbar).toHaveBeenCalledWith(
+      expect(props.showSnackbar).not.toHaveBeenCalledWith(
         `${mockSources[2].path}の有効化/無効化に失敗しました: Update failed`,
         'error',
       );
@@ -571,7 +584,7 @@ describe('SourceListModal Component', () => {
 
     // チェックボックスの状態が元に戻ることを確認
     await waitFor(() => {
-      expect(checkboxes[1]).not.toBeChecked();
+      expect(checkboxes[1]).toBeChecked();
       expect(checkboxes[2]).not.toBeChecked();
       expect(checkboxes[3]).not.toBeChecked();
     });
diff --git a/src/__tests__/integration/chat.test.tsx b/src/__tests__/integration/chat.test.tsx
index 56ce37919..06cdf3be3 100644
--- a/src/__tests__/integration/chat.test.tsx
+++ b/src/__tests__/integration/chat.test.tsx
@@ -283,7 +283,7 @@ describe('ChatArea Component', () => {
 
     // ガイダンステキストが表示されることを確認
     expect(
-      screen.getByText('チャットルームを選択してください'),
+      screen.getByText('新規チャットを開始または既存のチャットを選択してください'),
     ).toBeInTheDocument();
   });
 
@@ -437,7 +437,7 @@ describe('ChatArea Component', () => {
   test('エージェント起動関連エラーの表示が正しいこと', async () => {
     window.electron = createMockElectronWithOptions({
       chatRooms: mockChatRooms,
-      agentStatus: {
+      settingsStatus: {
         state: 'error',
         messages: [
           {
@@ -583,7 +583,7 @@ describe('ChatArea Component', () => {
     const user = userEvent.setup();
     window.electron = createMockElectronWithOptions({
       chatRooms: mockChatRooms,
-      agentStatus: {
+      settingsStatus: {
         state: 'error',
         messages: [
           {
@@ -615,16 +615,16 @@ describe('ChatArea Component', () => {
       await user.click(closeButton);
     });
 
-    // window.electron.agent.removeMessageが呼ばれることを確認
-    expect(window.electron.agent.removeMessage).toHaveBeenCalledWith('1');
+    // window.electron.settings.removeMessageが呼ばれることを確認
+    expect(window.electron.settings.removeMessage).toHaveBeenCalledWith('1');
   });
 
   // テスト11: エージェント初期化中の表示が正しいこと
   test('エージェント初期化中の表示が正しいこと', async () => {
     window.electron = createMockElectronWithOptions({
       chatRooms: mockChatRooms,
-      agentStatus: {
-        state: 'initializing',
+      settingsStatus: {
+        state: 'saving',
       },
     });
 
diff --git a/src/__tests__/test-utils/mockElectronHandler.ts b/src/__tests__/test-utils/mockElectronHandler.ts
index 209714cea..8887a78f6 100644
--- a/src/__tests__/test-utils/mockElectronHandler.ts
+++ b/src/__tests__/test-utils/mockElectronHandler.ts
@@ -1,7 +1,7 @@
 import type { ElectronHandler } from '../../main/preload';
 import type { StoreSchema as Settings } from '../../main/store';
 import type { Source } from '../../db/schema';
-import type { ChatRoom, AgentBootStatus } from '../../main/types';
+import type { ChatRoom, SettingsSavingStatus } from '../../main/types';
 
 /**
  * Mockメソッドの型を定義
@@ -63,7 +63,7 @@ export interface MockOptions {
   chatRooms?: ChatRoom[];
   sourceEnabled?: boolean;
   fsAccess?: boolean;
-  agentStatus?: Partial<AgentBootStatus>;
+  settingsStatus?: Partial<SettingsSavingStatus>;
 }
 
 /**
@@ -77,9 +77,9 @@ export const createMockElectronWithOptions = (
     : createDefaultMockSettings();
 
   const mockHandlers = {
-    agent: {
-      getStatus: jest.fn().mockReturnValue(options.agentStatus || {
-        state: 'ready',
+    settings: {
+      getStatus: jest.fn().mockReturnValue(options.settingsStatus || {
+        state: 'done',
         messages: [],
         tools: {
           redmine: false,
diff --git a/src/db/repository/sourceRepository.ts b/src/db/repository/sourceRepository.ts
index 8c0489dbd..e055c712a 100644
--- a/src/db/repository/sourceRepository.ts
+++ b/src/db/repository/sourceRepository.ts
@@ -1,7 +1,8 @@
-import { eq, inArray } from 'drizzle-orm';
+import { eq, inArray, and } from 'drizzle-orm';
 import getDb from '..';
-import type { Source } from '../schema';
-import { sources } from '../schema';
+import type { Source, InsertSource, InsertTopic } from '../schema';
+import { sources, topics } from '../schema';
+import { ProcessStatus } from '../../main/types';
 
 export interface SourceRepository {
   /**
@@ -16,6 +17,82 @@ export interface SourceRepository {
    * @returns ソースの配列
    */
   getSourcesByIds(sourceIds: number[]): Promise<Source[]>;
+
+  /**
+   * 同期処理中のソースを登録または更新する
+   * @param source 登録または更新するソース情報
+   * @returns 登録または更新されたソース情報
+   */
+  initializeProcessingSource(source: InsertSource): Promise<Source>;
+
+  /**
+   * ソース情報を更新する
+   * @param param 更新するソース情報
+   * @param param.id ソースのID
+   * @param param.title ソースのタイトル
+   * @param param.summary ソースの要約
+   * @param param.error エラー情報（nullの場合はエラーなし）
+   * @returns 更新されたソース情報
+   */
+  updateSource(param: {
+    id: number;
+    title: string;
+    summary: string;
+    error: string | null;
+  }): Promise<void>;
+
+  /**
+   * 同期処理情報を更新する
+   */
+  updateProcessingStatus(param: {
+    id: number;
+    status: ProcessStatus;
+    error?: string | null;
+  }): Promise<void>;
+
+  /**
+   * 全ソースの情報をMDのリスト形式で取得する
+   * @param sourceId ソースのID
+   * @returns ソース情報
+   */
+  getSourceListMarkdown(): Promise<string | null>;
+
+  /**
+   * トピックを登録する
+   */
+  registerTopic(topicList: InsertTopic[]): Promise<void>;
+
+  /**
+   * パスで指定されたソースを削除する
+   * @param path ソースのパス
+   * @returns 削除が成功した場合はtrue、存在しない場合はfalse
+   */
+  deleteSourceByPath(path: string): Promise<boolean>;
+
+  /**
+   * ソースをステータスに基づいて複数取得する
+   * @param status ソースのステータス
+   * @returns ソースの配列
+   */
+  getSouorceInStatus(status: ProcessStatus[]): Promise<Source[]>;
+
+  /**
+   * ソースをステータスとパスに基づいて複数取得する
+   */
+  getSourceByPathInStatus(
+    path: string,
+    status: ProcessStatus[],
+  ): Promise<Source[]>;
+
+  /**
+   * ソースを全て取得する
+   */
+  getAllSources(): Promise<Source[]>;
+
+  /**
+   * ソーステーブルへのインサート
+   */
+  insertSources(sourceList: InsertSource[]): Promise<void>;
 }
 
 let sourceRepository: SourceRepository | null = null;
@@ -35,6 +112,177 @@ class DrizzleSourceRepository implements SourceRepository {
     const db = await getDb();
     return db.select().from(sources).where(inArray(sources.id, sourceIds));
   }
+
+  /**
+   * ソースを更新する
+   * @param param ソース情報
+   * @param param.path ソースのパス
+   * @param param.title ソースのタイトル
+   * @param param.summary ソースの要約
+   * @param param.error エラー情報（nullの場合はエラーなし）
+   * @returns
+   */
+  async updateSource(param: {
+    id: number;
+    title: string;
+    summary: string;
+    error: string | null;
+  }): Promise<void> {
+    const db = await getDb();
+    await db
+      .update(sources)
+      .set({
+        title: param.title,
+        summary: param.summary,
+        error: param.error,
+      })
+      .where(eq(sources.id, param.id));
+  }
+
+  /**
+   * 同期処理中のソースを登録または更新する
+   * @param source 登録または更新するソース情報
+   * @returns 登録または更新されたソース情報
+   */
+  async initializeProcessingSource(source: InsertSource): Promise<Source> {
+    const db = await getDb();
+    const [result] = await db
+      .insert(sources)
+      .values({
+        path: source.path,
+        title: '', // 一時的な空の値
+        summary: '', // 一時的な空の値
+        status: 'processing' as const,
+      })
+      .onConflictDoUpdate({
+        target: sources.path,
+        set: {
+          status: 'processing' as const,
+          error: null,
+        },
+      })
+      .returning();
+    return result;
+  }
+
+  /**
+   * データベースからソース情報を取得する
+   */
+  async getSourceListMarkdown(): Promise<string | null> {
+    const db = await getDb();
+    // 有効なソースのみ取得
+    const sourceList = await db
+      .select()
+      .from(sources)
+      .where(and(eq(sources.isEnabled, 1), eq(sources.status, 'completed')))
+      .orderBy(sources.title);
+
+    // 各ソースのトピックを取得
+    const sourceWithTopicList = await Promise.all(
+      sourceList.map(async (source) => {
+        const topicsList = await db
+          .select()
+          .from(topics)
+          .where(eq(topics.sourceId, source.id))
+          .orderBy(topics.name);
+
+        return {
+          id: source.id,
+          title: source.title,
+          path: source.path,
+          summary: source.summary,
+          topics: topicsList.map((topic) => ({
+            name: topic.name,
+            summary: topic.summary,
+          })),
+        };
+      }),
+    );
+
+    if (sourceWithTopicList.length === 0) {
+      return null; // ソースが存在しない場合はnullを返す
+    }
+
+    return sourceWithTopicList
+      .map(
+        (sourceWithTopic) => `- ID:${sourceWithTopic.id}
+      - Title:${sourceWithTopic.title}
+      - Path:${sourceWithTopic.path}
+      - Summary:${sourceWithTopic.summary}
+      - Topics:
+    ${sourceWithTopic.topics.map((topic) => `      - Topic: ${topic.name} Summary: ${topic.summary}`).join('\n')}
+  `,
+      )
+      .join('\n');
+  }
+
+  async updateProcessingStatus(param: {
+    id: number;
+    status: ProcessStatus;
+    error?: string | null;
+  }): Promise<void> {
+    const db = await getDb();
+    await db
+      .update(sources)
+      .set({
+        status: param.status,
+        error: param.error || null,
+      })
+      .where(eq(sources.id, param.id));
+  }
+
+  /**
+   * トピックを登録する
+   * @param topic 登録するトピック情報
+   * @returns 登録されたトピック情報
+   */
+  async registerTopic(topicList: InsertTopic[]): Promise<void> {
+    const db = await getDb();
+    await db.insert(topics).values(topicList);
+  }
+
+  async deleteSourceByPath(path: string): Promise<boolean> {
+    const db = await getDb();
+    const [source] = await db
+      .select()
+      .from(sources)
+      .where(eq(sources.path, path))
+      .limit(1);
+
+    if (source) {
+      await db.delete(sources).where(eq(sources.id, source.id));
+      await db.delete(topics).where(eq(topics.sourceId, source.id));
+    }
+    return !!source; // 存在した場合はtrue、存在しなかった場合はfalseを返す
+  }
+
+  async getSouorceInStatus(status: ProcessStatus[]): Promise<Source[]> {
+    const db = await getDb();
+    return db.select().from(sources).where(inArray(sources.status, status));
+  }
+
+  async getSourceByPathInStatus(
+    path: string,
+    status: ProcessStatus[],
+  ): Promise<Source[]> {
+    const db = await getDb();
+    const sourcesInStatus = await db
+      .select()
+      .from(sources)
+      .where(and(eq(sources.path, path), inArray(sources.status, status)));
+
+    return sourcesInStatus;
+  }
+
+  async getAllSources(): Promise<Source[]> {
+    const db = await getDb();
+    return db.select().from(sources);
+  }
+
+  async insertSources(sourceList: InsertSource[]): Promise<void> {
+    const db = await getDb();
+    await db.insert(sources).values(sourceList);
+  }
 }
 
 export function getSourceRepository(): SourceRepository {
diff --git a/src/main/main.ts b/src/main/main.ts
index 1e09f988e..c5500ae15 100644
--- a/src/main/main.ts
+++ b/src/main/main.ts
@@ -13,41 +13,31 @@ import fs from 'fs/promises';
 import { app, BrowserWindow, shell, ipcMain, crashReporter } from 'electron';
 import { autoUpdater } from 'electron-updater';
 import log from 'electron-log';
-import { Mastra } from '@mastra/core';
-import { createLogger } from '@mastra/core/logger';
-import {
-  createDataStream,
-  CoreUserMessage,
-  UserContent,
-  APICallError,
-} from 'ai';
+import { createDataStream, APICallError } from 'ai';
 import { eq } from 'drizzle-orm';
 import {
   ReadableStream,
   WritableStream,
   TransformStream,
 } from 'node:stream/web';
-import { sourceRegistrationWorkflow } from '../mastra/workflows/sourceRegistration';
-import { checklistExtractionWorkflow } from '../mastra/workflows/sourceReview/checklistExtraction';
-import { reviewExecutionWorkflow } from '../mastra/workflows/sourceReview/reviewExecution';
+import { getStore } from './store';
 import type { Source } from '../db/schema';
 import {
   IpcChannels,
   IpcResponsePayloadMap,
   IpcRequestPayloadMap,
 } from './types/ipc';
-import { AgentBootStatus, AgentBootMessage, AgentToolStatus } from './types';
-import { getOrchestratorSystemPrompt } from '../mastra/agents/prompts';
 import { sources } from '../db/schema';
 import getDb from '../db';
 import SourceRegistrationManager from '../mastra/workflows/sourceRegistrationManager';
 import SourceReviewManager from '../mastra/workflows/sourceReview/sourceReviewManager';
-import { getOrchestrator } from '../mastra/agents/orchestrator';
 import MenuBuilder from './menu';
 import { resolveHtmlPath } from './utils/util';
-import { initStore, getStore } from './store';
-import { RedmineBaseInfo } from '../mastra/tools/redmine';
-import { ReviewService } from './service/review/reviewService';
+import { ReviewService } from './service/reviewService';
+import { SettingsService } from './service/settingsService';
+import { ChatService } from './service/chatService';
+import { mastra } from '../mastra';
+import { judgeFinishReason } from '../mastra/agents/lib';
 
 class AppUpdater {
   constructor() {
@@ -63,120 +53,29 @@ class AppUpdater {
 (globalThis as any).WritableStream = WritableStream;
 (globalThis as any).TransformStream = TransformStream;
 
-// Mastraのインスタンスと状態を保持する変数
-let mastraInstance: Mastra | null = null;
-// スレッドごとのAbortControllerを管理するMap
-const threadAbortControllers = new Map<string, AbortController>();
-const mastraStatus: AgentBootStatus = {
-  state: 'initializing',
-  messages: [],
-  tools: {
-    document: false,
-    redmine: false,
-    gitlab: false,
-    mcp: false,
-  },
-};
-// Redmineの基本情報を保持する変数
-let redmineBaseInfo: RedmineBaseInfo | null = null;
+// ユーザは利用者のみなのでIDは固定
+const userId = 'user';
 
-/**
- * Mastraの状態を変更し、レンダラーに通知する
- */
-const updateMastraStatus = (
-  newState: AgentBootStatus['state'],
-  message?: AgentBootMessage,
-  tools?: AgentToolStatus,
-) => {
-  mastraStatus.state = newState;
-
-  if (message) {
-    const newMessage: AgentBootMessage = {
-      id: crypto.randomUUID(),
-      type: message.type,
-      content: message.content,
-    };
-    mastraStatus.messages?.push(newMessage);
-  }
-
-  if (tools) {
-    mastraStatus.tools = tools;
-  }
-};
+const settingsService = new SettingsService();
 
-const initMastraStatus = () => {
-  mastraStatus.state = 'initializing';
-  mastraStatus.messages = [];
-};
+const MastraMemory = mastra.getAgent('orchestrator').getMemory();
+if (!MastraMemory) {
+  throw new Error('メモリが初期化されていません');
+}
+const chatService = new ChatService(MastraMemory);
 
-/**
- * メッセージIDを指定して削除する
- */
-const removeMessage = (messageId: string) => {
-  mastraStatus.messages = mastraStatus.messages?.filter(
-    (msg) => msg.id !== messageId,
-  );
-};
+const reviewService = new ReviewService();
 
 /**
- * Mastraインスタンスを取得する関数
- * @returns Mastraインスタンス
+ * 設定の初期化を行う関数
  */
-export const getMastra = (): Mastra => {
-  if (!mastraInstance) {
-    throw new Error('Mastraインスタンスが初期化されていません');
-  }
-  return mastraInstance;
-};
-
-/**
- * Mastraの初期化を行う関数
- * 環境に応じたログレベルを設定し、オーケストレーターエージェントを登録する
- */
-const initializeMastra = async (): Promise<void> => {
+const initializeSettings = async (): Promise<void> => {
   try {
-    initMastraStatus();
-
-    // 開発環境か本番環境かによってログレベルを切り替え
-    const logLevel = process.env.NODE_ENV === 'production' ? 'info' : 'debug';
-
-    // ロガーの作成
-    const logger = createLogger({
-      name: 'MyPedia',
-      level: logLevel,
-    });
-
-    // オーケストレーターエージェントを取得
-    const { agent, alertMessages, toolStatus, redmineInfo } =
-      await getOrchestrator();
-
-    // Redmineの基本情報を保存
-    redmineBaseInfo = redmineInfo;
-
-    // 起動メッセージを更新
-    alertMessages.forEach((message) => {
-      mastraStatus.messages?.push(message);
-    });
-
-    if (!agent) {
-      throw new Error('オーケストレーターエージェントの取得に失敗しました');
-    }
-
-    // Mastraインスタンスを初期化
-    mastraInstance = new Mastra({
-      agents: { orchestratorAgent: agent },
-      workflows: {
-        sourceRegistrationWorkflow,
-        checklistExtractionWorkflow,
-        reviewExecutionWorkflow,
-      },
-      logger,
-    });
-
-    console.log('Mastraインスタンスの初期化が完了しました');
-    updateMastraStatus('ready', undefined, toolStatus);
+    // 設定の初期化
+    await settingsService.initializeSettings();
+    console.log('設定の初期化が完了しました');
   } catch (error) {
-    console.error('Mastraの初期化に失敗しました:', error);
+    console.error('設定の初期化に失敗しました:', error);
   }
 };
 
@@ -212,26 +111,26 @@ const setupStoreHandlers = () => {
 };
 
 /**
- * Mastraの状態を取得するIPCハンドラ
+ * 設定状態を取得するIPCハンドラ
  */
-// Mastraの状態取得ハンドラ
+// 設定状態取得ハンドラ
 ipcMain.handle(
-  IpcChannels.GET_AGENT_STATUS,
-  (): IpcResponsePayloadMap[typeof IpcChannels.GET_AGENT_STATUS] =>
-    mastraStatus,
+  IpcChannels.GET_SETTINGS_STATUS,
+  (): IpcResponsePayloadMap[typeof IpcChannels.GET_SETTINGS_STATUS] =>
+    settingsService.getStatus(),
 );
 
 // メッセージ削除ハンドラ
 ipcMain.handle(
-  IpcChannels.REMOVE_AGENT_MESSAGE,
+  IpcChannels.REMOVE_SETTINGS_MESSAGE,
   (
     _,
     messageId: string,
-  ): IpcResponsePayloadMap[typeof IpcChannels.REMOVE_AGENT_MESSAGE] => {
+  ): IpcResponsePayloadMap[typeof IpcChannels.REMOVE_SETTINGS_MESSAGE] => {
     let success = false;
     let error: string | undefined;
     try {
-      removeMessage(messageId);
+      settingsService.removeMessage(messageId);
       success = true;
     } catch (err) {
       success = false;
@@ -241,15 +140,15 @@ ipcMain.handle(
   },
 );
 
-// Mastraの設定更新ハンドラ
+// 設定更新ハンドラ
 ipcMain.handle(
-  IpcChannels.REINITIALIZE_AGENT,
+  IpcChannels.REINITIALIZE_SETTINGS,
   async (): Promise<
-    IpcResponsePayloadMap[typeof IpcChannels.REINITIALIZE_AGENT]
+    IpcResponsePayloadMap[typeof IpcChannels.REINITIALIZE_SETTINGS]
   > => {
     try {
-      // 設定変更時はエージェントのみ再初期化
-      await initializeMastra();
+      // 設定変更時はツールを初期化
+      await settingsService.initializeSettings();
       return { success: true };
     } catch (error) {
       return {
@@ -274,13 +173,11 @@ const setupChatHandlers = () => {
       let success = false;
       let error: string | undefined;
       try {
-        const controller = threadAbortControllers.get(threadId);
-        if (controller) {
-          controller.abort();
-          threadAbortControllers.delete(threadId);
-          console.log(`Thread ${threadId} の生成を中断しました`);
-          success = true;
-        }
+        const controller = chatService.getOrCreateAbortController(threadId);
+        controller.abort();
+        chatService.deleteAbortController(threadId);
+        console.log(`Thread ${threadId} の生成を中断しました`);
+        success = true;
       } catch (err) {
         console.error('スレッドの中断中にエラーが発生:', err);
         success = false;
@@ -292,84 +189,22 @@ const setupChatHandlers = () => {
 
   // チャットメッセージ編集履歴ハンドラ
   ipcMain.handle(
-    IpcChannels.CHAT_EDIT_HISTORY,
+    IpcChannels.CHAT_DELETE_MESSAGES_BEFORE_SPECIFIC_ID,
     async (
       _,
       {
         threadId,
-        oldContent,
-        oldCreatedAt,
-      }: IpcRequestPayloadMap[typeof IpcChannels.CHAT_EDIT_HISTORY],
-    ): Promise<IpcResponsePayloadMap[typeof IpcChannels.CHAT_EDIT_HISTORY]> => {
+        messageId,
+      }: IpcRequestPayloadMap[typeof IpcChannels.CHAT_DELETE_MESSAGES_BEFORE_SPECIFIC_ID],
+    ): Promise<
+      IpcResponsePayloadMap[typeof IpcChannels.CHAT_DELETE_MESSAGES_BEFORE_SPECIFIC_ID]
+    > => {
       try {
-        const mastra = getMastra();
-        const orchestratorAgent = mastra.getAgent('orchestratorAgent');
-        const memory = orchestratorAgent.getMemory();
-
+        const memory = mastra.getAgent('orchestrator').getMemory();
         if (!memory) {
           throw new Error('メモリインスタンスが初期化されていません');
         }
-
-        // メッセージ履歴を取得
-        const messages = await memory.storage.getMessages({
-          threadId,
-        });
-
-        // oldContentと一致するメッセージのリストを取得
-        const targetMessages = messages.filter((msg) => {
-          if (msg.role !== 'user') {
-            return false; // ユーザーメッセージのみを対象とする
-          }
-          if (typeof msg.content === 'string') {
-            return msg.content === oldContent; // 文字列の場合は直接比較
-          }
-          return (
-            // textパートは一つのみのはずなので、最初のtextパートを取得して比較
-            msg.content.filter((c) => c.type === 'text')[0].text === oldContent
-          );
-        });
-
-        if (targetMessages.length === 0) {
-          throw new Error('指定されたメッセージが見つかりません');
-        }
-
-        // 取得したメッセージリストからoldCreatedAtと最も近いメッセージを検索
-        const targetMessage = targetMessages.reduce((closest, current) => {
-          const currentDate = new Date(current.createdAt);
-          const closestDate = new Date(closest.createdAt);
-          return Math.abs(currentDate.getTime() - oldCreatedAt.getTime()) <
-            Math.abs(closestDate.getTime() - oldCreatedAt.getTime())
-            ? current
-            : closest;
-        });
-
-        // messageIdに対応するメッセージを検索
-        const targetMessageIndex = messages.findIndex(
-          (msg) => msg.id === targetMessage.id,
-        );
-        if (targetMessageIndex === -1) {
-          throw new Error(`メッセージID ${targetMessage.id} が見つかりません`);
-        }
-        // 最初のメッセージからmessageIdに対応するメッセージまでの履歴を取得
-        const history = messages.slice(0, targetMessageIndex);
-        console.log('new history:', history);
-
-        // スレッドを削除
-        await memory.storage.deleteThread({ threadId });
-
-        // スレッドを再作成
-        // await memory.createThread({
-        //   resourceId: 'user',
-        //   title: '',
-        //   threadId,
-        // });
-
-        // 取得した履歴をメモリに保存
-        await memory.saveMessages({
-          messages: history,
-          memoryConfig: undefined,
-        });
-
+        chatService.deleteMessagesBeforeSpecificId(threadId, messageId);
         return { success: true };
       } catch (error) {
         console.error('メッセージ履歴削除中にエラーが発生:', error);
@@ -390,12 +225,15 @@ const setupChatHandlers = () => {
     ): Promise<IpcResponsePayloadMap[typeof IpcChannels.CHAT_SEND_MESSAGE]> => {
       try {
         // 新しいAbortControllerを作成
-        const controller = new AbortController();
-        threadAbortControllers.set(roomId, controller);
+        const controller = chatService.getOrCreateAbortController(roomId);
+
+        const orchestratorAgent = mastra.getAgent('orchestrator');
+
+        // runtimeContextを作成
+        const runtimeContext = await settingsService.getRuntimeContext();
 
-        // Mastraインスタンスからオーケストレーターエージェントを取得
-        const mastra = getMastra();
-        const orchestratorAgent = mastra.getAgent('orchestratorAgent');
+        // 利用ツールの取得
+        const toolsets = await settingsService.getToolsets();
 
         // メッセージをストリーミングで送信
         // const stream = await orchestratorAgent.stream(content, {
@@ -441,75 +279,45 @@ const setupChatHandlers = () => {
               value: 'processing',
             });
             // streaming falseの場合のメッセージ送信処理
-            const res = await orchestratorAgent.generate(
-              messages.map((msg) => {
-                const content: UserContent = msg
-                  .parts!.filter((part) => part.type === 'text')
-                  .map((part) => {
-                    return { type: 'text', text: part.text };
-                  });
-                if (
-                  msg.experimental_attachments &&
-                  msg.experimental_attachments.length > 0
-                ) {
-                  content.push(
-                    // @ts-ignore
-                    ...msg.experimental_attachments.map((att) => {
-                      return {
-                        type: 'image',
-                        image: att.url,
-                        mimeType: att.contentType,
-                      };
-                    }),
-                  );
-                }
-                return {
-                  role: 'user',
-                  content,
-                } as CoreUserMessage;
-              }),
-              {
-                resourceId: 'user', // 固定のリソースID
-                instructions: await getOrchestratorSystemPrompt(
-                  mastraStatus.tools ?? {
-                    document: false,
-                    redmine: false,
-                    gitlab: false,
-                    mcp: false,
-                  },
-                  redmineBaseInfo,
-                ),
-                threadId: roomId, // チャットルームIDをスレッドIDとして使用
-                maxSteps: 30, // ツールの利用上限
-                abortSignal: controller.signal, // 中断シグナルを設定
-                onStepFinish: (stepResult) => {
-                  // https://ai-sdk.dev/docs/ai-sdk-ui/stream-protocol
-                  // 上記を参考にai-sdkのストリームプロトコルに従ってメッセージを送信
-                  writer.write(`0:${JSON.stringify(stepResult.text)}\n`);
-                  stepResult.toolCalls.forEach((toolCall) => {
-                    writer.write(`9:${JSON.stringify(toolCall)}\n`);
-                  });
-                  stepResult.toolResults.forEach((toolResult) => {
-                    writer.write(`a:${JSON.stringify(toolResult)}\n`);
-                  });
-                  writer.write(
-                    `e:${JSON.stringify({ finishReason: stepResult.finishReason, ...stepResult.usage })}\n`,
-                  );
-                },
+            const res = await orchestratorAgent.generate(messages, {
+              runtimeContext,
+              toolsets,
+              resourceId: 'user', // 固定のリソースID
+              threadId: roomId, // チャットルームIDをスレッドIDとして使用
+              maxSteps: 30, // ツールの利用上限
+              abortSignal: controller.signal, // 中断シグナルを設定
+              onStepFinish: (stepResult) => {
+                // https://ai-sdk.dev/docs/ai-sdk-ui/stream-protocol
+                // 上記を参考にai-sdkのストリームプロトコルに従ってメッセージを送信
+                writer.write(`0:${JSON.stringify(stepResult.text)}\n`);
+                stepResult.toolCalls.forEach((toolCall) => {
+                  writer.write(`9:${JSON.stringify(toolCall)}\n`);
+                });
+                stepResult.toolResults.forEach((toolResult) => {
+                  writer.write(`a:${JSON.stringify(toolResult)}\n`);
+                });
+                writer.write(
+                  `e:${JSON.stringify({ finishReason: stepResult.finishReason, ...stepResult.usage })}\n`,
+                );
               },
-            );
+            });
+            const { success, reason } = judgeFinishReason(res.finishReason);
+            if (!success) {
+              // 正常終了でない場合はエラーを投げる
+              throw new Error(reason);
+            }
             writer.write(
               `d:${JSON.stringify({ finishReason: res.finishReason, ...res.usage })}\n`,
             );
             event.sender.send(IpcChannels.CHAT_COMPLETE);
             // 処理が完了したらAbortControllerを削除
-            threadAbortControllers.delete(roomId);
+            chatService.deleteAbortController(roomId);
           },
           onError(error) {
             // エラーが発生したときの処理
             console.error('テキスト生成中にエラーが発生:', error);
             // エラー時もAbortControllerを削除
-            threadAbortControllers.delete(roomId);
+            chatService.deleteAbortController(roomId);
             let errorDetail: string;
             if (APICallError.isInstance(error)) {
               // APIコールエラーの場合はresponseBodyの内容を取得
@@ -537,7 +345,7 @@ const setupChatHandlers = () => {
       } catch (error) {
         console.error('メッセージ送信中にエラーが発生:', error);
         // エラー時もAbortControllerを削除
-        threadAbortControllers.delete(roomId);
+        chatService.deleteAbortController(roomId);
         event.sender.send(IpcChannels.CHAT_ERROR, {
           message: `${(error as Error).message}`,
         });
@@ -553,22 +361,7 @@ const setupChatHandlers = () => {
       IpcResponsePayloadMap[typeof IpcChannels.CHAT_GET_ROOMS]
     > => {
       try {
-        const mastra = getMastra();
-        // マスターエージェントからメモリを取得（オーケストレーターエージェントを使用）
-        const orchestratorAgent = mastra.getAgent('orchestratorAgent');
-
-        // メモリのスレッド一覧を取得
-        const threads = await orchestratorAgent
-          .getMemory()
-          ?.getThreadsByResourceId({
-            resourceId: 'user',
-          });
-
-        if (!threads) {
-          return [];
-        }
-
-        // スレッドをチャットルーム形式に変換
+        const threads = await chatService.getThreadList(userId);
         return threads;
       } catch (error) {
         console.error('チャットルーム一覧の取得中にエラーが発生:', error);
@@ -585,53 +378,7 @@ const setupChatHandlers = () => {
       threadId: string,
     ): Promise<IpcResponsePayloadMap[typeof IpcChannels.CHAT_GET_MESSAGES]> => {
       try {
-        const mastra = getMastra();
-        const orchestratorAgent = mastra.getAgent('orchestratorAgent');
-
-        // スレッド内のメッセージを取得
-        const result = await orchestratorAgent.getMemory()?.query({ threadId });
-
-        if (!result) {
-          return [];
-        }
-
-        const { uiMessages, messages } = result;
-        // messages内の要素でroleが'user'の場合に、contentのtypeが'image'のものがあれば、画像データを対応するuiMessagesにも付与する
-        messages.forEach((message) => {
-          if (message.role === 'user' && typeof message.content !== 'string') {
-            const imageAttachments = message.content
-              .filter(
-                (part) =>
-                  part.type === 'image' && typeof part.image === 'string',
-              )
-              .map((part) => {
-                return {
-                  // @ts-ignore partはImagePart型であることが保証されている
-                  url: part.image,
-                  // @ts-ignore partはImagePart型であることが保証されている
-                  contentType: part.mimeType,
-                };
-              });
-            if (imageAttachments.length > 0) {
-              // uiMessagesの対応するメッセージに画像データを追加
-              const uiMessage = uiMessages.find(
-                // @ts-ignore CoreMessageもダンプしてみるとidが存在する
-                (uiMsg) => uiMsg.id === message.id,
-              );
-              if (uiMessage) {
-                uiMessage.experimental_attachments = imageAttachments;
-              } else {
-                console.warn(
-                  // @ts-ignore
-                  `対応するUIメッセージが見つかりません: ${message.id}`,
-                );
-              }
-            }
-          }
-        });
-
-        // メッセージをチャットメッセージ形式に変換
-        return uiMessages;
+        return chatService.getThreadMessages(threadId);
       } catch (error) {
         console.error('チャットメッセージの取得中にエラーが発生:', error);
         return [];
@@ -647,11 +394,7 @@ const setupChatHandlers = () => {
       threadId: string,
     ): Promise<IpcResponsePayloadMap[typeof IpcChannels.CHAT_DELETE_ROOM]> => {
       try {
-        const mastra = getMastra();
-        const orchestratorAgent = mastra.getAgent('orchestratorAgent');
-
-        // スレッドを削除
-        await orchestratorAgent.getMemory()?.deleteThread(threadId);
+        await chatService.deleteThread(threadId);
 
         return { success: true };
       } catch (error) {
@@ -671,18 +414,7 @@ const setupChatHandlers = () => {
       IpcResponsePayloadMap[typeof IpcChannels.CHAT_CREATE_THREAD]
     > => {
       try {
-        const mastra = getMastra();
-        const orchestratorAgent = mastra.getAgent('orchestratorAgent');
-        const memory = orchestratorAgent.getMemory();
-
-        if (!memory) {
-          throw new Error('メモリインスタンスが初期化されていません');
-        }
-        await memory.createThread({
-          resourceId: 'user',
-          title,
-          threadId: roomId,
-        });
+        await chatService.createThread(roomId, title, userId);
 
         return { success: true };
       } catch (error) {
@@ -794,8 +526,7 @@ const setupReviewHandlers = () => {
       IpcResponsePayloadMap[typeof IpcChannels.REVIEW_GET_HISTORIES]
     > => {
       try {
-        const service = ReviewService.getInstance();
-        const histories = await service.getReviewHistories();
+        const histories = await reviewService.getReviewHistories();
 
         return {
           success: true,
@@ -821,9 +552,8 @@ const setupReviewHandlers = () => {
       IpcResponsePayloadMap[typeof IpcChannels.REVIEW_GET_HISTORY_DETAIL]
     > => {
       try {
-        const service = ReviewService.getInstance();
         const checklistResults =
-          await service.getReviewHistoryDetail(historyId);
+          await reviewService.getReviewHistoryDetail(historyId);
 
         return {
           success: true,
@@ -849,8 +579,7 @@ const setupReviewHandlers = () => {
       IpcResponsePayloadMap[typeof IpcChannels.REVIEW_DELETE_HISTORY]
     > => {
       try {
-        const service = ReviewService.getInstance();
-        await service.deleteReviewHistory(historyId);
+        await reviewService.deleteReviewHistory(historyId);
 
         return { success: true };
       } catch (error) {
@@ -909,8 +638,7 @@ const setupReviewHandlers = () => {
       IpcResponsePayloadMap[typeof IpcChannels.REVIEW_UPDATE_CHECKLIST]
     > => {
       try {
-        const service = ReviewService.getInstance();
-        const result = await service.updateChecklists(
+        const result = await reviewService.updateChecklists(
           reviewHistoryId,
           checklistEdits,
         );
@@ -1084,8 +812,7 @@ crashReporter.start({
 
 const initialize = async () => {
   createWindow();
-  await initStore();
-  await initializeMastra(); // Mastraの初期化を追加
+  await initializeSettings();
   setupStoreHandlers();
   setupChatHandlers();
   setupFsHandlers();
diff --git a/src/main/preload.ts b/src/main/preload.ts
index 89ca4c296..19b3eef1f 100644
--- a/src/main/preload.ts
+++ b/src/main/preload.ts
@@ -11,24 +11,26 @@ import {
 export type Channels = (typeof IpcChannels)[keyof typeof IpcChannels];
 
 const electronHandler = {
-  agent: {
-    // Mastraの状態を取得する
+  settings: {
+    // 設定の状態を取得する
     getStatus: (): Promise<
-      IpcResponsePayload<typeof IpcChannels.GET_AGENT_STATUS>
+      IpcResponsePayload<typeof IpcChannels.GET_SETTINGS_STATUS>
     > => {
-      return ipcRenderer.invoke(IpcChannels.GET_AGENT_STATUS);
+      return ipcRenderer.invoke(IpcChannels.GET_SETTINGS_STATUS);
     },
-    // Mastraを再初期化する
+    // 設定を再初期化する
     reinitialize: async (): Promise<
-      IpcResponsePayload<typeof IpcChannels.REINITIALIZE_AGENT>
+      IpcResponsePayload<typeof IpcChannels.REINITIALIZE_SETTINGS>
     > => {
-      return ipcRenderer.invoke(IpcChannels.REINITIALIZE_AGENT);
+      return ipcRenderer.invoke(IpcChannels.REINITIALIZE_SETTINGS);
     },
-    // Mastraのメッセージを削除する
+    // 設定のメッセージを削除する
     removeMessage: async (
       messageId: string,
-    ): Promise<IpcResponsePayload<typeof IpcChannels.REINITIALIZE_AGENT>> => {
-      return ipcRenderer.invoke(IpcChannels.REMOVE_AGENT_MESSAGE, messageId);
+    ): Promise<
+      IpcResponsePayload<typeof IpcChannels.REINITIALIZE_SETTINGS>
+    > => {
+      return ipcRenderer.invoke(IpcChannels.REMOVE_SETTINGS_MESSAGE, messageId);
     },
   },
   fs: {
@@ -88,10 +90,19 @@ const electronHandler = {
       return ipcRenderer.invoke(IpcChannels.CHAT_ABORT_REQUEST, threadId);
     },
     // メッセージ編集時に該当indexまでの履歴を削除する
-    editHistory: async (
-      params: IpcRequestPayload<typeof IpcChannels.CHAT_EDIT_HISTORY>,
-    ): Promise<IpcResponsePayload<typeof IpcChannels.CHAT_EDIT_HISTORY>> => {
-      return ipcRenderer.invoke(IpcChannels.CHAT_EDIT_HISTORY, params);
+    deleteMessagesBeforeSpecificId: async (
+      params: IpcRequestPayload<
+        typeof IpcChannels.CHAT_DELETE_MESSAGES_BEFORE_SPECIFIC_ID
+      >,
+    ): Promise<
+      IpcResponsePayload<
+        typeof IpcChannels.CHAT_DELETE_MESSAGES_BEFORE_SPECIFIC_ID
+      >
+    > => {
+      return ipcRenderer.invoke(
+        IpcChannels.CHAT_DELETE_MESSAGES_BEFORE_SPECIFIC_ID,
+        params,
+      );
     },
     // AIの応答を取得する（ストリーミング）
     onStream: (
diff --git a/src/main/service/chatService.ts b/src/main/service/chatService.ts
new file mode 100644
index 000000000..8d590e3c6
--- /dev/null
+++ b/src/main/service/chatService.ts
@@ -0,0 +1,133 @@
+import { MastraMemory, StorageThreadType } from '@mastra/core';
+import { UIMessage } from 'ai';
+
+export class ChatService {
+  // スレッドごとのAbortControllerを管理するMap
+  private threadAbortControllers = new Map<string, AbortController>();
+
+  // mastraメモリのインスタンスを保持（チャットメッセージが保存されてあるメモリ）
+  private memory: MastraMemory;
+
+  constructor(memory: MastraMemory) {
+    this.memory = memory;
+  }
+
+  /**
+   * スレッド一覧を取得する
+   */
+  public async getThreadList(userId: string): Promise<StorageThreadType[]> {
+    // メモリからスレッド一覧を取得
+    const threads = await this.memory.getThreadsByResourceId({
+      resourceId: userId,
+    });
+    return threads;
+  }
+
+  /**
+   * スレッドを削除する
+   * @param threadId スレッドID
+   */
+  public async deleteThread(threadId: string): Promise<void> {
+    // スレッドのAbortControllerを削除
+    this.deleteAbortController(threadId);
+
+    // メモリからスレッドを削除
+    await this.memory.storage.deleteThread({ threadId });
+  }
+
+  /**
+   * スレッドを作成する
+   * @param threadId スレッドID
+   * @param title スレッドのタイトル
+   * @returns 作成したスレッド
+   */
+  public async createThread(
+    threadId: string,
+    title: string,
+    userId: string,
+  ): Promise<void> {
+    await this.memory.createThread({
+      resourceId: userId,
+      title,
+      threadId,
+    });
+  }
+
+  /**
+   * スレッドのAbortControllerを取得または作成する
+   * @param threadId スレッドID
+   * @returns AbortController
+   */
+  public getOrCreateAbortController(threadId: string): AbortController {
+    if (!this.threadAbortControllers.has(threadId)) {
+      const controller = new AbortController();
+      this.threadAbortControllers.set(threadId, controller);
+    }
+    return this.threadAbortControllers.get(threadId)!;
+  }
+
+  /**
+   * スレッドのAbortControllerを削除する
+   * @param threadId スレッドID
+   */
+  public deleteAbortController(threadId: string): void {
+    if (this.threadAbortControllers.has(threadId)) {
+      this.threadAbortControllers.get(threadId)?.abort();
+      this.threadAbortControllers.delete(threadId);
+    }
+  }
+
+  /**
+   * スレッド内の指定されたメッセージ以降の全てのメッセージを削除する
+   * @param threadId スレッドID
+   * @param oldContent 削除するメッセージのコンテンツ
+   * @param oldCreatedAt 削除するメッセージの作成日時
+   */
+  public async deleteMessagesBeforeSpecificId(
+    threadId: string,
+    messageId: string,
+  ): Promise<void> {
+    // メッセージ履歴を取得
+    const messages = await this.memory.storage.getMessages({
+      threadId,
+    });
+
+    // messageIdに対応するメッセージを検索
+    const targetMessageIndex = messages.findIndex(
+      (msg) => msg.id === messageId,
+    );
+    if (targetMessageIndex === -1) {
+      throw new Error(`メッセージが見つかりません`);
+    }
+    // 最初のメッセージからmessageIdに対応するメッセージまでの履歴を取得
+    const history = messages.slice(0, targetMessageIndex);
+
+    // スレッドを削除
+    await this.memory.storage.deleteThread({ threadId });
+
+    // スレッドを再作成
+    // await this.memory.createThread({
+    //   resourceId: 'user',
+    //   title: '',
+    //   threadId,
+    // });
+
+    // 取得した履歴をメモリに保存
+    await this.memory.saveMessages({
+      messages: history,
+      memoryConfig: undefined,
+    });
+  }
+
+  /**
+   * スレッドのメッセージを取得する
+   * @param threadId スレッドID
+   */
+  public async getThreadMessages(threadId: string): Promise<UIMessage[]> {
+    const result = await this.memory.query({ threadId });
+    if (!result) {
+      return [];
+    }
+    return result.uiMessages;
+  }
+}
diff --git a/src/main/service/review/reviewService.ts b/src/main/service/reviewService.ts
similarity index 78%
rename from src/main/service/review/reviewService.ts
rename to src/main/service/reviewService.ts
index bad0141b2..f859eb49c 100644
--- a/src/main/service/review/reviewService.ts
+++ b/src/main/service/reviewService.ts
@@ -1,26 +1,10 @@
-import { getReviewRepository } from '../../../db/repository/reviewRepository';
-import { ReviewChecklistEdit } from '../../types';
-import { generateReviewTitle } from '../../../mastra/workflows/sourceReview/lib';
+import { getReviewRepository } from '../../db/repository/reviewRepository';
+import { ReviewChecklistEdit } from '../types';
+import { generateReviewTitle } from '../../mastra/workflows/sourceReview/lib';
 
 export class ReviewService {
-  /**
-   * シングルトンインスタンスを保持
-   */
-  // eslint-disable-next-line
-  private static instance: ReviewService | null = null;
-
   private repository = getReviewRepository();
 
-  /**
-   * シングルトンインスタンスを取得
-   */
-  public static getInstance(): ReviewService {
-    if (!ReviewService.instance) {
-      ReviewService.instance = new ReviewService();
-    }
-    return ReviewService.instance;
-  }
-
   /**
    * レビュー履歴一覧を取得
    */
diff --git a/src/main/service/settingsService.ts b/src/main/service/settingsService.ts
new file mode 100644
index 000000000..f21abeda6
--- /dev/null
+++ b/src/main/service/settingsService.ts
@@ -0,0 +1,249 @@
+import { ToolsetsInput } from '@mastra/core/agent';
+import { RuntimeContext } from '@mastra/core/runtime-context';
+import { z } from 'zod';
+import { v4 as uuid } from 'uuid';
+import { McpSchema } from '../types/schema';
+import {
+  SettingsSavingStatus,
+  SettingsSavingMessage,
+  AgentToolStatus,
+} from '../types';
+import { getStore } from '../store';
+import { InitializeToolsConfig, initializeTools } from '../../mastra/tools';
+import { RedmineBaseInfo } from '../../mastra/tools/redmine';
+import { initializeMCPClient } from '../../mastra/tools/mcp';
+import { OrchestratorRuntimeContext } from '../../mastra/agents/orchestrator';
+import { getSourceRepository } from '../../db/repository/sourceRepository';
+import { createRuntimeContext } from '../../mastra/agents/lib';
+
+export class SettingsService {
+  private sourceRepository = getSourceRepository();
+
+  // 設定状態
+  private status: SettingsSavingStatus = {
+    state: 'saving',
+    messages: [],
+    tools: {
+      document: false,
+      redmine: false,
+      gitlab: false,
+      mcp: false,
+    },
+  };
+
+  // 利用可能なツール
+  private toolsets: ToolsetsInput = {};
+
+  // Redmine基本情報
+  // webアプリ化した場合、ユーザごとにRedmine基本情報を保持するのはデータ効率悪いので、DSSのみに接続できるようにした方が良いか
+  private redmineBaseInfo: RedmineBaseInfo | undefined;
+
+  /**
+   * 設定状態を取得する
+   */
+  public getStatus = (): SettingsSavingStatus => {
+    return this.status;
+  };
+
+  /**
+   * 利用可能なツールセットを取得する
+   */
+  public getToolsets = (): ToolsetsInput => {
+    return this.toolsets;
+  };
+
+  /**
+   * 設定保存状態を変更する
+   */
+  public updateStatus = (
+    newState: SettingsSavingStatus['state'],
+    message?: SettingsSavingMessage,
+    tools?: AgentToolStatus,
+  ) => {
+    this.status.state = newState;
+
+    if (message) {
+      const newMessage: SettingsSavingMessage = {
+        id: crypto.randomUUID(),
+        type: message.type,
+        content: message.content,
+      };
+      this.status.messages?.push(newMessage);
+    }
+
+    if (tools) {
+      this.status.tools = tools;
+    }
+  };
+
+  public initStatus = () => {
+    this.status.state = 'saving';
+    this.status.messages = [];
+    this.status.tools = {
+      document: false,
+      redmine: false,
+      gitlab: false,
+      mcp: false,
+    };
+  };
+
+  /**
+   * メッセージIDを指定して削除する
+   */
+  public removeMessage = (messageId: string) => {
+    this.status.messages = this.status.messages?.filter(
+      (msg) => msg.id !== messageId,
+    );
+  };
+
+  /**
+   * OrchestratorのRuntimeContextを取得する
+   * @returns OrchestratorRuntimeContext
+   */
+  public getRuntimeContext = async (): Promise<RuntimeContext> => {
+    const runtimeContext = createRuntimeContext<OrchestratorRuntimeContext>();
+    runtimeContext.set('toolStatus', this.status.tools);
+    const store = getStore();
+    if (this.status.tools.document) {
+      const sourceListMarkdown =
+        await this.sourceRepository.getSourceListMarkdown();
+      if (sourceListMarkdown) {
+        runtimeContext.set('documentQuery', {
+          registeredDocuments: sourceListMarkdown,
+        });
+      }
+    }
+    if (this.status.tools.redmine && this.redmineBaseInfo) {
+      runtimeContext.set('redmine', {
+        basicInfo: this.redmineBaseInfo,
+        endpoint: store.get('redmine').endpoint,
+      });
+    }
+    if (this.status.tools.gitlab) {
+      runtimeContext.set('gitlab', {
+        endpoint: store.get('gitlab').endpoint,
+      });
+    }
+    if (store.get('systemPrompt').content) {
+      runtimeContext.set(
+        'additionalSystemPrompt',
+        store.get('systemPrompt').content,
+      );
+    }
+
+    return runtimeContext;
+  };
+
+  /**
+   * 設定を初期化する
+   */
+  public initializeSettings = async () => {
+    try {
+      this.initStatus();
+      const store = getStore();
+      const toolsConfig: InitializeToolsConfig = {};
+      let mcpConfig: z.infer<typeof McpSchema> | null = null;
+      // ドキュメントツール
+      const documentRegisterDir = store.get('source').registerDir;
+      if (documentRegisterDir && documentRegisterDir.trim() !== '') {
+        toolsConfig.documentTool = true;
+      }
+      // Redmineツール
+      const redmineApiKey = store.get('redmine').apiKey;
+      const redmineEndpoint = store.get('redmine').endpoint;
+      if (redmineApiKey && redmineEndpoint) {
+        toolsConfig.redmineTool = {
+          endpoint: redmineEndpoint,
+          apiKey: redmineApiKey,
+        };
+      }
+      // GitLabツール
+      const gitlabApiKey = store.get('gitlab').apiKey;
+      const gitlabEndpoint = store.get('gitlab').endpoint;
+      if (gitlabApiKey && gitlabEndpoint) {
+        toolsConfig.gitlabTool = {
+          endpoint: gitlabEndpoint,
+          apiKey: gitlabApiKey,
+        };
+      }
+      // MCP設定
+      const mcpConfigText = store.get('mcp').serverConfigText;
+      if (mcpConfigText && mcpConfigText.trim() !== '{}') {
+        try {
+          const parsedConfig = JSON.parse(mcpConfigText);
+          const validatedConfig = McpSchema.parse(parsedConfig);
+          mcpConfig = validatedConfig;
+        } catch (error) {
+          console.error('MCP設定のパースに失敗しました:', error);
+          this.status.messages.push({
+            id: uuid(),
+            type: 'error',
+            content: `MCP設定が不正な形式です\n設定を確認してください`,
+          });
+        }
+      }
+      // Mastra MCPの初期化
+      if (mcpConfig) {
+        const mcpResult = await initializeMCPClient({ mcpConfig, id: 'user' });
+        if (mcpResult.success && mcpResult.mcpClient) {
+          this.status.tools.mcp = true;
+          this.toolsets = await mcpResult.mcpClient.getToolsets();
+        } else {
+          this.status.messages.push({
+            id: crypto.randomUUID(),
+            type: 'error',
+            content: `MCPサーバとの接続に失敗しました\nログについては${mcpResult.logPath}をご確認ください`,
+          });
+        }
+      }
+      // Mastra toolの初期化
+      if (
+        toolsConfig.documentTool ||
+        toolsConfig.redmineTool ||
+        toolsConfig.gitlabTool
+      ) {
+        const { documentTool, redmineTool, gitlabTool, toolsInput } =
+          await initializeTools(toolsConfig);
+        if (documentTool && documentTool?.success === true) {
+          this.status.tools.document = true;
+        } else if (documentTool?.error) {
+          this.status.messages.push({
+            id: uuid(),
+            type: 'error',
+            content: `ドキュメント検索ツールの初期化に失敗しました\n設定を確認してください\n${documentTool.error}`,
+          });
+        }
+        if (redmineTool && redmineTool?.success === true) {
+          this.redmineBaseInfo = redmineTool.redmineInfo;
+          this.status.tools.redmine = true;
+        } else if (redmineTool?.error) {
+          this.status.messages.push({
+            id: uuid(),
+            type: 'error',
+            content: `Redmine操作ツールの初期化に失敗しました\n設定を確認してください\n${redmineTool.error}`,
+          });
+        }
+        if (gitlabTool && gitlabTool?.success === true) {
+          this.status.tools.gitlab = true;
+        } else if (gitlabTool?.error) {
+          this.status.messages.push({
+            id: uuid(),
+            type: 'error',
+            content: `GitLab操作ツールの初期化に失敗しました\n設定を確認してください\n${gitlabTool.error}`,
+          });
+        }
+        this.toolsets.aikataOriginalTools = toolsInput;
+      }
+    } catch (error) {
+      console.error('設定の初期化に失敗しました:', error);
+      this.status.state = 'error';
+      this.status.messages.push({
+        id: uuid(),
+        type: 'error',
+        content: `設定の初期化中にエラーが発生しました: ${error instanceof Error ? error.message : JSON.stringify(error)}`,
+      });
+    }
+    // 初期化完了状態に更新
+    this.status.state = 'done';
+  };
+}
diff --git a/src/main/store.ts b/src/main/store.ts
index fefdfd372..8608c9c5d 100644
--- a/src/main/store.ts
+++ b/src/main/store.ts
@@ -1,5 +1,7 @@
 import path, { join } from 'path';
 import { app } from 'electron';
+// @ts-ignore
+import Store from 'electron-store';
 // 設定の型定義
 export interface StoreSchema {
   database: {
@@ -151,32 +153,14 @@ const defaults: StoreSchema = {
   },
 };
 
-// ストアのインスタンスを作成する関数
-export async function createStore() {
-  const Store = (await import('electron-store')).default;
-  const store = new Store<StoreSchema>({
-    schema,
-    defaults,
-    // アプリのユーザーデータディレクトリ内のconfigフォルダに保存
-    // cwd: path.join(app.getPath('userData'), 'config'),
-    cwd: getConfigDir(),
-  });
-
-  console.log('storeのインスタンス化に成功しました: ', store.store);
-
-  return store;
-}
-
 // グローバルなストアインスタンス
-let store: Awaited<ReturnType<typeof createStore>>;
-
-// ストアを初期化する関数
-export async function initStore() {
-  if (!store) {
-    store = await createStore();
-  }
-  return store;
-}
+const store = new Store<StoreSchema>({
+  schema,
+  defaults,
+  // アプリのユーザーデータディレクトリ内のconfigフォルダに保存
+  // cwd: path.join(app.getPath('userData'), 'config'),
+  cwd: getConfigDir(),
+});
 
 // ストアを取得する関数
 export function getStore() {
diff --git a/src/main/types/index.ts b/src/main/types/index.ts
index a80c00992..a8fd2fc07 100644
--- a/src/main/types/index.ts
+++ b/src/main/types/index.ts
@@ -20,10 +20,10 @@ export type ChatRoom = StorageThreadType;
  */
 export type ChatMessage = AiMessageType;
 
-// Mastraの状態管理用の型定義
-export type AgentBootState = 'initializing' | 'ready' | 'error';
+// 設定状態管理用の型定義
+export type SettingsSavingState = 'saving' | 'done' | 'error';
 
-export type AgentBootMessage = {
+export type SettingsSavingMessage = {
   id: string;
   type: 'info' | 'warning' | 'error';
   content: string;
@@ -42,10 +42,10 @@ export type AgentToolStatus = {
 /**
  * エージェントのブート状態を表す型
  */
-export type AgentBootStatus = {
-  state: AgentBootState;
-  messages?: AgentBootMessage[];
-  tools?: AgentToolStatus;
+export type SettingsSavingStatus = {
+  state: SettingsSavingState;
+  messages: SettingsSavingMessage[];
+  tools: AgentToolStatus;
 };
 
 // レビュー評価の型定義
@@ -87,3 +87,6 @@ export type RepositoryResult<T> = {
   data?: T;
   error?: string;
 };
+
+export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
+  Partial<Pick<T, K>>;
diff --git a/src/main/types/ipc.ts b/src/main/types/ipc.ts
index e972e7041..85905845c 100644
--- a/src/main/types/ipc.ts
+++ b/src/main/types/ipc.ts
@@ -1,7 +1,7 @@
 import type {
   ChatMessage,
   ChatRoom,
-  AgentBootStatus,
+  SettingsSavingStatus,
   ReviewChecklistResult,
   ReviewChecklistEdit,
 } from '.';
@@ -12,10 +12,10 @@ import type { Source, ReviewHistory } from '../../db/schema';
  */
 export const IpcChannels = {
   // Agent関連
-  GET_AGENT_STATUS: 'get-agent-status',
-  AGENT_STATUS_CHANGED: 'agent-status-changed',
-  REINITIALIZE_AGENT: 'reinitialize-agent',
-  REMOVE_AGENT_MESSAGE: 'remove-agent-message',
+  GET_SETTINGS_STATUS: 'get-settings-status',
+  SETTINGS_STATUS_CHANGED: 'settings-status-changed',
+  REINITIALIZE_SETTINGS: 'reinitialize-settings',
+  REMOVE_SETTINGS_MESSAGE: 'remove-settings-message',
 
   // ストア関連
   GET_STORE_VALUE: 'get-store-value',
@@ -37,7 +37,8 @@ export const IpcChannels = {
   CHAT_STEP: 'chat-step',
   CHAT_ERROR: 'chat-error',
   CHAT_ABORT_REQUEST: 'chat-abort-request',
-  CHAT_EDIT_HISTORY: 'chat-edit-history',
+  CHAT_DELETE_MESSAGES_BEFORE_SPECIFIC_ID:
+    'chat-delete-messages-before-specific-id',
 
   // ファイルシステム関連
   FS_CHECK_PATH_EXISTS: 'fs-check-path-exists',
@@ -61,8 +62,8 @@ export type IpcChannel = (typeof IpcChannels)[keyof typeof IpcChannels];
  */
 export type IpcRequestPayloadMap = {
   // Mastra関連
-  [IpcChannels.REINITIALIZE_AGENT]: undefined;
-  [IpcChannels.REMOVE_AGENT_MESSAGE]: string; // message id
+  [IpcChannels.REINITIALIZE_SETTINGS]: undefined;
+  [IpcChannels.REMOVE_SETTINGS_MESSAGE]: string; // message id
 
   // ファイルシステム関連
   [IpcChannels.FS_CHECK_PATH_EXISTS]: string;
@@ -86,10 +87,9 @@ export type IpcRequestPayloadMap = {
     title: string;
   };
   [IpcChannels.CHAT_ABORT_REQUEST]: { threadId: string };
-  [IpcChannels.CHAT_EDIT_HISTORY]: {
+  [IpcChannels.CHAT_DELETE_MESSAGES_BEFORE_SPECIFIC_ID]: {
     threadId: string;
-    oldContent: string;
-    oldCreatedAt: Date;
+    messageId: string;
   };
 
   // ドキュメントレビュー関連
@@ -112,9 +112,9 @@ export type IpcRequestPayloadMap = {
 
 export type IpcResponsePayloadMap = {
   // Mastra関連
-  [IpcChannels.GET_AGENT_STATUS]: AgentBootStatus;
-  [IpcChannels.REINITIALIZE_AGENT]: { success: boolean; error?: string };
-  [IpcChannels.REMOVE_AGENT_MESSAGE]: { success: boolean; error?: string };
+  [IpcChannels.GET_SETTINGS_STATUS]: SettingsSavingStatus;
+  [IpcChannels.REINITIALIZE_SETTINGS]: { success: boolean; error?: string };
+  [IpcChannels.REMOVE_SETTINGS_MESSAGE]: { success: boolean; error?: string };
 
   // ファイルシステム関連
   [IpcChannels.FS_CHECK_PATH_EXISTS]: boolean;
@@ -139,7 +139,10 @@ export type IpcResponsePayloadMap = {
   [IpcChannels.CHAT_DELETE_ROOM]: { success: boolean; error?: string };
   [IpcChannels.CHAT_CREATE_THREAD]: { success: boolean; error?: string };
   [IpcChannels.CHAT_ABORT_REQUEST]: { success: boolean; error?: string };
-  [IpcChannels.CHAT_EDIT_HISTORY]: { success: boolean; error?: string };
+  [IpcChannels.CHAT_DELETE_MESSAGES_BEFORE_SPECIFIC_ID]: {
+    success: boolean;
+    error?: string;
+  };
 
   // ドキュメントレビュー関連
   [IpcChannels.REVIEW_GET_HISTORIES]: {
diff --git a/src/main/utils/util.ts b/src/main/utils/util.ts
index 657f8dc27..9b6b49c09 100644
--- a/src/main/utils/util.ts
+++ b/src/main/utils/util.ts
@@ -1,6 +1,7 @@
 /* eslint import/prefer-default-export: off */
 import { URL, pathToFileURL } from 'url';
 import path from 'path';
+import fs from 'fs';
 
 export function resolveHtmlPath(htmlFileName: string) {
   if (process.env.NODE_ENV === 'development') {
@@ -50,3 +51,19 @@ export function toAbsoluteFileURL(
 ): string {
   return pathToFileURL(toAbsolutePath(dirOrPath, fileName)).href;
 }
+
+/**
+ * @param dirOrPath ディレクトリ or パス文字列
+ * @returns boolean 指定したパスが存在するかどうか
+ * @throws Error
+ */
+export function isPathExists(dirOrPath: string): boolean {
+  try {
+    const absolutePath = toAbsolutePath(dirOrPath);
+    return fs.existsSync(absolutePath);
+  } catch (error) {
+    throw new Error(
+      `パスの存在確認中にエラーが発生しました: ${error instanceof Error ? error.message : JSON.stringify(error)}`,
+    );
+  }
+}
diff --git a/src/mastra/agents/config/agent.ts b/src/mastra/agents/config/agent.ts
deleted file mode 100644
index 8d06cf3dc..000000000
--- a/src/mastra/agents/config/agent.ts
+++ /dev/null
@@ -1,30 +0,0 @@
-import { Agent } from '@mastra/core/agent';
-import { getStore } from '../../../main/store';
-import openAICompatibleModel from '../model/openAICompatible';
-import { MemoryConfig, getMemory } from './memory';
-
-// エージェント設定のinterface
-export interface AgentConfig {
-  name: string;
-  instructions: string;
-  tools: Record<string, any>;
-  memoryConfig?: MemoryConfig;
-}
-
-// エージェントインスタンスの生成
-export const createAgent = (config: AgentConfig): Agent => {
-  // APIキーの取得と検証
-  const store = getStore();
-  const apiKey = store.get('api.key');
-  if (!apiKey) {
-    throw new Error('APIキーが設定されていません。');
-  }
-
-  return new Agent({
-    name: config.name,
-    instructions: config.instructions,
-    tools: config.tools,
-    model: openAICompatibleModel(),
-    memory: getMemory(config.memoryConfig),
-  });
-};
diff --git a/src/mastra/agents/config/memory.ts b/src/mastra/agents/config/memory.ts
deleted file mode 100644
index 6e1c0abd3..000000000
--- a/src/mastra/agents/config/memory.ts
+++ /dev/null
@@ -1,83 +0,0 @@
-import { Memory } from '@mastra/memory';
-import { ToolCallFilter } from '@mastra/memory/processors';
-import type { MemoryProcessor } from '@mastra/core';
-import { toAbsoluteFileURL } from '@/main/utils/util';
-import { getStore } from '../../../main/store';
-import { CustomLibSQLStore } from '../../store/libsql/customLibSQLStore';
-import { TokenLimiter0_10_2 } from '../../memory/filter/tokenLimiter_0.10.2';
-
-// メモリオプションの型定義
-export interface MemoryConfig {
-  tokenLimit?: number;
-  excduldeTools?: string[];
-  lastMessages?: number;
-  semanticRecall?: boolean;
-  workingMemory?: {
-    enabled: boolean;
-    use?: 'text-stream' | 'tool-call';
-    tmplate?: string;
-  };
-  threads?: {
-    generateTitle: boolean;
-  };
-}
-
-// メモリインスタンスをキャッシュ
-let memoryInstance: Memory | undefined;
-
-// メモリインスタンスの作成・取得
-export const getMemory = (config: MemoryConfig = {}): Memory => {
-  if (memoryInstance) {
-    return memoryInstance;
-  }
-
-  const store = getStore();
-  const dbSetting = store.get('database');
-
-  if (!dbSetting.dir) {
-    throw new Error('データベース保存フォルダが設定されていません。');
-  }
-
-  const options = {
-    lastMessages: config.lastMessages ?? 40,
-    semanticRecall: config.semanticRecall ?? false,
-    workingMemory: {
-      enabled: config.workingMemory?.enabled ?? false,
-      use: config.workingMemory?.use ?? undefined,
-      template: config.workingMemory?.tmplate ?? undefined,
-    },
-    threads: {
-      generateTitle: config.threads?.generateTitle ?? false,
-    },
-  };
-
-  const memoryProcessors: MemoryProcessor[] | undefined = [];
-  if (config.tokenLimit) {
-    memoryProcessors.push(new TokenLimiter0_10_2(config.tokenLimit));
-  }
-  if (config.excduldeTools) {
-    memoryProcessors.push(
-      new ToolCallFilter({ exclude: config.excduldeTools }),
-    );
-  }
-
-  const customLibSQLStore = new CustomLibSQLStore();
-  customLibSQLStore.customConstruct({
-    config: {
-      url: toAbsoluteFileURL(dbSetting.dir, 'memory.db'),
-    },
-  });
-
-  memoryInstance = new Memory({
-    options,
-    processors: memoryProcessors.length > 0 ? memoryProcessors : undefined,
-    storage: customLibSQLStore,
-  });
-
-  return memoryInstance;
-};
-
-// メモリインスタンスのリセット（主にテスト用）
-export const resetMemory = () => {
-  memoryInstance = undefined;
-};
diff --git a/src/mastra/agents/lib.ts b/src/mastra/agents/lib.ts
new file mode 100644
index 000000000..7001fd32d
--- /dev/null
+++ b/src/mastra/agents/lib.ts
@@ -0,0 +1,42 @@
+import { RuntimeContext } from '@mastra/core/runtime-context';
+import { FinishReason } from 'ai';
+import { BaseRuntimeContext } from './types';
+import { getStore } from '../../main/store';
+
+// BaseRuntimeConotextに値を入れた上で、指定したRuntimeContextを返す関数
+export function createRuntimeContext<T extends BaseRuntimeContext>() {
+  const store = getStore();
+  const runtimeContext = new RuntimeContext<T>();
+  // @ts-ignore
+  runtimeContext.set('model', {
+    key: store.get('api').key,
+    url: store.get('api').url,
+    modelName: store.get('api').model,
+  });
+  return runtimeContext;
+}
+
+// finishreasonを元に正常終了かどうかを判定する関数
+export function judgeFinishReason(finishReason: FinishReason): {
+  success: boolean;
+  reason: string;
+} {
+  switch (finishReason) {
+    case 'stop':
+      return { success: true, reason: '正常終了' };
+    case 'length':
+      return {
+        success: false,
+        reason: 'AIモデルの最大出力コンテキストを超えました',
+      };
+    case 'content-filter':
+      return {
+        success: false,
+        reason: 'コンテンツフィルターにより出力が制限されました',
+      };
+    case 'error':
+      return { success: false, reason: 'AIモデルで不明なエラーが発生しました' };
+    default:
+      return { success: true, reason: '不明な終了理由' };
+  }
+}
diff --git a/src/mastra/agents/model/openAICompatible.ts b/src/mastra/agents/model/openAICompatible.ts
index 4cd7bbfa2..d6fffe07a 100644
--- a/src/mastra/agents/model/openAICompatible.ts
+++ b/src/mastra/agents/model/openAICompatible.ts
@@ -1,31 +1,23 @@
 import { createOpenAICompatible } from '@ai-sdk/openai-compatible';
-import { getStore } from '../../../main/store';
+import { RuntimeContext } from '@mastra/core/runtime-context';
+import type { BaseRuntimeContext } from '../types';
 
-const getOpenAICompatibleModel = () => {
-  const store = getStore();
-  const apiConfig = {
-    key: store.get('api').key,
-    url: store.get('api').url,
-    model: store.get('api').model,
-  };
-
-  // API設定の確認
-  if (!apiConfig.key) {
-    throw new Error('APIキーが設定されていません');
-  }
-  if (!apiConfig.url) {
-    throw new Error('APIのURLが設定されていません');
-  }
-  if (!apiConfig.model) {
-    throw new Error('APIのモデル名が設定されていません');
+export const getOpenAICompatibleModel = ({
+  runtimeContext,
+}: {
+  runtimeContext: RuntimeContext<BaseRuntimeContext>;
+}) => {
+  const apiConfig = runtimeContext.get('model');
+  if (!apiConfig || !apiConfig.key || !apiConfig.url || !apiConfig.modelName) {
+    throw new Error(
+      'AI APIの設定が正しくありません。APIキー、URL、BPR IDを確認してください。',
+    );
   }
 
   const model = createOpenAICompatible({
     name: 'openAICompatibleModel',
     apiKey: apiConfig.key,
     baseURL: apiConfig.url,
-  }).chatModel(apiConfig.model);
+  }).chatModel(apiConfig.modelName);
   return model;
 };
-
-export default getOpenAICompatibleModel;
diff --git a/src/mastra/agents/orchestrator.ts b/src/mastra/agents/orchestrator.ts
index 2363d884e..1e346e7d7 100644
--- a/src/mastra/agents/orchestrator.ts
+++ b/src/mastra/agents/orchestrator.ts
@@ -1,231 +1,62 @@
 import { Agent } from '@mastra/core/agent';
-import { MCPConfiguration, LogMessage } from '@mastra/mcp';
-import { v4 as uuid } from 'uuid';
-import { writeFileSync } from 'fs';
-import { documentQueryTool } from '../tools/sourcesTools';
-import { createAgent } from './config/agent';
+import { Memory } from '@mastra/memory';
+import { TokenLimiter } from '@mastra/memory/processors';
+import { LibSQLStore } from '@mastra/libsql';
 import { getStore } from '../../main/store';
-import {
-  setupRedmineTools,
-  createRedmineClient,
-  RedmineBaseInfo,
-} from '../tools/redmine';
-import { setupGitLabTools } from '../tools/gitlab';
-import { McpSchema } from '../../main/types/schema';
-import { AgentBootMessage, AgentToolStatus } from '../../main/types';
-
-const ORCHESTRATOR_NAME = 'orchestrator';
-const LOG_FILE_PATH = './mcp.log';
-
-/**
- * ログメッセージをフォーマットする
- */
-const formatLogMessage = (logMessage: LogMessage): string => {
-  const timestamp = logMessage.timestamp
-    .toISOString()
-    .replace('T', ' ')
-    .split('.')[0];
-  const details = logMessage.details ? JSON.stringify(logMessage.details) : '';
-  return `[${timestamp}] [${logMessage.level}] ${logMessage.message} ${details}`.trim();
-};
-
-/**
- * ログをファイルに書き込む
- */
-const writeLog = (logMessage: LogMessage): void => {
-  try {
-    const formattedLog = formatLogMessage(logMessage);
-    writeFileSync(LOG_FILE_PATH, `${formattedLog}\n`, { flag: 'a' });
-  } catch (error) {
-    console.error('ログファイルの書き込みに失敗しました:', error);
-  }
+import { getOrchestratorSystemPrompt } from './prompts';
+import { getOpenAICompatibleModel } from './model/openAICompatible';
+import { isPathExists, toAbsoluteFileURL } from '../../main/utils/util';
+import { CustomToolCallFilter } from '../memory/filter/customToolCallFilter';
+import { BaseRuntimeContext } from './types';
+import type { AgentToolStatus } from '../../main/types';
+import type { RedmineBaseInfo } from '../tools/redmine/types';
+
+// orchestrator用のRuntimeContext
+export type OrchestratorRuntimeContext = BaseRuntimeContext & {
+  toolStatus: AgentToolStatus;
+  documentQuery?: {
+    registeredDocuments: string;
+  };
+  redmine?: {
+    endpoint: string;
+    basicInfo: RedmineBaseInfo;
+  };
+  gitlab?: {
+    endpoint: string;
+  };
+  additionalSystemPrompt?: string;
 };
 
-/**
- * ログファイルを削除する
- */
-const deleteLogFile = (): void => {
-  try {
-    writeFileSync(LOG_FILE_PATH, '', { flag: 'w' });
-  } catch (error) {
-    console.error('ログファイルの削除に失敗しました:', error);
+const store = getStore();
+let dbDir = store.get('database').dir;
+let dbDirExistsFlag = false;
+try {
+  if (dbDir && dbDir.trim() !== '') {
+    dbDirExistsFlag = isPathExists(dbDir);
   }
-};
-
-/**
- * オーケストレーターエージェントを取得または作成する
- */
-export const getOrchestrator = async (): Promise<{
-  agent: Agent | null;
-  alertMessages: AgentBootMessage[];
-  redmineInfo: RedmineBaseInfo | null;
-  toolStatus: AgentToolStatus;
-}> => {
-  const alertMessages: AgentBootMessage[] = [];
-  let agent: Agent | null = null;
-  let documentTools = {};
-  let redmineTools = {};
-  let gitlabTools = {};
-  let mcpTools = {};
-  let redmineInfo: RedmineBaseInfo | null = null;
-
-  const excduldeTools: string[] = [];
-
-  try {
-    const store = getStore();
-
-    // ドキュメントツールの登録
-    // 空文字でない場合は登録する
-    const documentRegisterDir = store.get('source').registerDir;
-    if (documentRegisterDir && documentRegisterDir.trim() !== '') {
-      try {
-        documentTools = { documentQueryTool };
-        excduldeTools.push('documentQueryTool');
-      } catch (error) {
-        alertMessages.push({
-          id: uuid(),
-          type: 'warning',
-          content: `ドキュメント検索ツールの初期化に失敗しました\n設定を確認してください\n${error}`,
-        });
-      }
-    } else {
-      console.warn(
-        'ドキュメント検索ツールの登録フォルダが設定されていません。ドキュメントツールは登録されません。',
-      );
-    }
-
-    // Redmineツールの登録
-    // APIキーとエンドポイントが登録されていた場合は登録する
-    const redmineApiKey = store.get('redmine').apiKey;
-    const redmineEndpoint = store.get('redmine').endpoint;
-    if (redmineApiKey && redmineEndpoint) {
-      try {
-        // Redmineクライアントを作成
-        const client = createRedmineClient({
-          apiKey: redmineApiKey,
-          apiUrl: redmineEndpoint,
-        });
-
-        // 基本情報の取得
-        redmineInfo = await client.getBaseInfo();
-        // 作成したクライアントを使ってツールを初期化
-        redmineTools = await setupRedmineTools(client);
-        alertMessages.push({
-          id: uuid(),
-          type: 'info',
-          content: 'Redmine操作ツールの初期化に成功しました。',
-        });
-      } catch (error) {
-        alertMessages.push({
-          id: uuid(),
-          type: 'warning',
-          content: `Redmine操作ツールの初期化に失敗しました\n設定を確認してください\n${error}`,
-        });
-        redmineInfo = null;
-      }
-    } else {
-      console.warn(
-        'Redmine APIキーまたはエンドポイントが設定されていません。Redmineツールは登録されません。',
-      );
-    }
-
-    // Gitlabツールの登録
-    // GitlabのAPIキーとエンドポイントが登録されていた場合は登録する
-    const gitlabStore = store.get('gitlab');
-    const gitlabApiKey = gitlabStore.apiKey;
-    const gitlabEndpoint = gitlabStore.endpoint;
-    if (gitlabApiKey && gitlabEndpoint) {
-      try {
-        // Gitlabクライアントの初期化
-        gitlabTools = await setupGitLabTools({
-          token: gitlabApiKey,
-          host: gitlabEndpoint,
-        });
-        excduldeTools.push(
-          'getGitLabFileContent',
-          'getGitLabRawFile',
-          'getGitLabBlameFile',
-        );
-        alertMessages.push({
-          id: uuid(),
-          type: 'info',
-          content: 'Gitlab操作ツールの初期化に成功しました。',
-        });
-      } catch (error) {
-        alertMessages.push({
-          id: uuid(),
-          type: 'warning',
-          content: `Gitlab操作ツールの初期化に失敗しました\n設定を確認してください\n${error}`,
-        });
-      }
-    } else {
-      console.warn(
-        'Gitlab APIキーまたはエンドポイントが設定されていません。Gitlabツールは登録されません。',
-      );
-    }
-
-    // MCP設定の取得
-    const mcpConfig = store.get('mcp');
-
-    // MCPツールの登録
-    if (mcpConfig?.serverConfigText && mcpConfig.serverConfigText !== '{}') {
-      deleteLogFile();
-      try {
-        const parsedConfig = JSON.parse(mcpConfig.serverConfigText);
-        const validatedConfig = McpSchema.parse(parsedConfig);
-        // それぞれのサーバ設定にログを設定
-        const validatedConfigWithLoggerOption = Object.fromEntries(
-          Object.entries(validatedConfig).map(([key, value]) => [
-            key,
-            {
-              ...value,
-              logger: writeLog,
-            },
-          ]),
-        );
-        const mcp = new MCPConfiguration({
-          id: uuid(),
-          servers: validatedConfigWithLoggerOption,
-        });
-        mcpTools = await mcp.getTools();
-        alertMessages.push({
-          id: uuid(),
-          type: 'info',
-          content: 'MCPサーバーの初期化に成功しました。',
-        });
-      } catch (error) {
-        alertMessages.push({
-          id: uuid(),
-          type: 'warning',
-          content: `MCPサーバーとの接続に失敗しました\nログについては${LOG_FILE_PATH}をご確認ください`,
-        });
-        console.error('MCPサーバーの初期化に失敗しました:', error);
-      }
-    }
-
-    // エージェントの作成
-    agent = createAgent({
-      name: ORCHESTRATOR_NAME,
-      instructions: '', // 空の指示を設定（streamメソッド時に動的に設定するため）
-      tools: {
-        // sourceListTool,
-        ...documentTools,
-        ...redmineTools,
-        ...gitlabTools,
-        ...mcpTools,
-      },
-      memoryConfig: {
-        tokenLimit: 4000, // トークン上限値-(システム＋ユーザプロンプト＋バッファ＋メモリ+バッファ)
-        excduldeTools: excduldeTools.length > 0 ? excduldeTools : undefined,
-        lastMessages: 20,
-        semanticRecall: false,
-        threads: {
-          generateTitle: true,
-        },
-        workingMemory: {
-          enabled: true,
-          use: 'tool-call',
-          tmplate: `
+} catch (error) {
+  console.error(
+    `データベース保存フォルダの存在確認中にエラーが発生しました: ${error}`,
+  );
+  dbDirExistsFlag = false;
+}
+if (!dbDirExistsFlag) {
+  console.warn(
+    'データベース保存フォルダが設定されていません。カレントフォルダを使用します。',
+  );
+  dbDir = './';
+}
+
+const memory = new Memory({
+  storage: new LibSQLStore({
+    url: toAbsoluteFileURL(dbDir, 'memory.db'),
+  }),
+  options: {
+    lastMessages: 40,
+    semanticRecall: false,
+    workingMemory: {
+      enabled: true,
+      template: `
 # Session Status
 - Current Main Task: {task}
 
@@ -241,27 +72,27 @@ export const getOrchestrator = async (): Promise<{
 - {Note 2}
 - ...
 `,
-        },
-      },
-    });
-  } catch (error) {
-    alertMessages.push({
-      id: uuid(),
-      type: 'error',
-      content: `AIエージェントの初期化に失敗しました\n設定を再確認してください:\n ${error}`,
-    });
-  }
-  return {
-    agent,
-    alertMessages,
-    toolStatus: {
-      document: !!documentTools && Object.keys(documentTools).length > 0,
-      redmine: !!redmineTools && Object.keys(redmineTools).length > 0,
-      gitlab: !!gitlabTools && Object.keys(gitlabTools).length > 0,
-      mcp: !!mcpTools && Object.keys(mcpTools).length > 0,
     },
-    redmineInfo,
-  };
-};
-
-export default getOrchestrator;
+    threads: {
+      generateTitle: true,
+    },
+  },
+  processors: [
+    new CustomToolCallFilter({
+      exclude: [
+        'documentQueryTool',
+        'getGitLabFileContent',
+        'getGitLabRawFile',
+        'getGitLabBlameFile',
+      ],
+    }), // 特定のツールコールを除外
+    new TokenLimiter(4000), // トークン上限値-(レスポンス＋ツールコール)
+  ],
+});
+
+export const orchestrator = new Agent({
+  name: 'orchestrator',
+  instructions: getOrchestratorSystemPrompt,
+  model: getOpenAICompatibleModel,
+  memory,
+});
diff --git a/src/mastra/agents/prompts.ts b/src/mastra/agents/prompts.ts
index 11a78dbab..00bec783c 100644
--- a/src/mastra/agents/prompts.ts
+++ b/src/mastra/agents/prompts.ts
@@ -1,56 +1,11 @@
-import { eq, and, max } from 'drizzle-orm';
-import { getStore } from '../../main/store';
-import { sources, topics } from '../../db/schema';
-import getDb from '../../db';
-import { AgentToolStatus } from '../../main/types';
-import { RedmineBaseInfo } from '../tools/redmine';
-
-/**
- * データベースからソース情報を取得する
- */
-const getSourcesInfoByMDList = async () => {
-  const db = await getDb();
-  // 有効なソースのみ取得
-  const sourceList = await db
-    .select()
-    .from(sources)
-    .where(and(eq(sources.isEnabled, 1), eq(sources.status, 'completed')))
-    .orderBy(sources.title);
-
-  // 各ソースのトピックを取得
-  const sourceWithTopicList = await Promise.all(
-    sourceList.map(async (source) => {
-      const topicsList = await db
-        .select()
-        .from(topics)
-        .where(eq(topics.sourceId, source.id))
-        .orderBy(topics.name);
-
-      return {
-        id: source.id,
-        title: source.title,
-        path: source.path,
-        summary: source.summary,
-        topics: topicsList.map((topic) => ({
-          name: topic.name,
-          summary: topic.summary,
-        })),
-      };
-    }),
-  );
-
-  return sourceWithTopicList
-    .map(
-      (sourceWithTopic) => `  - ID:${sourceWithTopic.id}
-    - Title:${sourceWithTopic.title}
-    - Path:${sourceWithTopic.path}
-    - Summary:${sourceWithTopic.summary}
-    - Topics:
-  ${sourceWithTopic.topics.map((topic) => `      - Topic: ${topic.name} Summary: ${topic.summary}`).join('\n')}
-`,
-    )
-    .join('\n');
-};
+import { RuntimeContext } from '@mastra/core/runtime-context';
+import { OrchestratorRuntimeContext } from './orchestrator';
+import { DocumentExpertAgentRuntimeContext } from './toolAgents';
+import {
+  ChecklistExtractionAgentRuntimeContext,
+  ClassifyCategoryAgentRuntimeContext,
+  ReviewExecuteAgentRuntimeContext,
+} from './workflowAgents';
 
 /**
  * ソース解析用のシステムプロンプト
@@ -96,15 +51,22 @@ Each summary must include all important information related to the topic.
  * @param config ツールの有効/無効を指定する設定オブジェクト
  * @returns システムプロンプト文字列
  */
-export const getOrchestratorSystemPrompt = async (
-  config: AgentToolStatus,
-  redmineInfo: RedmineBaseInfo | null,
-): Promise<string> => {
-  const store = getStore();
+export const getOrchestratorSystemPrompt = async ({
+  runtimeContext,
+}: {
+  runtimeContext: RuntimeContext<OrchestratorRuntimeContext>;
+}): Promise<string> => {
+  const toolStatus = runtimeContext.get('toolStatus');
+
+  const sourceListMD = runtimeContext.get('documentQuery')?.registeredDocuments;
+
+  const redmineInfo = runtimeContext.get('redmine')?.basicInfo;
+
+  const redmineEndpoint = runtimeContext.get('redmine')?.endpoint;
 
-  const sourceListMD = await getSourcesInfoByMDList();
+  const gitlabEndpoint = runtimeContext.get('gitlab')?.endpoint;
 
-  const systemPrompt = store.get('systemPrompt.content');
+  const systemPrompt = runtimeContext.get('additionalSystemPrompt');
 
   const prompt = `
 You are an AI agent empowered with a rich set of tools. Whenever a user request arrives, follow this cycle:
@@ -119,7 +81,7 @@ You are an AI agent empowered with a rich set of tools. Whenever a user request
 4. **Report**
    Present the final results clearly, citing any sources used.
 ${
-  config.document && sourceListMD.trim()
+  toolStatus.document && sourceListMD?.trim()
     ? `
 If the user has registered reference documents, always consider them first—only skip or question their relevance if they clearly don’t match the intent.
 `
@@ -141,7 +103,7 @@ ${systemPrompt}
     : ''
 }### Tools
 ${
-  config.document && sourceListMD.trim()
+  toolStatus.document && sourceListMD?.trim()
     ? `
 - **Document Query Tool**
   documentQueryTool: Processes each document query separately using registered content.
@@ -152,14 +114,14 @@ ${
   updateWorkingMemory: Save or update facts in your working memory.
 
 ${
-  config.redmine
+  toolStatus.redmine
     ? `- **Redmine Integration Tools**
   getRedmineIssuesList: Fetch a filtered list of issues.
   getRedmineIssueDetail: Get details of a specific issue.
   createRedmineIssue: Create a new issue.
   updateRedmineIssue: Update an existing issue.
   _Note:_
-    - Redmine URL: ${store.get('redmine').endpoint}
+    - Redmine URL: ${redmineEndpoint}
     - Identify projects by ID, name, or identifier (e.g. the segment after \`/projects/\` in the URL).
     - Default trackers, statuses, and priorities are available via \`getRedmineInfo\`.
   _Basic Info:_
@@ -176,7 +138,7 @@ ${redmineInfo?.priorities.map((p) => `      - ${p.name} (ID: ${p.id})`).join(`
 }
 
 ${
-  config.gitlab
+  toolStatus.gitlab
     ? `- **GitLab Integration Tools**
   getGitLabFileContent: Get Base64-encoded file content.
   getGitLabRawFile: Retrieve raw file data.
@@ -187,14 +149,14 @@ ${
   addMergeRequestComment: Add a comment to an MR.
   addMergeRequestDiffComment: Comment on specific diffs.
   _Note:_
-    - GitLab URL: ${store.get('gitlab').endpoint}
+    - GitLab URL: ${gitlabEndpoint}
     - Specify projects by ID or by non-encoded path (e.g. \`groupA/groupB/project\`).
   `
     : ''
 }
 
 ${
-  config.mcp
+  toolStatus.mcp
     ? `- **MCP (Model Context Protocol) Tools**
   Access additional server-provided tools and APIs via registered MCP servers.`
     : ''
@@ -204,7 +166,7 @@ ${
 
 ### Usage Notes
 - You may invoke any tool at any time and reuse them as needed.${
-    config.document && sourceListMD.trim()
+    toolStatus.document && sourceListMD?.trim()
       ? `
 - When quoting document, explicitly mention the reference.
 
@@ -219,20 +181,29 @@ ${sourceListMD.trim() ? sourceListMD : 'No documents registered.'}`
 /**
  * System prompt for answering questions based on source content
  */
-export const getSourceQuerySystemPrompt = (content: string) => `
+export const getDocumentQuerySystemPrompt = ({
+  runtimeContext,
+}: {
+  runtimeContext: RuntimeContext<DocumentExpertAgentRuntimeContext>;
+}): string => `
 You are an expert on the following document.
 Answer questions accurately based on the document's content.
 If information is not found in the document, respond with "This information is not present in the document."
 
 Document:
-${content}
+${runtimeContext.get('documentContent')}
 `;
 
 /**
  * チェックリスト抽出用のシステムプロンプトを取得する関数
  * @param extractedItems  これまでに抽出済みのチェックリスト項目（文字列配列）
  */
-export function getChecklistExtractionPrompt(extractedItems: string[]): string {
+export function getChecklistExtractionPrompt({
+  runtimeContext,
+}: {
+  runtimeContext: RuntimeContext<ChecklistExtractionAgentRuntimeContext>;
+}): string {
+  const extractedItems = runtimeContext.get('extractedItems');
   return `
 You are a specialist in extracting checklist items from documents.
 Additionally, if you determine the document is not a checklist document, explicitly set isChecklistDocument to false.
@@ -240,7 +211,10 @@ Additionally, if you determine the document is not a checklist document, explici
 ${
   extractedItems.length > 0
     ? `So far, you have identified ${extractedItems.length} items:
-${extractedItems.map((item, i) => `${i + 1}. ${item}`).join('\n')}`
+${runtimeContext
+  .get('extractedItems')
+  .map((item, i) => `${i + 1}. ${item}`)
+  .join('\n')}`
     : `Given a document, first decide whether it is a checklist document.`
 }
 
@@ -255,18 +229,19 @@ Ensure you never omit or alter any checklist text.
  * @param maxItems  一つのカテゴリに含める最大チェックリスト数
  * @param maxCategories  最大カテゴリ数（デフォルトは10）
  */
-export function getChecklistCategolizePrompt(
-  maxItems: number,
-  maxCategories: number = 10,
-): string {
+export function getChecklistCategolizePrompt({
+  runtimeContext,
+}: {
+  runtimeContext: RuntimeContext<ClassifyCategoryAgentRuntimeContext>;
+}): string {
   return `
 You are a categorization assistant.
-When given a list of checklists (each with an ID and content), partition them into up to ${maxCategories} meaningful categories.
+When given a list of checklists (each with an ID and content), partition them into up to ${runtimeContext.get('maxCategories')} meaningful categories.
 
 Constraints:
 1. Every single checklist item must be assigned to exactly one category. No items should be left unclassified.
 2. You may create at most 10 categories.
-3. Each category may contain no more than ${maxItems} checklist items.
+3. Each category may contain no more than ${runtimeContext.get('maxChecklistsPerCategory')} checklist items.
 4. Distribute items as evenly as possible across categories to achieve a balanced allocation, while preserving thematic coherence.
 `;
 }
@@ -276,9 +251,12 @@ Constraints:
  * @param checklists - Array of checklist items with id and content
  * @returns A string to use as system instructions for the review agent
  */
-export function getDocumentReviewExecutionPrompt(
-  checklists: Array<{ id: number; content: string }>,
-): string {
+export function getDocumentReviewExecutionPrompt({
+  runtimeContext,
+}: {
+  runtimeContext: RuntimeContext<ReviewExecuteAgentRuntimeContext>;
+}): string {
+  const checklists = runtimeContext.get('checklistItems');
   // Build a human-readable list of checklist items
   const formattedList = checklists
     .map((item) => `ID: ${item.id} - ${item.content}`)
diff --git a/src/mastra/agents/toolAgents.ts b/src/mastra/agents/toolAgents.ts
new file mode 100644
index 000000000..36628f267
--- /dev/null
+++ b/src/mastra/agents/toolAgents.ts
@@ -0,0 +1,16 @@
+// toolで利用するエージェントをまとめたクラス
+import { Agent } from '@mastra/core/agent';
+import { getOpenAICompatibleModel } from './model/openAICompatible';
+// eslint-disable-next-line import/no-cycle
+import { getDocumentQuerySystemPrompt } from './prompts';
+import { BaseRuntimeContext } from './types';
+
+export type DocumentExpertAgentRuntimeContext = BaseRuntimeContext & {
+  documentContent: string;
+};
+
+export const documentExpertAgent = new Agent({
+  name: 'documentExpertAgent',
+  instructions: getDocumentQuerySystemPrompt,
+  model: getOpenAICompatibleModel,
+});
diff --git a/src/mastra/agents/types/index.ts b/src/mastra/agents/types/index.ts
new file mode 100644
index 000000000..188f5c5a7
--- /dev/null
+++ b/src/mastra/agents/types/index.ts
@@ -0,0 +1,10 @@
+// Mastra AgentにてAIモデルを動的に作成するためのRuntimeContext
+// runtimeContextはmodel, tools, promptの設定やworkflowで活用可能
+// https://mastra.ai/ja/docs/agents/dynamic-agents
+export type BaseRuntimeContext = {
+  model: {
+    key: string;
+    url: string;
+    modelName: string;
+  };
+};
diff --git a/src/mastra/agents/workflowAgents.ts b/src/mastra/agents/workflowAgents.ts
new file mode 100644
index 000000000..99134ae9a
--- /dev/null
+++ b/src/mastra/agents/workflowAgents.ts
@@ -0,0 +1,55 @@
+// workflowで利用するエージェントをまとめたクラス
+import { Agent } from '@mastra/core/agent';
+// eslint-disable-next-line import/no-cycle
+import {
+  SOURCE_ANALYSIS_SYSTEM_PROMPT,
+  EXTRACT_TOPIC_AND_SUMMARY_SYSTEM_PROMPT,
+  getChecklistExtractionPrompt,
+  getChecklistCategolizePrompt,
+  getDocumentReviewExecutionPrompt,
+} from './prompts';
+import { getOpenAICompatibleModel } from './model/openAICompatible';
+import { BaseRuntimeContext } from './types';
+
+export type ChecklistExtractionAgentRuntimeContext = BaseRuntimeContext & {
+  extractedItems: string[];
+};
+
+export type ClassifyCategoryAgentRuntimeContext = BaseRuntimeContext & {
+  maxChecklistsPerCategory: number;
+  maxCategories: number;
+};
+
+export type ReviewExecuteAgentRuntimeContext = BaseRuntimeContext & {
+  checklistItems: { id: number; content: string }[];
+};
+
+export const summarizeSourceAgent = new Agent({
+  name: 'summarizeSourceAgent',
+  instructions: SOURCE_ANALYSIS_SYSTEM_PROMPT,
+  model: getOpenAICompatibleModel,
+});
+
+export const summarizeTopicAgent = new Agent({
+  name: 'summarizeTopicAgent',
+  instructions: EXTRACT_TOPIC_AND_SUMMARY_SYSTEM_PROMPT,
+  model: getOpenAICompatibleModel,
+});
+
+export const checklistExtractionAgent = new Agent({
+  name: 'checklistExtractionAgent',
+  instructions: getChecklistExtractionPrompt,
+  model: getOpenAICompatibleModel,
+});
+
+export const classifyCategoryAgent = new Agent({
+  name: 'classifyCategoryAgent',
+  instructions: getChecklistCategolizePrompt,
+  model: getOpenAICompatibleModel,
+});
+
+export const reviewExecuteAgent = new Agent({
+  name: 'reviewExecuteAgent',
+  instructions: getDocumentReviewExecutionPrompt,
+  model: getOpenAICompatibleModel,
+});
diff --git a/src/mastra/index.ts b/src/mastra/index.ts
new file mode 100644
index 000000000..d5a888528
--- /dev/null
+++ b/src/mastra/index.ts
@@ -0,0 +1,43 @@
+// メモリ設定などelectron-storeから読み込む
+// そのためmain.tsではelectron-storeの初期化後に動的インポートで遅延ロードする
+import { Mastra } from '@mastra/core';
+import { createLogger } from '@mastra/core/logger';
+import { orchestrator } from './agents/orchestrator';
+import { documentExpertAgent } from './agents/toolAgents';
+import {
+  summarizeSourceAgent,
+  summarizeTopicAgent,
+  checklistExtractionAgent,
+  classifyCategoryAgent,
+  reviewExecuteAgent,
+} from './agents/workflowAgents';
+import { sourceRegistrationWorkflow } from './workflows/sourceRegistration';
+import { checklistExtractionWorkflow } from './workflows/sourceReview/checklistExtraction';
+import { reviewExecutionWorkflow } from './workflows/sourceReview/reviewExecution';
+
+// 開発環境か本番環境かによってログレベルを切り替え
+const logLevel = process.env.NODE_ENV === 'production' ? 'info' : 'debug';
+
+// ロガーの作成
+const logger = createLogger({
+  name: 'AIKATA',
+  level: logLevel,
+});
+
+export const mastra: Mastra = new Mastra({
+  agents: {
+    orchestrator,
+    documentExpertAgent,
+    summarizeSourceAgent,
+    summarizeTopicAgent,
+    checklistExtractionAgent,
+    classifyCategoryAgent,
+    reviewExecuteAgent,
+  },
+  workflows: {
+    sourceRegistrationWorkflow,
+    checklistExtractionWorkflow,
+    reviewExecutionWorkflow,
+  },
+  logger,
+});
diff --git a/src/mastra/memory/filter/customToolCallFilter.ts b/src/mastra/memory/filter/customToolCallFilter.ts
index 761b538e9..e2b09b865 100644
--- a/src/mastra/memory/filter/customToolCallFilter.ts
+++ b/src/mastra/memory/filter/customToolCallFilter.ts
@@ -10,7 +10,7 @@ import { MemoryProcessor } from '@mastra/core';
  * By default (with no arguments), excludes all tool calls and their results.
  * Can be configured to exclude only specific tools by name.
  */
-export class customToolCallFilter extends MemoryProcessor {
+export class CustomToolCallFilter extends MemoryProcessor {
   private exclude: string[] | 'all';
 
   /**
diff --git a/src/mastra/memory/filter/tokenLimiter_0.10.2.ts b/src/mastra/memory/filter/tokenLimiter_0.10.2.ts
deleted file mode 100644
index 14f55bbfa..000000000
--- a/src/mastra/memory/filter/tokenLimiter_0.10.2.ts
+++ /dev/null
@@ -1,163 +0,0 @@
-// 本プロジェクトで利用している@mastra/memory@0.2.10のtokenLimiterは処理結果に新規メッセージも含めてしまう
-// 最終的には[...tokenLimiterの処理結果, 新規メッセージ]としてメッセージが送信されるため、新規メッセージが二重に計上されてしまう
-// @mastra/memory@0.10.2ではこの問題が修正されているため、0.10.2のtokenLimiterをコピーしてきて利用する
-// パッケージ自体のバージョンをあげると@mastra/coreのバージョンもあげる必要があり、影響範囲が大きくなるため、実施しない
-// https://github.com/mastra-ai/mastra/blob/%40mastra/memory%400.2.10/packages/memory/src/processors/token-limiter.ts
-// https://github.com/mastra-ai/mastra/blob/%40mastra/core%400.8.3/packages/core/src/agent/index.ts#L298
-
-import type { CoreMessage, MemoryProcessorOpts } from '@mastra/core';
-import { MemoryProcessor } from '@mastra/core/memory';
-// @ts-ignore
-import { Tiktoken } from 'js-tiktoken/lite';
-// @ts-ignore
-import type { TiktokenBPE } from 'js-tiktoken/lite';
-// @ts-ignore
-import o200k_base from 'js-tiktoken/ranks/o200k_base';
-
-/**
- * Configuration options for TokenLimiter
- */
-interface TokenLimiterOptions {
-  /** Maximum number of tokens to allow */
-  limit: number;
-  /** Optional encoding to use (defaults to o200k_base which is used by gpt-4o) */
-  encoding?: TiktokenBPE;
-}
-
-/**
- * Limits the total number of tokens in the messages.
- * Uses js-tiktoken with o200k_base encoding by default for accurate token counting with modern models.
- */
-export class TokenLimiter0_10_2 extends MemoryProcessor {
-  private encoder: Tiktoken;
-  private maxTokens: number;
-
-  // Token overheads per OpenAI's documentation
-  // See: https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken#6-counting-tokens-for-chat-completions-api-calls
-  // Every message follows <|start|>{role/name}\n{content}<|end|>
-  public TOKENS_PER_MESSAGE = 3.8; // tokens added for each message (start & end tokens)
-  public TOKENS_PER_TOOL = 2.2; // empirical adjustment for tool calls
-  public TOKENS_PER_CONVERSATION = 25; // fixed overhead for the conversation
-
-  /**
-   * Create a token limiter for messages.
-   * @param options Either a number (token limit) or a configuration object
-   */
-  constructor(options: number | TokenLimiterOptions) {
-    super({
-      name: 'TokenLimiter',
-    });
-
-    if (typeof options === 'number') {
-      // Simple number format - just the token limit with default encoding
-      this.maxTokens = options;
-      this.encoder = new Tiktoken(o200k_base);
-    } else {
-      // Object format with limit and optional encoding
-      this.maxTokens = options.limit;
-      this.encoder = new Tiktoken(options.encoding || o200k_base);
-    }
-  }
-
-  process(
-    messages: CoreMessage[],
-    { systemMessage, memorySystemMessage, newMessages }: MemoryProcessorOpts = {},
-  ): CoreMessage[] {
-    // Messages are already chronologically ordered - take most recent ones up to the token limit
-    let totalTokens = 0;
-
-    // Start with the conversation overhead
-    totalTokens += this.TOKENS_PER_CONVERSATION;
-
-    if (systemMessage) {
-      totalTokens += this.countTokens(systemMessage);
-      totalTokens += this.TOKENS_PER_MESSAGE; // Add message overhead for system message
-    }
-
-    if (memorySystemMessage) {
-      totalTokens += this.countTokens(memorySystemMessage);
-      totalTokens += this.TOKENS_PER_MESSAGE; // Add message overhead for memory system message
-    }
-
-    const allMessages = [...messages, ...(newMessages || [])];
-
-    const result: CoreMessage[] = [];
-
-    // Process messages in reverse (newest first) so that we stop estimating tokens on old messages. Once we get to our limit of tokens there's no reason to keep processing older messages
-    for (let i = allMessages.length - 1; i >= 0; i--) {
-      const message = allMessages[i];
-
-      // Skip undefined messages (shouldn't happen, but TypeScript is concerned)
-      if (!message) continue;
-
-      const messageTokens = this.countTokens(message);
-
-      if (totalTokens + messageTokens <= this.maxTokens) {
-        // Insert at the beginning to maintain chronological order, but only if it's not a new message
-        if (i < messages.length) {
-          // less than messages.length because we're iterating in reverse. If the index is greater than messages.length it's a new message
-          result.unshift(message);
-        }
-        totalTokens += messageTokens;
-      } else {
-        this.logger.info(
-          `filtering ${allMessages.length - result.length}/${allMessages.length} messages, token limit of ${this.maxTokens} exceeded`,
-        );
-        // If we can't fit the message, we stop
-        break;
-      }
-    }
-
-    return result;
-  }
-
-  public countTokens(message: string | CoreMessage): number {
-    if (typeof message === `string`) {
-      return this.encoder.encode(message).length;
-    }
-
-    let tokenString = message.role;
-
-    if (typeof message.content === 'string') {
-      tokenString += message.content;
-    } else if (Array.isArray(message.content)) {
-      // Calculate tokens for each content part
-      for (const part of message.content) {
-        tokenString += part.type;
-        if (part.type === 'text') {
-          tokenString += part.text;
-        } else if (part.type === 'tool-call') {
-          tokenString += part.toolName as any;
-          if (part.args) {
-            tokenString += typeof part.args === 'string' ? part.args : JSON.stringify(part.args);
-          }
-        } else if (part.type === 'tool-result') {
-          // Token cost for result if present
-          if (part.result !== undefined) {
-            tokenString += typeof part.result === 'string' ? part.result : JSON.stringify(part.result);
-          }
-        } else {
-          tokenString += JSON.stringify(part);
-        }
-      }
-    }
-
-    // Ensure we account for message formatting tokens
-    // See: https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken#6-counting-tokens-for-chat-completions-api-calls
-    const messageOverhead = this.TOKENS_PER_MESSAGE;
-
-    // Count tool calls for additional overhead
-    let toolOverhead = 0;
-    if (Array.isArray(message.content)) {
-      for (const part of message.content) {
-        if (part.type === 'tool-call' || part.type === 'tool-result') {
-          toolOverhead += this.TOKENS_PER_TOOL;
-        }
-      }
-    }
-
-    const totalMessageOverhead = messageOverhead + toolOverhead;
-
-    return this.encoder.encode(tokenString).length + totalMessageOverhead;
-  }
-}
diff --git a/src/mastra/store/libsql/customLibSQLStore.ts b/src/mastra/store/libsql/customLibSQLStore.ts
deleted file mode 100644
index 702616bf1..000000000
--- a/src/mastra/store/libsql/customLibSQLStore.ts
+++ /dev/null
@@ -1,678 +0,0 @@
-// Memory用のLibSQLストアをカスタム
-// deleteThread関数にて対応するmessageが削除されない問題に対応
-// オリジナルだと、messageはthread削除に伴いcascade削除されるとコメントにあるが、実際には外部キーが付与されていないため、明示的に削除する必要がある
-// オリジナルのコード： https://github.com/mastra-ai/mastra/blob/%40mastra/core%400.8.3/packages/core/src/storage/libsql/index.ts
-// 実装方針：ほぼ、オリジナルのコードをコピーし、deleteThread関数のみを修正。libsqlについては動的importをする必要があるため、カスタム初期化関数（customConstruct）を作成して対応。そのほかライブラリのインポートは相対パスから絶対パスに変換
-
-import { join, resolve, isAbsolute } from 'node:path';
-import type { Client, InValue } from '@libsql/client' with { "resolution-mode": "require" };
-import type { MetricResult, TestInfo } from '@mastra/core/eval';
-import type { MessageType, StorageThreadType } from '@mastra/core/memory';
-import type { WorkflowRunState } from '@mastra/core/workflows';
-import { MastraStorage } from '@mastra/core/storage';
-import { TABLE_EVALS, TABLE_MESSAGES, TABLE_THREADS, TABLE_TRACES, TABLE_WORKFLOW_SNAPSHOT } from '@mastra/core/storage';
-import type { TABLE_NAMES } from '@mastra/core/storage';
-import type { StorageColumn, StorageGetMessagesArg, EvalRow } from '@mastra/core/storage';
-
-
-function safelyParseJSON(jsonString: string): any {
-  try {
-    return JSON.parse(jsonString);
-  } catch {
-    return {};
-  }
-}
-
-export interface LibSQLConfig {
-  url: string;
-  authToken?: string;
-}
-
-export class CustomLibSQLStore extends MastraStorage {
-  private client: Client;
-
-  constructor() {
-    super({ name: `LibSQLStore` });
-    // customConstructを使用するため、初期化時にクライアントをnullに設定
-    this.client = null as any;
-  }
-
-  // libsql/clientの動的インポートが必要なため、カスタム初期化関数を定義
-  async customConstruct({ config }: { config: LibSQLConfig }): Promise<void> {
-    const { createClient } = await import('@libsql/client');
-
-    // need to re-init every time for in memory dbs or the tables might not exist
-    if (config.url === ':memory:' || config.url.startsWith('file::memory:')) {
-      this.shouldCacheInit = false;
-    }
-
-    this.client = createClient({
-      url: this.rewriteDbUrl(config.url),
-      authToken: config.authToken,
-    });
-  }
-
-  // If we're in the .mastra/output directory, use the dir outside .mastra dir
-  // reason we need to do this is libsql relative file paths are based on cwd, not current file path
-  // since mastra dev sets cwd to .mastra/output this means running an agent directly vs running with mastra dev
-  // will put db files in different locations, leading to an inconsistent experience between the two.
-  // Ex: with `file:ex.db`
-  // 1. `mastra dev`: ${cwd}/.mastra/output/ex.db
-  // 2. `tsx src/index.ts`: ${cwd}/ex.db
-  // so if we're in .mastra/output we need to rewrite the file url to be relative to the project root dir
-  // or the experience will be inconsistent
-  // this means `file:` urls are always relative to project root
-  // TODO: can we make this easier via bundling? https://github.com/mastra-ai/mastra/pull/2783#pullrequestreview-2662444241
-  protected rewriteDbUrl(url: string): string {
-    if (url.startsWith('file:') && url !== 'file::memory:') {
-      const pathPart = url.slice('file:'.length);
-
-      if (isAbsolute(pathPart)) {
-        return url;
-      }
-
-      const cwd = process.cwd();
-
-      if (cwd.includes('.mastra') && (cwd.endsWith(`output`) || cwd.endsWith(`output/`) || cwd.endsWith(`output\\`))) {
-        const baseDir = join(cwd, `..`, `..`); // <- .mastra/output/../../
-
-        const fullPath = resolve(baseDir, pathPart);
-
-        this.logger.debug(
-          `Initializing LibSQL db with url ${url} with relative file path from inside .mastra/output directory. Rewriting relative file url to "file:${fullPath}". This ensures it's outside the .mastra/output directory.`,
-        );
-
-        return `file:${fullPath}`;
-      }
-    }
-
-    return url;
-  }
-
-  private getCreateTableSQL(tableName: TABLE_NAMES, schema: Record<string, StorageColumn>): string {
-    const columns = Object.entries(schema).map(([name, col]) => {
-      let type = col.type.toUpperCase();
-      if (type === 'TEXT') type = 'TEXT';
-      if (type === 'TIMESTAMP') type = 'TEXT'; // Store timestamps as ISO strings
-      // if (type === 'BIGINT') type = 'INTEGER';
-
-      const nullable = col.nullable ? '' : 'NOT NULL';
-      const primaryKey = col.primaryKey ? 'PRIMARY KEY' : '';
-
-      return `${name} ${type} ${nullable} ${primaryKey}`.trim();
-    });
-
-    // For workflow_snapshot table, create a composite primary key
-    if (tableName === TABLE_WORKFLOW_SNAPSHOT) {
-      const stmnt = `CREATE TABLE IF NOT EXISTS ${tableName} (
-                ${columns.join(',\n')},
-                PRIMARY KEY (workflow_name, run_id)
-            )`;
-      return stmnt;
-    }
-
-    return `CREATE TABLE IF NOT EXISTS ${tableName} (${columns.join(', ')})`;
-  }
-
-  async createTable({
-    tableName,
-    schema,
-  }: {
-    tableName: TABLE_NAMES;
-    schema: Record<string, StorageColumn>;
-  }): Promise<void> {
-    try {
-      this.logger.debug(`Creating database table`, { tableName, operation: 'schema init' });
-      const sql = this.getCreateTableSQL(tableName, schema);
-      await this.client.execute(sql);
-    } catch (error) {
-      this.logger.error(`Error creating table ${tableName}: ${error}`);
-      throw error;
-    }
-  }
-
-  async clearTable({ tableName }: { tableName: TABLE_NAMES }): Promise<void> {
-    try {
-      await this.client.execute(`DELETE FROM ${tableName}`);
-    } catch (e) {
-      if (e instanceof Error) {
-        this.logger.error(e.message);
-      }
-    }
-  }
-
-  private prepareStatement({ tableName, record }: { tableName: TABLE_NAMES; record: Record<string, any> }): {
-    sql: string;
-    args: InValue[];
-  } {
-    const columns = Object.keys(record);
-    const values = Object.values(record).map(v => {
-      if (typeof v === `undefined`) {
-        // returning an undefined value will cause libsql to throw
-        return null;
-      }
-      if (v instanceof Date) {
-        return v.toISOString();
-      }
-      return typeof v === 'object' ? JSON.stringify(v) : v;
-    });
-    const placeholders = values.map(() => '?').join(', ');
-
-    return {
-      sql: `INSERT OR REPLACE INTO ${tableName} (${columns.join(', ')}) VALUES (${placeholders})`,
-      args: values,
-    };
-  }
-
-  async insert({ tableName, record }: { tableName: TABLE_NAMES; record: Record<string, any> }): Promise<void> {
-    try {
-      await this.client.execute(
-        this.prepareStatement({
-          tableName,
-          record,
-        }),
-      );
-    } catch (error) {
-      this.logger.error(`Error upserting into table ${tableName}: ${error}`);
-      throw error;
-    }
-  }
-
-  async batchInsert({ tableName, records }: { tableName: TABLE_NAMES; records: Record<string, any>[] }): Promise<void> {
-    if (records.length === 0) return;
-
-    try {
-      const batchStatements = records.map(r => this.prepareStatement({ tableName, record: r }));
-      await this.client.batch(batchStatements, 'write');
-    } catch (error) {
-      this.logger.error(`Error upserting into table ${tableName}: ${error}`);
-      throw error;
-    }
-  }
-
-  async load<R>({ tableName, keys }: { tableName: TABLE_NAMES; keys: Record<string, string> }): Promise<R | null> {
-    const conditions = Object.entries(keys)
-      .map(([key]) => `${key} = ?`)
-      .join(' AND ');
-    const values = Object.values(keys);
-
-    const result = await this.client.execute({
-      sql: `SELECT * FROM ${tableName} WHERE ${conditions} ORDER BY createdAt DESC LIMIT 1`,
-      args: values,
-    });
-
-    if (!result.rows || result.rows.length === 0) {
-      return null;
-    }
-
-    const row = result.rows[0];
-    // Checks whether the string looks like a JSON object ({}) or array ([])
-    // If the string starts with { or [, it assumes it's JSON and parses it
-    // Otherwise, it just returns, preventing unintended number conversions
-    const parsed = Object.fromEntries(
-      Object.entries(row || {}).map(([k, v]) => {
-        try {
-          return [k, typeof v === 'string' ? (v.startsWith('{') || v.startsWith('[') ? JSON.parse(v) : v) : v];
-        } catch {
-          return [k, v];
-        }
-      }),
-    );
-
-    return parsed as R;
-  }
-
-  async getThreadById({ threadId }: { threadId: string }): Promise<StorageThreadType | null> {
-    const result = await this.load<StorageThreadType>({
-      tableName: TABLE_THREADS,
-      keys: { id: threadId },
-    });
-
-    if (!result) {
-      return null;
-    }
-
-    return {
-      ...result,
-      metadata: typeof result.metadata === 'string' ? JSON.parse(result.metadata) : result.metadata,
-    };
-  }
-
-  async getThreadsByResourceId({ resourceId }: { resourceId: string }): Promise<StorageThreadType[]> {
-    const result = await this.client.execute({
-      sql: `SELECT * FROM ${TABLE_THREADS} WHERE resourceId = ?`,
-      args: [resourceId],
-    });
-
-    if (!result.rows) {
-      return [];
-    }
-
-    return result.rows.map(thread => ({
-      id: thread.id,
-      resourceId: thread.resourceId,
-      title: thread.title,
-      createdAt: thread.createdAt,
-      updatedAt: thread.updatedAt,
-      metadata: typeof thread.metadata === 'string' ? JSON.parse(thread.metadata) : thread.metadata,
-    })) as any as StorageThreadType[];
-  }
-
-  async saveThread({ thread }: { thread: StorageThreadType }): Promise<StorageThreadType> {
-    await this.insert({
-      tableName: TABLE_THREADS,
-      record: {
-        ...thread,
-        metadata: JSON.stringify(thread.metadata),
-      },
-    });
-
-    return thread;
-  }
-
-  async updateThread({
-    id,
-    title,
-    metadata,
-  }: {
-    id: string;
-    title: string;
-    metadata: Record<string, unknown>;
-  }): Promise<StorageThreadType> {
-    const thread = await this.getThreadById({ threadId: id });
-    if (!thread) {
-      throw new Error(`Thread ${id} not found`);
-    }
-
-    const updatedThread = {
-      ...thread,
-      title,
-      metadata: {
-        ...thread.metadata,
-        ...metadata,
-      },
-    };
-
-    await this.client.execute({
-      sql: `UPDATE ${TABLE_THREADS} SET title = ?, metadata = ? WHERE id = ?`,
-      args: [title, JSON.stringify(updatedThread.metadata), id],
-    });
-
-    return updatedThread;
-  }
-
-  // ここだけ修正
-  async deleteThread({ threadId }: { threadId: string }): Promise<void> {
-    await this.client.execute({
-      sql: `DELETE FROM ${TABLE_THREADS} WHERE id = ?`,
-      args: [threadId],
-    });
-    // threadに紐づくメッセージも明示的に削除する
-    await this.client.execute({
-      sql: `DELETE FROM ${TABLE_MESSAGES} WHERE thread_id = ?`,
-      args: [threadId],
-    });
-  }
-
-  private parseRow(row: any): MessageType {
-    let content = row.content;
-    try {
-      content = JSON.parse(row.content);
-    } catch {
-      // use content as is if it's not JSON
-    }
-    return {
-      id: row.id,
-      content,
-      role: row.role,
-      type: row.type,
-      createdAt: new Date(row.createdAt as string),
-      threadId: row.thread_id,
-    } as MessageType;
-  }
-
-  async getMessages<T extends MessageType[]>({ threadId, selectBy }: StorageGetMessagesArg): Promise<T> {
-    try {
-      const messages: MessageType[] = [];
-      const limit = typeof selectBy?.last === `number` ? selectBy.last : 40;
-
-      // If we have specific messages to select
-      if (selectBy?.include?.length) {
-        const includeIds = selectBy.include.map(i => i.id);
-        const maxPrev = Math.max(...selectBy.include.map(i => i.withPreviousMessages || 0));
-        const maxNext = Math.max(...selectBy.include.map(i => i.withNextMessages || 0));
-
-        // Get messages around all specified IDs in one query using row numbers
-        const includeResult = await this.client.execute({
-          sql: `
-            WITH numbered_messages AS (
-              SELECT
-                id,
-                content,
-                role,
-                type,
-                "createdAt",
-                thread_id,
-                ROW_NUMBER() OVER (ORDER BY "createdAt" ASC) as row_num
-              FROM "${TABLE_MESSAGES}"
-              WHERE thread_id = ?
-            ),
-            target_positions AS (
-              SELECT row_num as target_pos
-              FROM numbered_messages
-              WHERE id IN (${includeIds.map(() => '?').join(', ')})
-            )
-            SELECT DISTINCT m.*
-            FROM numbered_messages m
-            CROSS JOIN target_positions t
-            WHERE m.row_num BETWEEN (t.target_pos - ?) AND (t.target_pos + ?)
-            ORDER BY m."createdAt" ASC
-          `,
-          args: [threadId, ...includeIds, maxPrev, maxNext],
-        });
-
-        if (includeResult.rows) {
-          messages.push(...includeResult.rows.map((row: any) => this.parseRow(row)));
-        }
-      }
-
-      // Get remaining messages, excluding already fetched IDs
-      const excludeIds = messages.map(m => m.id);
-      const remainingSql = `
-        SELECT
-          id,
-          content,
-          role,
-          type,
-          "createdAt",
-          thread_id
-        FROM "${TABLE_MESSAGES}"
-        WHERE thread_id = ?
-        ${excludeIds.length ? `AND id NOT IN (${excludeIds.map(() => '?').join(', ')})` : ''}
-        ORDER BY "createdAt" DESC
-        LIMIT ?
-      `;
-      const remainingArgs = [threadId, ...(excludeIds.length ? excludeIds : []), limit];
-
-      const remainingResult = await this.client.execute({
-        sql: remainingSql,
-        args: remainingArgs,
-      });
-
-      if (remainingResult.rows) {
-        messages.push(...remainingResult.rows.map((row: any) => this.parseRow(row)));
-      }
-
-      // Sort all messages by creation date
-      messages.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());
-
-      return messages as T;
-    } catch (error) {
-      this.logger.error('Error getting messages:', error as Error);
-      throw error;
-    }
-  }
-
-  async saveMessages({ messages }: { messages: MessageType[] }): Promise<MessageType[]> {
-    if (messages.length === 0) return messages;
-
-    try {
-      const threadId = messages[0]?.threadId;
-      if (!threadId) {
-        throw new Error('Thread ID is required');
-      }
-
-      // Prepare batch statements for all messages
-      const batchStatements = messages.map(message => {
-        const time = message.createdAt || new Date();
-        return {
-          sql: `INSERT INTO ${TABLE_MESSAGES} (id, thread_id, content, role, type, createdAt)
-                VALUES (?, ?, ?, ?, ?, ?)`,
-          args: [
-            message.id,
-            threadId,
-            typeof message.content === 'object' ? JSON.stringify(message.content) : message.content,
-            message.role,
-            message.type,
-            time instanceof Date ? time.toISOString() : time,
-          ],
-        };
-      });
-
-      // Execute all inserts in a single batch
-      await this.client.batch(batchStatements, 'write');
-
-      return messages;
-    } catch (error) {
-      this.logger.error('Failed to save messages in database: ' + (error as { message: string })?.message);
-      throw error;
-    }
-  }
-
-  private transformEvalRow(row: Record<string, any>): EvalRow {
-    const resultValue = JSON.parse(row.result as string);
-    const testInfoValue = row.test_info ? JSON.parse(row.test_info as string) : undefined;
-
-    if (!resultValue || typeof resultValue !== 'object' || !('score' in resultValue)) {
-      throw new Error(`Invalid MetricResult format: ${JSON.stringify(resultValue)}`);
-    }
-
-    return {
-      input: row.input as string,
-      output: row.output as string,
-      result: resultValue as MetricResult,
-      agentName: row.agent_name as string,
-      metricName: row.metric_name as string,
-      instructions: row.instructions as string,
-      testInfo: testInfoValue as TestInfo,
-      globalRunId: row.global_run_id as string,
-      runId: row.run_id as string,
-      createdAt: row.created_at as string,
-    };
-  }
-
-  async getEvalsByAgentName(agentName: string, type?: 'test' | 'live'): Promise<EvalRow[]> {
-    try {
-      const baseQuery = `SELECT * FROM ${TABLE_EVALS} WHERE agent_name = ?`;
-      const typeCondition =
-        type === 'test'
-          ? " AND test_info IS NOT NULL AND test_info->>'testPath' IS NOT NULL"
-          : type === 'live'
-            ? " AND (test_info IS NULL OR test_info->>'testPath' IS NULL)"
-            : '';
-
-      const result = await this.client.execute({
-        sql: `${baseQuery}${typeCondition} ORDER BY created_at DESC`,
-        args: [agentName],
-      });
-
-      return result.rows?.map(row => this.transformEvalRow(row)) ?? [];
-    } catch (error) {
-      // Handle case where table doesn't exist yet
-      if (error instanceof Error && error.message.includes('no such table')) {
-        return [];
-      }
-      this.logger.error('Failed to get evals for the specified agent: ' + (error as any)?.message);
-      throw error;
-    }
-  }
-
-  // TODO: add types
-  async getTraces(
-    {
-      name,
-      scope,
-      page,
-      perPage,
-      attributes,
-      filters,
-    }: {
-      name?: string;
-      scope?: string;
-      page: number;
-      perPage: number;
-      attributes?: Record<string, string>;
-      filters?: Record<string, any>;
-    } = {
-      page: 0,
-      perPage: 100,
-    },
-  ): Promise<any[]> {
-    const limit = perPage;
-    const offset = page * perPage;
-
-    const args: (string | number)[] = [];
-
-    const conditions: string[] = [];
-    if (name) {
-      conditions.push("name LIKE CONCAT(?, '%')");
-    }
-    if (scope) {
-      conditions.push('scope = ?');
-    }
-    if (attributes) {
-      Object.keys(attributes).forEach(key => {
-        conditions.push(`attributes->>'$.${key}' = ?`);
-      });
-    }
-
-    if (filters) {
-      Object.entries(filters).forEach(([key, _value]) => {
-        conditions.push(`${key} = ?`);
-      });
-    }
-    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';
-
-    if (name) {
-      args.push(name);
-    }
-
-    if (scope) {
-      args.push(scope);
-    }
-
-    if (attributes) {
-      for (const [, value] of Object.entries(attributes)) {
-        args.push(value);
-      }
-    }
-
-    if (filters) {
-      for (const [, value] of Object.entries(filters)) {
-        args.push(value);
-      }
-    }
-
-    args.push(limit, offset);
-
-    const result = await this.client.execute({
-      sql: `SELECT * FROM ${TABLE_TRACES} ${whereClause} ORDER BY "startTime" DESC LIMIT ? OFFSET ?`,
-      args,
-    });
-
-    if (!result.rows) {
-      return [];
-    }
-
-    return result.rows.map(row => ({
-      id: row.id,
-      parentSpanId: row.parentSpanId,
-      traceId: row.traceId,
-      name: row.name,
-      scope: row.scope,
-      kind: row.kind,
-      status: safelyParseJSON(row.status as string),
-      events: safelyParseJSON(row.events as string),
-      links: safelyParseJSON(row.links as string),
-      attributes: safelyParseJSON(row.attributes as string),
-      startTime: row.startTime,
-      endTime: row.endTime,
-      other: safelyParseJSON(row.other as string),
-      createdAt: row.createdAt,
-    })) as any;
-  }
-
-  async getWorkflowRuns({
-    workflowName,
-    fromDate,
-    toDate,
-    limit,
-    offset,
-  }: {
-    workflowName?: string;
-    fromDate?: Date;
-    toDate?: Date;
-    limit?: number;
-    offset?: number;
-  } = {}): Promise<{
-    runs: Array<{
-      workflowName: string;
-      runId: string;
-      snapshot: WorkflowRunState | string;
-      createdAt: Date;
-      updatedAt: Date;
-    }>;
-    total: number;
-  }> {
-    const conditions: string[] = [];
-    const args: InValue[] = [];
-
-    if (workflowName) {
-      conditions.push('workflow_name = ?');
-      args.push(workflowName);
-    }
-
-    if (fromDate) {
-      conditions.push('createdAt >= ?');
-      args.push(fromDate.toISOString());
-    }
-
-    if (toDate) {
-      conditions.push('createdAt <= ?');
-      args.push(toDate.toISOString());
-    }
-
-    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : '';
-
-    let total = 0;
-    // Only get total count when using pagination
-    if (limit !== undefined && offset !== undefined) {
-      const countResult = await this.client.execute({
-        sql: `SELECT COUNT(*) as count FROM ${TABLE_WORKFLOW_SNAPSHOT} ${whereClause}`,
-        args,
-      });
-      total = Number(countResult.rows?.[0]?.count ?? 0);
-    }
-
-    // Get results
-    const result = await this.client.execute({
-      sql: `SELECT * FROM ${TABLE_WORKFLOW_SNAPSHOT} ${whereClause} ORDER BY createdAt DESC${limit !== undefined && offset !== undefined ? ` LIMIT ? OFFSET ?` : ''}`,
-      args: limit !== undefined && offset !== undefined ? [...args, limit, offset] : args,
-    });
-
-    const runs = (result.rows || []).map(row => {
-      let parsedSnapshot: WorkflowRunState | string = row.snapshot as string;
-      if (typeof parsedSnapshot === 'string') {
-        try {
-          parsedSnapshot = JSON.parse(row.snapshot as string) as WorkflowRunState;
-        } catch (e) {
-          // If parsing fails, return the raw snapshot string
-          console.warn(`Failed to parse snapshot for workflow ${row.workflow_name}: ${e}`);
-        }
-      }
-
-      return {
-        workflowName: row.workflow_name as string,
-        runId: row.run_id as string,
-        snapshot: parsedSnapshot,
-        createdAt: new Date(row.createdAt as string),
-        updatedAt: new Date(row.updatedAt as string),
-      };
-    });
-
-    // Use runs.length as total when not paginating
-    return { runs, total: total || runs.length };
-  }
-}
-
-export { LibSQLStore as DefaultStorage };
diff --git a/src/mastra/tools/index.ts b/src/mastra/tools/index.ts
new file mode 100644
index 000000000..e60842d81
--- /dev/null
+++ b/src/mastra/tools/index.ts
@@ -0,0 +1,106 @@
+import { ToolsInput } from '@mastra/core/agent';
+import { z } from 'zod';
+import { McpSchema } from '../../main/types/schema';
+import { documentQueryTool } from './sourcesTools';
+import type { RedmineBaseInfo } from './redmine/types';
+import { createRedmineClient, setupRedmineTools } from './redmine';
+import { setupGitLabTools } from './gitlab';
+
+export type InitializeToolsConfig = {
+  documentTool?: boolean;
+  redmineTool?: {
+    endpoint: string;
+    apiKey: string;
+  };
+  gitlabTool?: {
+    endpoint: string;
+    apiKey: string;
+  };
+  mcp?: {
+    config: z.infer<typeof McpSchema>;
+    id: string;
+  };
+};
+
+type InitializeToolsResult = {
+  documentTool?: {
+    success: boolean;
+    error?: string;
+  };
+  redmineTool?: {
+    success: boolean;
+    redmineInfo?: RedmineBaseInfo;
+    error?: string;
+  };
+  gitlabTool?: {
+    success: boolean;
+    error?: string;
+  };
+  toolsInput: ToolsInput;
+};
+
+// ツールを初期化/更新する関数
+export const initializeTools = async (
+  config: InitializeToolsConfig,
+): Promise<InitializeToolsResult> => {
+  const result: InitializeToolsResult = { toolsInput: {} };
+  let tools: ToolsInput = {};
+  if (config.documentTool) {
+    try {
+      tools.documentQueryTool = documentQueryTool;
+      result.documentTool = { success: true };
+    } catch (error) {
+      result.documentTool = {
+        success: false,
+        error: error instanceof Error ? error.message : JSON.stringify(error),
+      };
+    }
+  }
+  if (
+    config.redmineTool &&
+    config.redmineTool.endpoint &&
+    config.redmineTool.apiKey
+  ) {
+    try {
+      // Redmineクライアントを作成
+      const client = createRedmineClient({
+        apiKey: config.redmineTool.apiKey,
+        apiUrl: config.redmineTool.endpoint,
+      });
+
+      // 基本情報の取得
+      const redmineInfo = await client.getBaseInfo();
+      // 作成したクライアントを使ってツールを初期化
+      const redmineTools = await setupRedmineTools(client);
+      tools = { ...tools, ...redmineTools };
+      result.redmineTool = { success: true, redmineInfo };
+    } catch (error) {
+      result.redmineTool = {
+        success: false,
+        error: error instanceof Error ? error.message : JSON.stringify(error),
+      };
+    }
+  }
+  if (
+    config.gitlabTool &&
+    config.gitlabTool.endpoint &&
+    config.gitlabTool.apiKey
+  ) {
+    try {
+      // GitLabツールの初期化
+      const gitlabTools = await setupGitLabTools({
+        token: config.gitlabTool.apiKey,
+        host: config.gitlabTool.endpoint,
+      });
+      tools = { ...tools, ...gitlabTools };
+      result.gitlabTool = { success: true };
+    } catch (error) {
+      result.gitlabTool = {
+        success: false,
+        error: error instanceof Error ? error.message : JSON.stringify(error),
+      };
+    }
+  }
+  result.toolsInput = tools;
+  return result;
+};
diff --git a/src/mastra/tools/mcp/index.ts b/src/mastra/tools/mcp/index.ts
new file mode 100644
index 000000000..96ae7b6c9
--- /dev/null
+++ b/src/mastra/tools/mcp/index.ts
@@ -0,0 +1,90 @@
+import { MCPClient, LogMessage } from '@mastra/mcp';
+import { writeFileSync } from 'fs';
+import { z } from 'zod';
+import { McpSchema } from '../../../main/types/schema';
+
+const LOG_FILE_PATH = './mcp.log';
+
+/**
+ * ログメッセージをフォーマットする
+ */
+const formatLogMessage = (logMessage: LogMessage): string => {
+  const timestamp = logMessage.timestamp
+    .toISOString()
+    .replace('T', ' ')
+    .split('.')[0];
+  const details = logMessage.details ? JSON.stringify(logMessage.details) : '';
+  return `[${timestamp}] [${logMessage.level}] ${logMessage.message} ${details}`.trim();
+};
+
+/**
+ * ログをファイルに書き込む
+ */
+const writeLog = (logMessage: LogMessage): void => {
+  try {
+    const formattedLog = formatLogMessage(logMessage);
+    writeFileSync(LOG_FILE_PATH, `${formattedLog}\n`, { flag: 'a' });
+  } catch (error) {
+    console.error('ログファイルの書き込みに失敗しました:', error);
+  }
+};
+
+/**
+ * ログファイルを削除する
+ */
+const deleteLogFile = (): void => {
+  try {
+    writeFileSync(LOG_FILE_PATH, '', { flag: 'w' });
+  } catch (error) {
+    console.error('ログファイルの削除に失敗しました:', error);
+  }
+};
+
+/**
+ * MCPClientを初期化/アップデートする
+ * コネクションエラーの際はログファイルにエラーメッセージを出力する
+ */
+export const initializeMCPClient = async ({
+  mcpConfig,
+  id,
+}: {
+  mcpConfig: z.infer<typeof McpSchema>;
+  id: string;
+}): Promise<{
+  success: boolean;
+  mcpClient?: MCPClient;
+  logPath: string;
+}> => {
+  deleteLogFile();
+  try {
+    // それぞれのサーバ設定にログを設定
+    const mcpConfigWithLoggerOption = Object.fromEntries(
+      Object.entries(mcpConfig).map(([key, value]) => [
+        key,
+        {
+          ...value,
+          logger: writeLog,
+        },
+      ]),
+    );
+    // MastraのMCPClientでは、コンストラクタにidを指定することで、パッケージ側でシングルトン変数を利用して（メモリ内で）インスタンスを管理してくれる
+    // https://github.com/mastra-ai/mastra/blob/%40mastra/mcp%400.10.4/packages/mcp/src/client/configuration.ts#L9
+    const mcpClient = new MCPClient({
+      id,
+      servers: mcpConfigWithLoggerOption,
+    });
+
+    // MCPコネクション確認
+    await mcpClient.getToolsets();
+    return {
+      success: true,
+      logPath: LOG_FILE_PATH,
+    };
+  } catch (error) {
+    console.error('MCPClientの初期化に失敗しました:', error);
+    return {
+      success: false,
+      logPath: LOG_FILE_PATH,
+    };
+  }
+};
diff --git a/src/mastra/tools/sourcesTools.ts b/src/mastra/tools/sourcesTools.ts
index a4ec79efb..778879e35 100644
--- a/src/mastra/tools/sourcesTools.ts
+++ b/src/mastra/tools/sourcesTools.ts
@@ -1,14 +1,13 @@
 import { APICallError } from 'ai';
 import { z } from 'zod';
-import { Agent } from '@mastra/core/agent';
 import { createTool } from '@mastra/core/tools';
 import { eq, and } from 'drizzle-orm';
 import { sources } from '../../db/schema';
 import getDb from '../../db/index';
 import FileExtractor from '../../main/utils/fileExtractor';
-import { getSourceQuerySystemPrompt } from '../agents/prompts';
-import openAICompatibleModel from '../agents/model/openAICompatible';
 import { createBaseToolResponseSchema, RunToolStatus } from './types';
+import { DocumentExpertAgentRuntimeContext } from '../agents/toolAgents';
+import { createRuntimeContext, judgeFinishReason } from '../agents/lib';
 
 /**
  * ソース一覧表示ツール
@@ -116,7 +115,13 @@ export const documentQueryTool = createTool({
       ),
     }),
   ),
-  execute: async ({ context: { documentQueries } }, options) => {
+  execute: async ({ context: { documentQueries }, mastra }, options) => {
+    if (mastra === undefined) {
+      return {
+        status: 'failed' as RunToolStatus,
+        error: 'Mastraインスタンスが初期化されていません',
+      };
+    }
     let status: RunToolStatus = 'failed';
     try {
       const db = await getDb();
@@ -147,24 +152,35 @@ export const documentQueryTool = createTool({
       // 各クエリを並列で処理
       const answers = await Promise.all(
         documentQueries.map(async (item) => {
-          const source = sourceDataMap.get(item.sourceId);
-          const { content } = await FileExtractor.extractText(source.path);
+          let answer: string = '';
+          try {
+            const source = sourceDataMap.get(item.sourceId);
+            const { content } = await FileExtractor.extractText(source.path);
+
+            const documentExpertAgent = mastra.getAgent('documentExpertAgent');
+
+            const runtimeContext =
+              createRuntimeContext<DocumentExpertAgentRuntimeContext>();
 
-          const sourceExpertAgent = new Agent({
-            name: 'documentExpertAgent',
-            instructions: getSourceQuerySystemPrompt(content),
-            model: openAICompatibleModel(),
-          });
+            runtimeContext.set('documentContent', content);
 
+            const res = await documentExpertAgent.generate(item.query, {
+              abortSignal: options?.abortSignal,
+              runtimeContext,
+            });
+            const { success, reason } = judgeFinishReason(res.finishReason);
+            if (!success) {
+              throw new Error(reason);
+            }
+            answer = res.text;
+          } catch (error) {
+            answer = `error occured while processing the query: ${error instanceof Error ? `: ${error.message}` : JSON.stringify(error)}`;
+          }
           return {
             sourceId: item.sourceId,
             path: item.path,
             query: item.query,
-            answer: (
-              await sourceExpertAgent.generate(item.query, {
-                abortSignal: options?.abortSignal,
-              })
-            ).text,
+            answer,
           };
         }),
       );
diff --git a/src/mastra/workflows/sourceRegistration.ts b/src/mastra/workflows/sourceRegistration.ts
index 1c7ed9e9e..eddbd01ec 100644
--- a/src/mastra/workflows/sourceRegistration.ts
+++ b/src/mastra/workflows/sourceRegistration.ts
@@ -1,37 +1,34 @@
 /* eslint-disable import/prefer-default-export */
 import { APICallError } from 'ai';
-import { Step, Workflow } from '@mastra/core/workflows';
+import { createWorkflow, createStep } from '@mastra/core/workflows';
 import { z } from 'zod';
-import { Agent } from '@mastra/core/agent';
-import { eq } from 'drizzle-orm';
-import getDb from '../../db';
-import { sources, topics as dbTopics } from '../../db/schema';
-import {
-  SOURCE_ANALYSIS_SYSTEM_PROMPT,
-  EXTRACT_TOPIC_AND_SUMMARY_SYSTEM_PROMPT,
-} from '../agents/prompts';
-import openAICompatibleModel from '../agents/model/openAICompatible';
 import { stepStatus } from './types';
 import { baseStepOutputSchema } from './schema';
+import { getSourceRepository } from '../../db/repository/sourceRepository';
+import { createRuntimeContext, judgeFinishReason } from '../agents/lib';
 
-// ファイルパスを入力とするスキーマ
 const triggerSchema = z.object({
   filePath: z.string().describe('登録するソースのファイルパス'),
   content: z.string().describe('登録するソースの内容'),
 });
 
+const analyzeSourceOutputSchema = baseStepOutputSchema.extend({
+  sourceId: z.number(),
+  title: z.string(),
+  summary: z.string(),
+});
+
+const sourceRepository = getSourceRepository();
+
 // ソース分析と登録のステップ
-const analyzeSourceStep = new Step({
+const analyzeSourceStep = createStep({
   id: 'analyzeSourceStep',
   description: 'ソース文書を分析し、タイトルと要約を生成してDBに登録する',
-  outputSchema: baseStepOutputSchema.extend({
-    sourceId: z.number(),
-    title: z.string(),
-    summary: z.string(),
-  }),
-  execute: async ({ context }) => {
+  inputSchema: triggerSchema,
+  outputSchema: analyzeSourceOutputSchema,
+  execute: async ({ inputData, mastra }) => {
     // トリガーから変数を取得
-    const { content, filePath } = context.triggerData;
+    const { content, filePath } = inputData;
 
     // 結果の初期値
     let status: stepStatus = 'failed';
@@ -40,35 +37,19 @@ const analyzeSourceStep = new Step({
     let summary = '';
     let errorMessage: string | undefined;
 
-    const db = await getDb();
-
     try {
       // まず初期レコードを作成
-      const insertResult = await db
-        .insert(sources)
-        .values({
-          path: filePath,
-          title: '', // 一時的な空の値
-          summary: '', // 一時的な空の値
-          status: 'processing' as const,
-        })
-        .onConflictDoUpdate({
-          target: sources.path,
-          set: {
-            status: 'processing' as const,
-            error: null,
-          },
-        })
-        .returning({ id: sources.id });
+      const insertResult = await sourceRepository.initializeProcessingSource({
+        path: filePath,
+        title: '', // 一時的な空の値
+        summary: '', // 一時的な空の値
+        status: 'processing',
+      });
 
-      sourceId = insertResult[0].id;
+      sourceId = insertResult.id;
 
       // LLMを使用してタイトルと要約を生成
-      const summarizeSourceAgent = new Agent({
-        name: 'summarizeSourceAgent',
-        instructions: SOURCE_ANALYSIS_SYSTEM_PROMPT,
-        model: openAICompatibleModel(),
-      });
+      const summarizeSourceAgent = mastra.getAgent('summarizeSourceAgent');
 
       const outputSchema = z.object({
         title: z.string(),
@@ -76,21 +57,27 @@ const analyzeSourceStep = new Step({
       });
 
       const analysisResult = await summarizeSourceAgent.generate(content, {
+        runtimeContext: createRuntimeContext(),
         output: outputSchema,
       });
 
+      const { success, reason } = judgeFinishReason(
+        analysisResult.finishReason,
+      );
+      if (!success) {
+        throw new Error(reason);
+      }
+
       title = analysisResult.object.title;
       summary = analysisResult.object.summary;
 
       // 成功時の更新
-      await db
-        .update(sources)
-        .set({
-          title,
-          summary,
-          error: null,
-        })
-        .where(eq(sources.id, sourceId));
+      await sourceRepository.updateSource({
+        id: sourceId,
+        title,
+        summary,
+        error: null,
+      });
 
       status = 'success';
     } catch (error) {
@@ -107,10 +94,11 @@ const analyzeSourceStep = new Step({
       console.error(error);
 
       // DBにエラー情報を更新
-      await db
-        .update(sources)
-        .set({ status: 'failed' as const, error: errorMessage })
-        .where(eq(sources.id, sourceId));
+      await sourceRepository.updateProcessingStatus({
+        id: sourceId,
+        status: 'failed',
+        error: errorMessage,
+      });
     }
 
     return {
@@ -124,13 +112,22 @@ const analyzeSourceStep = new Step({
 });
 
 // トピックと要約を一度に生成するステップ
-const extractTopicAndSummaryStep = new Step({
+const extractTopicAndSummaryStep = createStep({
   id: 'generateTopicAndSummaryStep',
   description: 'トピックとその要約を生成してデータベースに登録する',
+  inputSchema: analyzeSourceOutputSchema,
   outputSchema: baseStepOutputSchema,
-  execute: async ({ context }) => {
-    const { content } = context.triggerData;
-    const { sourceId } = context.getStepResult('analyzeSourceStep')!;
+  execute: async ({ inputData, getInitData, mastra }) => {
+    const { content } = getInitData() as z.infer<typeof triggerSchema>;
+    const { sourceId } = inputData;
+
+    // 前ステップがfailedの場合はそのまま返す
+    if (inputData.status === 'failed') {
+      return {
+        status: 'failed' as stepStatus,
+        errorMessage: inputData.errorMessage,
+      };
+    }
 
     // 結果の初期値
     let status: stepStatus = 'failed';
@@ -138,11 +135,7 @@ const extractTopicAndSummaryStep = new Step({
 
     try {
       // LLMを使用してトピックと要約を生成
-      const summarizeTopicAgent = new Agent({
-        name: 'summarizeTopicAgent',
-        instructions: EXTRACT_TOPIC_AND_SUMMARY_SYSTEM_PROMPT,
-        model: openAICompatibleModel(),
-      });
+      const summarizeTopicAgent = mastra.getAgent('summarizeTopicAgent');
 
       const outputSchema = z.object({
         topicAndSummaryList: z.array(
@@ -154,8 +147,15 @@ const extractTopicAndSummaryStep = new Step({
       });
 
       const analysisResult = await summarizeTopicAgent.generate(content, {
+        runtimeContext: createRuntimeContext(),
         output: outputSchema,
       });
+      const { success, reason } = judgeFinishReason(
+        analysisResult.finishReason,
+      );
+      if (!success) {
+        throw new Error(reason);
+      }
 
       // トピックと要約をデータベースに登録
       const values = analysisResult.object.topicAndSummaryList.map(
@@ -165,17 +165,14 @@ const extractTopicAndSummaryStep = new Step({
           summary: topicSummary.summary,
         }),
       );
-      const db = await getDb();
-      await db.insert(dbTopics).values(values);
+      await sourceRepository.registerTopic(values);
 
       // 成功時の更新
-      await db
-        .update(sources)
-        .set({
-          status: 'completed' as const,
-          error: null,
-        })
-        .where(eq(sources.id, sourceId));
+      await sourceRepository.updateProcessingStatus({
+        id: sourceId,
+        status: 'completed',
+        error: null,
+      });
       status = 'success';
     } catch (error) {
       let errorDetail: string;
@@ -194,14 +191,11 @@ const extractTopicAndSummaryStep = new Step({
       console.error(error);
 
       // DBにエラー情報を更新
-      const db = await getDb();
-      await db
-        .update(sources)
-        .set({
-          status: 'failed' as const,
-          error: errorMessage,
-        })
-        .where(eq(sources.id, sourceId));
+      await sourceRepository.updateProcessingStatus({
+        id: sourceId,
+        status: 'failed',
+        error: errorMessage,
+      });
     }
 
     return {
@@ -211,167 +205,15 @@ const extractTopicAndSummaryStep = new Step({
   },
 });
 
-// トピックを抽出するステップ
-// const extractTopicsStep = new Step({
-//   id: 'extractTopicsStep',
-//   description: 'ソースからトピックを抽出する',
-//   outputSchema: baseStepOutputSchema.extend({
-//     sourceId: z.number(),
-//     topics: z.array(z.string()),
-//   }),
-//   execute: async ({ context }) => {
-//     const { content } = context.triggerData;
-//     const { sourceId } = context.getStepResult('analyzeSourceStep')!;
-
-//     // 結果の初期値
-//     let status: stepStatus = 'failed';
-//     let topics: string[] = [];
-//     let errorMessage: string | undefined;
-
-//     try {
-//       // LLMを使用してトピックを抽出
-//       const extractTopicAgent = new Agent({
-//         name: 'extractTopicAgent',
-//         instructions: TOPIC_EXTRACTION_SYSTEM_PROMPT,
-//         model: openAICompatibleModel(),
-//       });
-
-//       const outputSchema = z.object({
-//         topics: z.array(z.string()),
-//       });
-
-//       const extractResult = await extractTopicAgent.generate(content, {
-//         output: outputSchema,
-//       });
-//       topics = extractResult.object.topics;
-//       status = 'success';
-//     } catch (error) {
-//       const errorDetail =
-//         error instanceof Error ? error.message : '不明なエラー';
-//       errorMessage = `トピック抽出でエラーが発生しました: ${errorDetail}`;
-//       console.error(errorMessage);
-
-//       // DBにエラー情報を更新
-//       const db = await getDb();
-//       await db
-//         .update(sources)
-//         .set({
-//           status: 'failed' as const,
-//           error: errorMessage,
-//         })
-//         .where(eq(sources.id, sourceId));
-//     }
-
-//     return {
-//       sourceId,
-//       topics,
-//       status,
-//       errorMessage,
-//     };
-//   },
-// });
-
-// // 各トピックの要約を生成するステップ
-// const generateTopicSummariesStep = new Step({
-//   id: 'generateTopicSummariesStep',
-//   description: '各トピックの要約を生成してデータベースに登録する',
-//   outputSchema: baseStepOutputSchema,
-//   execute: async ({ context }) => {
-//     // eslint-disable-next-line
-//     const { content } = context.triggerData;
-//     const { sourceId, topics } = context.getStepResult('extractTopicsStep')!;
-
-//     // 結果の初期値
-//     let status: stepStatus = 'failed';
-//     let errorMessage: string | undefined;
-
-//     try {
-//       // 既存のトピックを削除
-//       const db = await getDb();
-//       await db.delete(dbTopics).where(eq(dbTopics.sourceId, sourceId));
-
-//       // 各トピックの要約を生成して登録
-//       const summaries = await Promise.all(
-//         topics.map(async (topicName: string) => {
-//           // LLMを使用してトピックを抽出
-//           const summarizeTopicAgent = new Agent({
-//             name: 'summarizeTopicAgent',
-//             instructions: TOPIC_SUMMARY_SYSTEM_PROMPT,
-//             model: openAICompatibleModel(),
-//           });
-
-//           const topicPrompt = `以下の文書から「${topicName}」というトピックに関連する情報を抽出し、要約してください。\n\n${content}`;
-
-//           // LLMを使用してトピックの要約を生成
-//           const topicSummaryResult =
-//             await summarizeTopicAgent.generate(topicPrompt);
-
-//           return {
-//             sourceId,
-//             name: topicName,
-//             summary: topicSummaryResult.text,
-//           };
-//         }),
-//       );
-//       // トピックをデータベースに登録
-//       await db.insert(dbTopics).values(summaries);
-
-//       // 成功時の更新
-//       await db
-//         .update(sources)
-//         .set({
-//           status: 'completed' as const,
-//           error: null,
-//         })
-//         .where(eq(sources.id, sourceId));
-//       status = 'success';
-//     } catch (error) {
-//       const errorDetail =
-//         error instanceof Error ? error.message : '不明なエラー';
-//       errorMessage = `トピック要約の生成でエラーが発生しました: ${errorDetail}`;
-//       console.error(errorMessage);
-
-//       // DBにエラー情報を更新
-//       const db = await getDb();
-//       await db
-//         .update(sources)
-//         .set({
-//           status: 'failed' as const,
-//           error: errorMessage,
-//         })
-//         .where(eq(sources.path, sourceId));
-//     }
-
-//     return {
-//       status,
-//       errorMessage,
-//     };
-//   },
-// });
-
 // 全ステップを結合したワークフロー
-export const sourceRegistrationWorkflow = new Workflow({
-  name: 'source-registration',
-  triggerSchema,
-});
-
-// ワークフローを構築
-// eslint-disable-next-line
-sourceRegistrationWorkflow
-  .step(analyzeSourceStep)
-  .then(extractTopicAndSummaryStep, {
-    when: {
-      'analyzeSourceStep.status': 'success',
-    },
-  })
-  // .then(extractTopicsStep, {
-  //   when: {
-  //     'analyzeSourceStep.status': 'success',
-  //   },
-  // })
-  // .then(generateTopicSummariesStep, {
-  //   when: {
-  //     'extractTopicsStep.status': 'success',
-  //   },
-  // })
+export const sourceRegistrationWorkflow = createWorkflow({
+  id: 'sourceRegistration',
+  inputSchema: triggerSchema,
+  // ドキュメントには最終ステップの出力スキーマを指定すれば良いように記載があるが、実際の出力結果は{最終ステップ: outputSchema}となっている
+  // Matraのバグ？
+  outputSchema: baseStepOutputSchema,
+  steps: [analyzeSourceStep, extractTopicAndSummaryStep],
+})
+  .then(analyzeSourceStep)
+  .then(extractTopicAndSummaryStep)
   .commit();
diff --git a/src/mastra/workflows/sourceRegistrationManager.ts b/src/mastra/workflows/sourceRegistrationManager.ts
index 9a1b3ee11..0f86ae5a9 100644
--- a/src/mastra/workflows/sourceRegistrationManager.ts
+++ b/src/mastra/workflows/sourceRegistrationManager.ts
@@ -1,12 +1,9 @@
 import fs from 'fs/promises';
 import path from 'path';
-import { and, eq, inArray } from 'drizzle-orm';
-import type { StepResult } from '@mastra/core/workflows';
 import { getStore } from '../../main/store';
-import { getMastra } from '../../main/main';
-import getDb from '../../db';
-import { sources, topics } from '../../db/schema';
 import FileExtractor from '../../main/utils/fileExtractor';
+import { mastra } from '..';
+import { getSourceRepository } from '../../db/repository/sourceRepository';
 
 /**
  * フォルダ内の全てのファイルを登録するワークフロー
@@ -15,6 +12,8 @@ export default class SourceRegistrationManager {
   // eslint-disable-next-line
   private static instance: SourceRegistrationManager | null = null;
 
+  private sourceRepository = getSourceRepository();
+
   /**
    * シングルトンインスタンスを取得するメソッド
    */
@@ -32,16 +31,8 @@ export default class SourceRegistrationManager {
   // eslint-disable-next-line
   private async deleteSourceAndCache(sourcePath: string): Promise<void> {
     try {
-      const db = await getDb();
-      // ソースIDを取得
-      const source = await db
-        .select()
-        .from(sources)
-        .where(eq(sources.path, sourcePath));
-      const sourceId = source[0]?.id;
-      if (sourceId !== undefined && sourceId !== null) {
-        await db.delete(sources).where(eq(sources.id, sourceId));
-        await db.delete(topics).where(eq(topics.sourceId, sourceId));
+      const result = await this.sourceRepository.deleteSourceByPath(sourcePath);
+      if (result) {
         if (FileExtractor.isCacheTarget(sourcePath)) {
           await FileExtractor.deleteCache(sourcePath);
         }
@@ -57,12 +48,11 @@ export default class SourceRegistrationManager {
    */
   public async clearProcessingSources(): Promise<void> {
     try {
-      const db = await getDb();
       // 削除対象のソースを取得
-      const targetSources = await db
-        .select()
-        .from(sources)
-        .where(inArray(sources.status, ['idle', 'processing']));
+      const targetSources = await this.sourceRepository.getSouorceInStatus([
+        'processing',
+        'idle',
+      ]);
 
       // 各ソースを削除
       for (const source of targetSources) {
@@ -88,8 +78,7 @@ export default class SourceRegistrationManager {
       }
 
       // DB接続を一度だけ確立
-      const db = await getDb();
-      const allSources = await db.select().from(sources);
+      const allSources = await this.sourceRepository.getAllSources();
 
       // DBに存在するが実ファイルが存在しないソースを削除
       const existingPaths = new Set(files);
@@ -117,16 +106,11 @@ export default class SourceRegistrationManager {
 
         // files 配列を１つずつ順番に処理
         for (const filePath of files) {
-          // DB に同じパスで status が completed/idle/processing のレコードがあるか問い合わせ
-          const existingSource = await db
-            .select()
-            .from(sources)
-            .where(
-              and(
-                eq(sources.path, filePath),
-                inArray(sources.status, ['completed', 'idle', 'processing']),
-              ),
-            );
+          // DB に同じパスで status が idle/processing のレコードがあるか問い合わせ
+          const existingSource =
+            await this.sourceRepository.getSourceByPathInStatus(filePath, [
+              'completed',
+            ]);
 
           // レコードが見つからなかった（＝未登録 or ステータス未完了）ファイルだけ残す
           if (existingSource.length === 0) {
@@ -156,7 +140,7 @@ export default class SourceRegistrationManager {
         summary: '',
         status: 'idle' as const,
       }));
-      await db.insert(sources).values(rows);
+      await this.sourceRepository.insertSources(rows);
 
       // files配列を reduce でたたみ込み、逐次処理を実現する
       const registrationResults = await files.reduce<
@@ -167,74 +151,32 @@ export default class SourceRegistrationManager {
         (previousPromise, filePath) => {
           return previousPromise.then(async (resultList) => {
             try {
+              let success = false;
               // ファイルからテキストを抽出
               const { content } = await FileExtractor.extractText(filePath);
 
               // Mastraインスタンスからワークフローを取得して実行
-              const mastra = getMastra();
               const workflow = mastra.getWorkflow('sourceRegistrationWorkflow');
               const run = workflow.createRun();
               const result = await run.start({
-                triggerData: { filePath, content },
+                inputData: { filePath, content },
               });
 
-              // 失敗したステップを収集
-              const failedSteps = Object.entries(
-                result.results as Record<
-                  string,
-                  StepResult<{
-                    status: 'success' | 'failed';
-                    errorMessage?: string;
-                  }>
-                >,
-              )
-                .filter(([, value]) => {
-                  if (value.status === 'failed') {
-                    return true;
-                  }
-                  if (
-                    value.status === 'success' &&
-                    value.output?.status === 'failed'
-                  ) {
-                    return true;
-                  }
-                  return false;
-                })
-                .map(([step, value]) => {
-                  const errorMessage =
-                    value.status === 'success'
-                      ? value.output?.errorMessage
-                      : undefined;
-                  return {
-                    step,
-                    stepStatus: value.status,
-                    errorMessage,
-                  };
-                });
-
-              if (failedSteps.length > 0) {
-                resultList.push({
-                  success: false,
-                  filePath,
-                });
-                return resultList;
+              // 結果を確認
+              if (
+                result.status === 'success' &&
+                result.result.status === 'success'
+              ) {
+                success = true;
               }
 
-              resultList.push({ success: true, filePath });
+              resultList.push({ success, filePath });
             } catch (error) {
               console.error(error);
               resultList.push({
                 success: false,
                 filePath,
               });
-              await db
-                .update(sources)
-                .set({
-                  status: 'failed' as const,
-                  error:
-                    error instanceof Error ? error.message : '不明なエラー',
-                })
-                .where(eq(sources.path, filePath));
             }
             // 次のイテレーションに結果配列を渡す
             return resultList;
diff --git a/src/mastra/workflows/sourceReview/checklistExtraction.ts b/src/mastra/workflows/sourceReview/checklistExtraction.ts
index 6e91f9e6e..664c33911 100644
--- a/src/mastra/workflows/sourceReview/checklistExtraction.ts
+++ b/src/mastra/workflows/sourceReview/checklistExtraction.ts
@@ -1,16 +1,16 @@
+/* eslint-disable prefer-template */
 import { APICallError, NoObjectGeneratedError } from 'ai';
-import { Step, Workflow } from '@mastra/core/workflows';
+import { createStep, createWorkflow } from '@mastra/core/workflows';
 import { z } from 'zod';
-import { Agent } from '@mastra/core/agent';
 import path from 'path';
 import { getReviewRepository } from '../../../db/repository/reviewRepository';
 import { getSourceRepository } from '../../../db/repository/sourceRepository';
-import { getChecklistExtractionPrompt } from '../../agents/prompts';
 import { Source } from '../../../db/schema';
 import FileExtractor from '../../../main/utils/fileExtractor';
 import { baseStepOutputSchema } from '../schema';
 import { stepStatus } from '../types';
-import openAICompatibleModel from '../../agents/model/openAICompatible';
+import { ChecklistExtractionAgentRuntimeContext } from '../../agents/workflowAgents';
+import { createRuntimeContext, judgeFinishReason } from '../../agents/lib';
 
 // ワークフローの入力スキーマ
 const triggerSchema = z.object({
@@ -20,18 +20,17 @@ const triggerSchema = z.object({
     .describe('チェックリストを抽出するソースのIDリスト'),
 });
 
-const checklistExtractionStep = new Step({
+const checklistExtractionStep = createStep({
   id: 'checklistExtractionStep',
   description: '各ソースからチェックリストを抽出するステップ',
+  inputSchema: triggerSchema,
   outputSchema: baseStepOutputSchema,
-  execute: async ({ context }) => {
+  execute: async ({ inputData, mastra }) => {
     // レビュー用のリポジトリを取得
     const reviewRepository = getReviewRepository();
     const sourceRepository = getSourceRepository();
     // トリガーから入力を取得
-    const { reviewHistoryId, sourceIds } = context.triggerData as z.infer<
-      typeof triggerSchema
-    >;
+    const { reviewHistoryId, sourceIds } = inputData;
     const errorMessages: string[] = [
       'チェックリスト抽出処理で以下エラーが発生しました',
     ];
@@ -53,11 +52,9 @@ const checklistExtractionStep = new Step({
           // ファイル内容を抽出
           const { content } = await FileExtractor.extractText(source.path);
 
-          const checklistExtractionAgent = new Agent({
-            name: 'checklistExtractionAgent',
-            instructions: '',
-            model: openAICompatibleModel(),
-          });
+          const checklistExtractionAgent = mastra.getAgent(
+            'checklistExtractionAgent',
+          );
           const outputSchema = z.object({
             isChecklistDocument: z
               .boolean()
@@ -76,11 +73,15 @@ const checklistExtractionStep = new Step({
 
           while (attempts < MAX_ATTEMPTS) {
             let isCompleted = true;
+            const runtimeContext =
+              createRuntimeContext<ChecklistExtractionAgentRuntimeContext>();
+            // これまでに抽出したチェックリスト項目
+            runtimeContext.set('extractedItems', accumulated);
             const extractionResult = await checklistExtractionAgent.generate(
               content,
               {
                 output: outputSchema,
-                instructions: getChecklistExtractionPrompt(accumulated),
+                runtimeContext,
                 // AIの限界生成トークン数を超えた場合のエラーを回避するための設定
                 experimental_repairText: async (options) => {
                   isCompleted = false;
@@ -111,6 +112,9 @@ const checklistExtractionStep = new Step({
                     }
                     repairedText = JSON.stringify(parsedJson);
                   } catch (error) {
+                    console.error(
+                      `チェックリスト抽出の修正に失敗しました: ${error}`,
+                    );
                     throw new Error(
                       'チェックリストの抽出結果がAIモデルの最大出力トークン数を超え、不正な出力となった為修正を試みましたが失敗しました。抽出結果が最大出力トークン内に収まるようにチェックリストのファイル分割を検討してください。',
                     );
@@ -119,6 +123,12 @@ const checklistExtractionStep = new Step({
                 },
               },
             );
+            const { success, reason } = judgeFinishReason(
+              extractionResult.finishReason,
+            );
+            if (!success) {
+              throw new Error(reason);
+            }
 
             if (!extractionResult.object.isChecklistDocument) {
               throw new Error(
@@ -220,11 +230,11 @@ const checklistExtractionStep = new Step({
 /**
  * 各ソースからチェックリストを抽出するワークフロー
  */
-export const checklistExtractionWorkflow = new Workflow({
-  name: 'checklistExtractionWorkflow',
-  triggerSchema,
-});
-
-// ワークフローを構築
-// eslint-disable-next-line
-checklistExtractionWorkflow.step(checklistExtractionStep).commit();
+export const checklistExtractionWorkflow = createWorkflow({
+  id: 'checklistExtractionWorkflow',
+  inputSchema: triggerSchema,
+  outputSchema: baseStepOutputSchema,
+  steps: [checklistExtractionStep],
+})
+  .then(checklistExtractionStep)
+  .commit();
diff --git a/src/mastra/workflows/sourceReview/lib.ts b/src/mastra/workflows/sourceReview/lib.ts
index 5118994b1..6bbfefdb7 100644
--- a/src/mastra/workflows/sourceReview/lib.ts
+++ b/src/mastra/workflows/sourceReview/lib.ts
@@ -14,7 +14,7 @@ export function generateReviewTitle(sourceTitles: string[] = []): string {
 export function splitChecklistEquallyByMaxSize(
   checklist: ReviewChecklist[],
   maxSize: number,
-): { name: string; checklists: {id: number, content:string}[] }[] {
+): { name: string; checklists: { id: number; content: string }[] }[] {
   // 1) maxSize のバリデーション
   //    1 未満だと「1パートに1件以上」のルールを守れなくなるのでエラーにする
   if (maxSize < 1) {
@@ -38,7 +38,10 @@ export function splitChecklistEquallyByMaxSize(
   const baseSize = Math.floor(n / parts);
   const remainder = n % parts;
 
-  const result: { name: string; checklists: {id: number, content:string}[] }[] = [];
+  const result: {
+    name: string;
+    checklists: { id: number; content: string }[];
+  }[] = [];
   let offset = 0; // スライス開始インデックス
 
   // 5) 各パートを順番に切り出す
@@ -51,7 +54,7 @@ export function splitChecklistEquallyByMaxSize(
 
     result.push({
       name: `Part ${i + 1}`,
-      checklists: partChecklist.map(item => ({
+      checklists: partChecklist.map((item) => ({
         id: item.id,
         content: item.content,
       })),
diff --git a/src/mastra/workflows/sourceReview/reviewExecution.ts b/src/mastra/workflows/sourceReview/reviewExecution.ts
index e69595def..dc4ca11aa 100644
--- a/src/mastra/workflows/sourceReview/reviewExecution.ts
+++ b/src/mastra/workflows/sourceReview/reviewExecution.ts
@@ -1,20 +1,20 @@
 import { APICallError, NoObjectGeneratedError } from 'ai';
-import { Workflow, Step } from '@mastra/core/workflows';
-import { Agent } from '@mastra/core/agent';
+import { createWorkflow, createStep } from '@mastra/core/workflows';
+import { MastraError } from '@mastra/core/error';
 import { z } from 'zod';
 import path from 'path';
 import { getReviewRepository } from '../../../db/repository/reviewRepository';
 import { getSourceRepository } from '../../../db/repository/sourceRepository';
-import {
-  getChecklistCategolizePrompt,
-  getDocumentReviewExecutionPrompt,
-} from '../../agents/prompts';
 import FileExtractor from '../../../main/utils/fileExtractor';
 import type { ReviewEvaluation } from '../../../main/types';
 import { baseStepOutputSchema } from '../schema';
-import openAICompatibleModel from '../../agents/model/openAICompatible';
 import { stepStatus } from '../types';
 import { splitChecklistEquallyByMaxSize } from './lib';
+import {
+  ClassifyCategoryAgentRuntimeContext,
+  ReviewExecuteAgentRuntimeContext,
+} from '../../agents/workflowAgents';
+import { createRuntimeContext, judgeFinishReason } from '../../agents/lib';
 
 // 一つのカテゴリに含めるチェックリストの最大数
 const MAX_CHECKLISTS_PER_CATEGORY = 7;
@@ -44,24 +44,15 @@ const triggerSchema = z.object({
   sourceIds: z.array(z.number()).describe('レビュー対象ソースのIDリスト'),
 });
 
-/**
- * レビュー実行ワークフロー
- */
-export const reviewExecutionWorkflow = new Workflow({
-  name: 'reviewExecutionWorkflow',
-  triggerSchema,
-});
-
 // ステップ1: チェックリストをカテゴリごとに分類
-const classifyChecklistsByCategoryStep = new Step({
+const classifyChecklistsByCategoryStep = createStep({
   id: 'classifyChecklistsByCategoryStep',
   description: 'チェックリストをカテゴリごとに分類するステップ',
+  inputSchema: triggerSchema,
   outputSchema: classifyChecklistsByCategoryOutputSchema,
-  execute: async ({ context }) => {
+  execute: async ({ inputData, mastra }) => {
     // トリガーから入力を取得
-    const { reviewHistoryId } = context.triggerData as z.infer<
-      typeof triggerSchema
-    >;
+    const { reviewHistoryId } = inputData;
 
     // レビューリポジトリを取得
     const repository = getReviewRepository();
@@ -80,14 +71,7 @@ const classifyChecklistsByCategoryStep = new Step({
       }));
 
       // カテゴリ分類エージェントを使用して分類
-      const classifiCategoryAgent = new Agent({
-        name: 'classifyCategoryAgent',
-        instructions: getChecklistCategolizePrompt(
-          MAX_CHECKLISTS_PER_CATEGORY,
-          MAX_CATEGORIES,
-        ),
-        model: openAICompatibleModel(),
-      });
+      const classifiCategoryAgent = mastra.getAgent('classifyCategoryAgent');
       const outputSchema = z.object({
         categories: z
           .array(
@@ -100,12 +84,20 @@ const classifyChecklistsByCategoryStep = new Step({
           )
           .describe('Classified categories'),
       });
+      const runtimeContext =
+        createRuntimeContext<ClassifyCategoryAgentRuntimeContext>();
+      runtimeContext.set(
+        'maxChecklistsPerCategory',
+        MAX_CHECKLISTS_PER_CATEGORY,
+      );
+      runtimeContext.set('maxCategories', MAX_CATEGORIES);
       // チェックリスト項目をカテゴリごとに分類
       const classificationResult = await classifiCategoryAgent.generate(
         `checklist items:
   ${checklistData.map((item) => `ID: ${item.id} - ${item.content}`).join('\n')}`,
         {
           output: outputSchema,
+          runtimeContext,
         },
       );
       // 分類結果の妥当性をチェック
@@ -149,10 +141,19 @@ const classifyChecklistsByCategoryStep = new Step({
         filteredIds.forEach((id) => seen.add(id));
 
         // ── MAX_CHECKLISTS_PER_CATEGORY件ずつチャンクに分けてサブカテゴリ化 ────────────
-        for (let i = 0; i < filteredIds.length; i += MAX_CHECKLISTS_PER_CATEGORY) {
-          const chunkIds = filteredIds.slice(i, i + MAX_CHECKLISTS_PER_CATEGORY);
+        for (
+          let i = 0;
+          i < filteredIds.length;
+          i += MAX_CHECKLISTS_PER_CATEGORY
+        ) {
+          const chunkIds = filteredIds.slice(
+            i,
+            i + MAX_CHECKLISTS_PER_CATEGORY,
+          );
           const chunkName =
-            i === 0 ? name : `${name} (Part ${Math.floor(i / MAX_CHECKLISTS_PER_CATEGORY) + 1})`;
+            i === 0
+              ? name
+              : `${name} (Part ${Math.floor(i / MAX_CHECKLISTS_PER_CATEGORY) + 1})`;
 
           const checklists = chunkIds.map((id) => {
             const item = checklistData.find((c) => c.id === id)!;
@@ -168,11 +169,11 @@ const classifyChecklistsByCategoryStep = new Step({
         categories: finalCategories,
       };
     } catch (error) {
-      let errorDetail: string;
       if (
         APICallError.isInstance(error) ||
         (NoObjectGeneratedError.isInstance(error) &&
-          error.finishReason === 'length')
+          error.finishReason === 'length') ||
+        error instanceof MastraError
       ) {
         // APIコールエラーまたはAIモデルが生成できる文字数を超えた場合、手動でカテゴリー分割
         // AIモデルが生成できる文字数を超えているため、手動でカテゴリー分割
@@ -182,11 +183,10 @@ const classifyChecklistsByCategoryStep = new Step({
           status: 'success' as stepStatus,
           categories: splitChecklistEquallyByMaxSize(checklistsResult, 7),
         };
-      } else if (error instanceof Error) {
-        errorDetail = error.message;
-      } else {
-        errorDetail = JSON.stringify(error);
       }
+      const errorDetail =
+        error instanceof Error ? error.message : JSON.stringify(error);
+      // エラーが発生した場合はエラ
       const errorMessage = `ドキュメントレビュー中にエラーが発生しました:\n${errorDetail}`;
       return {
         status: 'failed' as stepStatus,
@@ -197,17 +197,24 @@ const classifyChecklistsByCategoryStep = new Step({
 });
 
 // ステップ2: チェックリストごとにレビューを実行
-const reviewExecutionStep = new Step({
+const reviewExecutionStep = createStep({
   id: 'reviewExecutionStep',
   description: 'チェックリストごとにレビューを実行するステップ',
+  inputSchema: classifyChecklistsByCategoryOutputSchema,
   outputSchema: baseStepOutputSchema,
-  execute: async ({ context }) => {
+  execute: async ({ inputData, getInitData, mastra }) => {
     // レビュー対象のソースID
-    const { sourceIds } = context.triggerData as z.infer<typeof triggerSchema>;
+    const { sourceIds } = getInitData() as z.infer<typeof triggerSchema>;
     // ステップ1からの入力を取得
-    const { categories } = context.getStepResult(
-      'classifyChecklistsByCategoryStep',
-    )! as z.infer<typeof classifyChecklistsByCategoryOutputSchema>;
+    const { categories } = inputData;
+
+    // ステップ1でfailedした場合はそのまま返す
+    if (inputData.status === 'failed') {
+      return {
+        status: 'failed' as stepStatus,
+        errorMessage: inputData.errorMessage,
+      };
+    }
 
     // リポジトリを取得
     const reviewRepository = getReviewRepository();
@@ -218,11 +225,7 @@ const reviewExecutionStep = new Step({
     const errorDocuments = new Map<string, string[]>();
 
     try {
-      const reviewAgent = new Agent({
-        name: 'reviewAgent',
-        instructions: '',
-        model: openAICompatibleModel(),
-      });
+      const reviewAgent = mastra.getAgent('reviewExecuteAgent');
 
       // 各カテゴリ、ソースごとにレビューを実行
       for (const category of categories!) {
@@ -249,13 +252,20 @@ const reviewExecutionStep = new Step({
                   comment: z.string().describe('evaluation comment'),
                 }),
               );
+              const runtimeContext =
+                createRuntimeContext<ReviewExecuteAgentRuntimeContext>();
+              runtimeContext.set('checklistItems', reviewTargetChecklists);
               // レビューエージェントを使用してレビューを実行
               const reviewResult = await reviewAgent.generate(content, {
                 output: outputSchema,
-                instructions: getDocumentReviewExecutionPrompt(
-                  reviewTargetChecklists,
-                ),
+                runtimeContext,
               });
+              const { success, reason } = judgeFinishReason(
+                reviewResult.finishReason,
+              );
+              if (!success) {
+                throw new Error(reason);
+              }
               // レビュー結果をDBに保存
               await reviewRepository.upsertReviewResult(
                 reviewResult.object.map((result) => ({
@@ -349,13 +359,17 @@ const reviewExecutionStep = new Step({
   },
 });
 
-// ワークフローを構築
-// eslint-disable-next-line
-reviewExecutionWorkflow
-  .step(classifyChecklistsByCategoryStep)
-  .then(reviewExecutionStep, {
-    when: {
-      'classifyChecklistsByCategoryStep.status': 'success',
-    },
-  })
+/**
+ * レビュー実行ワークフロー
+ */
+export const reviewExecutionWorkflow = createWorkflow({
+  id: 'reviewExecutionWorkflow',
+  inputSchema: triggerSchema,
+  // ドキュメントには最終ステップの出力スキーマを指定すれば良いように記載があるが、実際の出力結果は{最終ステップ: outputSchema}となっている
+  // Matraのバグ？
+  outputSchema: baseStepOutputSchema,
+  steps: [classifyChecklistsByCategoryStep, reviewExecutionStep],
+})
+  .then(classifyChecklistsByCategoryStep)
+  .then(reviewExecutionStep)
   .commit();
diff --git a/src/mastra/workflows/sourceReview/sourceReviewManager.ts b/src/mastra/workflows/sourceReview/sourceReviewManager.ts
index f86a197ba..ee344cf1b 100644
--- a/src/mastra/workflows/sourceReview/sourceReviewManager.ts
+++ b/src/mastra/workflows/sourceReview/sourceReviewManager.ts
@@ -1,7 +1,6 @@
 import { IpcMainInvokeEvent } from 'electron';
 import { getReviewRepository } from '../../../db/repository/reviewRepository';
 import { getSourceRepository } from '../../../db/repository/sourceRepository';
-import { getMastra } from '../../../main/main';
 import {
   IpcChannels,
   IpcEventPayloadMap,
@@ -9,6 +8,7 @@ import {
 } from '../../../main/types/ipc';
 import { generateReviewTitle } from './lib';
 import { ReviewHistory } from '../../../db/schema';
+import { mastra } from '../..';
 
 /**
  * ソースレビュー処理を管理するクラス
@@ -62,7 +62,6 @@ export default class SourceReviewManager {
       let errorMessage;
 
       // Mastraワークフローを実行
-      const mastra = getMastra();
       const workflow = mastra.getWorkflow('checklistExtractionWorkflow');
 
       if (!workflow) {
@@ -74,27 +73,26 @@ export default class SourceReviewManager {
 
       const run = workflow.createRun();
       const runResult = await run.start({
-        triggerData: {
+        inputData: {
           reviewHistoryId,
           sourceIds,
         },
       });
 
       // 結果を確認
-      const extractResult = runResult.results.checklistExtractionStep;
-      switch (extractResult.status) {
+      switch (runResult.status) {
         case 'success':
-          if (extractResult.output?.status === 'success') {
+          if (runResult.result.status === 'success') {
             success = true;
           }
-          if (extractResult.output?.status === 'failed') {
+          if (runResult.result.status === 'failed') {
             success = false;
-            errorMessage = extractResult.output.errorMessage;
+            errorMessage = runResult.result.errorMessage;
           }
           break;
         case 'failed':
           success = false;
-          errorMessage = extractResult.error;
+          errorMessage = runResult.error.message;
           break;
         default:
           success = false;
@@ -139,7 +137,6 @@ export default class SourceReviewManager {
       let errorMessage;
 
       // Mastraワークフローを実行
-      const mastra = getMastra();
       const workflow = mastra.getWorkflow('reviewExecutionWorkflow');
 
       if (!workflow) {
@@ -161,35 +158,30 @@ export default class SourceReviewManager {
 
       const run = workflow.createRun();
       const result = await run.start({
-        triggerData: {
+        inputData: {
           reviewHistoryId,
           sourceIds,
         },
       });
 
       // 結果を確認
-      for (const step of Object.values(result.results)) {
-        switch (step.status) {
-          case 'success':
-            if (step.output?.status === 'success') {
-              success = true;
-            }
-            if (step.output?.status === 'failed') {
-              success = false;
-              errorMessage = step.output.errorMessage;
-            }
-            break;
-          case 'failed':
-            success = false;
-            errorMessage = step.error;
-            break;
-          default:
+      switch (result.status) {
+        case 'success':
+          if (result.result.status === 'success') {
+            success = true;
+          }
+          if (result.result.status === 'failed') {
             success = false;
-            errorMessage = 'レビュー実行処理が不明な状態で終了しました';
-        }
-        if (!success) {
-          break; // 最初の失敗でループを抜ける
-        }
+            errorMessage = result.result.errorMessage;
+          }
+          break;
+        case 'failed':
+          success = false;
+          errorMessage = result.error.message;
+          break;
+        default:
+          success = false;
+          errorMessage = 'チェックリスト抽出処理が不明な状態で終了しました';
       }
       return {
         success,
diff --git a/src/renderer/components/chat/ChatArea.tsx b/src/renderer/components/chat/ChatArea.tsx
index 337ec4f09..23c5902c2 100644
--- a/src/renderer/components/chat/ChatArea.tsx
+++ b/src/renderer/components/chat/ChatArea.tsx
@@ -2,7 +2,7 @@ import React, { useState, useEffect } from 'react';
 import { useChat } from '@ai-sdk/react';
 import { Box, Divider, Typography } from '@mui/material';
 import { v4 as uuid } from 'uuid';
-import useAgentStatus from '../../hooks/useAgentStatus';
+import useSettingsStatus from '../../hooks/useSettingsStatus';
 import MessageList from './MessageList';
 import MessageInput, { Attachment } from './MessageInput';
 import { chatService } from '../../services/chatService';
@@ -133,14 +133,14 @@ const ChatArea: React.FC<ChatAreaProps> = ({ selectedRoomId }) => {
   const [additionalAlerts, setAdditionalAlerts] = useState<AlertMessage[]>([]);
   const [editMessageId, setEditMessageId] = useState<string>('');
   const [editMessageContent, setEditMessageContent] = useState<string>('');
-  const { status: agentStatus } = useAgentStatus();
+  const { status: settingsStatus } = useSettingsStatus();
   const [isEditHistory, setIsEditHistory] = useState(false);
   /* ---------- 添付画像 ---------- */
   const [attachments, setAttachments] = useState<Attachment[]>([]);
   // メッセージ入力状態
   const [input, setInput] = useState<string>('');
 
-  const isAgentInitializing = agentStatus.state === 'initializing';
+  const isAgentInitializing = settingsStatus.state === 'saving';
 
   // メッセージ履歴を取得
   const fetchMessages = async (roomId: string) => {
@@ -293,8 +293,6 @@ const ChatArea: React.FC<ChatAreaProps> = ({ selectedRoomId }) => {
   const handleEditSubmit = async () => {
     const messageIndex = messages.findIndex((m) => m.id === editMessageId);
     if (messageIndex === -1) return;
-    const oldCreatedAt = messages[messageIndex].createdAt!;
-    const oldContent = messages[messageIndex].content;
 
     const updatedMessages = messages.slice(0, messageIndex + 1);
     updatedMessages[messageIndex] = {
@@ -309,10 +307,9 @@ const ChatArea: React.FC<ChatAreaProps> = ({ selectedRoomId }) => {
     };
     setMessages(updatedMessages);
     setIsEditHistory(true);
-    await window.electron.chat.editHistory({
+    await window.electron.chat.deleteMessagesBeforeSpecificId({
       threadId: selectedRoomId!,
-      oldContent,
-      oldCreatedAt,
+      messageId: editMessageId,
     });
     setEditMessageId('');
     setEditMessageContent('');
diff --git a/src/renderer/components/common/AlertMessage.tsx b/src/renderer/components/common/AlertMessage.tsx
index a919efd27..acd457a1c 100644
--- a/src/renderer/components/common/AlertMessage.tsx
+++ b/src/renderer/components/common/AlertMessage.tsx
@@ -1,6 +1,6 @@
 import React, { memo } from 'react';
 import { Box, Alert } from '@mui/material';
-import { useAgentStore } from '../../stores/agentStore';
+import { useSettingsZustandStore } from '../../stores/settingsZustandStore';
 
 export interface AlertMessage {
   id: string;
@@ -20,7 +20,7 @@ const AlertManager: React.FC<AlertManagerProps> = memo(
     closeAdditionalAlerts,
     position = 'top',
   }: AlertManagerProps) => {
-    const { status, closeMessage } = useAgentStore();
+    const { status, closeMessage } = useSettingsZustandStore();
 
     return (
       <Box
diff --git a/src/renderer/components/common/SettingsModal.tsx b/src/renderer/components/common/SettingsModal.tsx
index 8e83e668b..b9d306a79 100644
--- a/src/renderer/components/common/SettingsModal.tsx
+++ b/src/renderer/components/common/SettingsModal.tsx
@@ -7,9 +7,6 @@ import {
   Box,
   CircularProgress,
   Alert,
-  FormGroup,
-  FormControlLabel,
-  Switch,
 } from '@mui/material';
 import Modal from './Modal';
 import useSettingsStore from '../../hooks/useSettingsStore';
diff --git a/src/renderer/components/common/SourceListModal.tsx b/src/renderer/components/common/SourceListModal.tsx
index d866998f3..107925c7d 100644
--- a/src/renderer/components/common/SourceListModal.tsx
+++ b/src/renderer/components/common/SourceListModal.tsx
@@ -118,7 +118,21 @@ function SourceListModal({
     // 更新中の場合は処理をスキップ
     if (processing || updatingSources.size > 0) return;
 
-    const someUnchecked = Object.values(checkedSources).some(
+    const targetSources = sources.filter(
+      (source) => source.status === 'completed',
+    );
+    if (targetSources.length === 0) {
+      return;
+    }
+    const targetCheckedSources = targetSources.reduce(
+      (acc, source) => {
+        acc[source.id] = checkedSources[source.id] || false;
+        return acc;
+      },
+      {} as { [key: number]: boolean },
+    );
+
+    const someUnchecked = Object.values(targetCheckedSources).some(
       (checked) => !checked,
     );
     const newCheckedState = { ...checkedSources };
@@ -127,16 +141,16 @@ function SourceListModal({
     const newValue = someUnchecked;
 
     // すべてのソースのチェック状態を更新
-    sources.forEach((source) => {
+    targetSources.forEach((source) => {
       newCheckedState[source.id] = newValue;
     });
     setCheckedSources(newCheckedState);
 
     // 全てのソースを更新中状態に追加
-    setUpdatingSources(new Set(sources.map((source) => source.id)));
+    setUpdatingSources(new Set(targetSources.map((source) => source.id)));
 
     // 各ソースの状態を更新
-    sources.forEach(async (source) => {
+    targetSources.forEach(async (source) => {
       try {
         const { success, error } =
           await window.electron.source.updateSourceEnabled(source.id, newValue);
@@ -189,6 +203,8 @@ function SourceListModal({
         console.error('ソースデータの取得に失敗しました:', error);
       }
     };
+    // 初回データ取得
+    fetchSources();
 
     const intervalId = setInterval(fetchSources, 5000);
 
diff --git a/src/renderer/components/review/ReviewSourceModal.tsx b/src/renderer/components/review/ReviewSourceModal.tsx
index e1bc517d4..689ed3ddb 100644
--- a/src/renderer/components/review/ReviewSourceModal.tsx
+++ b/src/renderer/components/review/ReviewSourceModal.tsx
@@ -47,7 +47,10 @@ function SourceListModal({
   useEffect(() => {
     const newCheckedSources: { [key: number]: boolean } = {};
     sources.forEach((source) => {
-      newCheckedSources[source.id] = checkedSources[source.id] || false;
+      newCheckedSources[source.id] =
+        source.status === 'completed'
+          ? checkedSources[source.id] || false
+          : false;
     });
     setCheckedSources(newCheckedSources);
     // eslint-disable-next-line
@@ -74,7 +77,18 @@ function SourceListModal({
 
   // 全選択/全解除の切り替えハンドラ
   const handleSelectAllChange = () => {
-    const someUnchecked = Object.values(checkedSources).some(
+    const targetSources = sources.filter(
+      (source) => source.status === 'completed',
+    );
+    if (targetSources.length === 0) return;
+    const targetCheckedSources = targetSources.reduce(
+      (acc, source) => {
+        acc[source.id] = checkedSources[source.id] || false;
+        return acc;
+      },
+      {} as { [key: number]: boolean },
+    );
+    const someUnchecked = Object.values(targetCheckedSources).some(
       (checked) => !checked,
     );
     const newCheckedState = { ...checkedSources };
@@ -83,7 +97,7 @@ function SourceListModal({
     const newValue = someUnchecked;
 
     // すべてのソースのチェック状態を更新
-    sources.forEach((source) => {
+    targetSources.forEach((source) => {
       newCheckedState[source.id] = newValue;
     });
     setCheckedSources(newCheckedState);
@@ -326,7 +340,7 @@ function SourceListModal({
                     <Checkbox
                       checked={checkedSources[source.id] || false}
                       onChange={() => handleSourceCheckChange(source.id)}
-                      disabled={processing}
+                      disabled={processing || source.status !== 'completed'}
                     />
                   </TableCell>
                   <TableCell>{source.path}</TableCell>
diff --git a/src/renderer/components/sidebar/SidebarHeader.tsx b/src/renderer/components/sidebar/SidebarHeader.tsx
index 0c6c4b0e1..672416a7e 100644
--- a/src/renderer/components/sidebar/SidebarHeader.tsx
+++ b/src/renderer/components/sidebar/SidebarHeader.tsx
@@ -13,7 +13,7 @@ import ChatOutlinedIcon from '@mui/icons-material/ChatOutlined';
 import ChecklistOutlinedIcon from '@mui/icons-material/ChecklistOutlined';
 import { useNavigate, useLocation } from 'react-router-dom';
 import { ROUTES } from '../../../main/types';
-import useAgentStatus from '../../hooks/useAgentStatus';
+import useSettingsStatus from '../../hooks/useSettingsStatus';
 
 interface SidebarHeaderProps {}
 
@@ -27,7 +27,7 @@ const FEATURES = [
 ] as const;
 
 const SidebarHeader: React.FC<SidebarHeaderProps> = () => {
-  const { status } = useAgentStatus();
+  const { status } = useSettingsStatus();
   const navigate = useNavigate();
   const location = useLocation();
 
@@ -53,7 +53,7 @@ const SidebarHeader: React.FC<SidebarHeaderProps> = () => {
             value={getCurrentFeature()}
             onChange={handleFeatureChange}
             displayEmpty
-            disabled={status.state !== 'ready'}
+            disabled={status.state === 'saving'}
             input={
               <InputBase
                 sx={{ '&:before, &:after': { borderBottom: 'none' } }}
diff --git a/src/renderer/hooks/useAgentStatus.ts b/src/renderer/hooks/useSettingsStatus.ts
similarity index 72%
rename from src/renderer/hooks/useAgentStatus.ts
rename to src/renderer/hooks/useSettingsStatus.ts
index e34f35189..054196a9d 100644
--- a/src/renderer/hooks/useAgentStatus.ts
+++ b/src/renderer/hooks/useSettingsStatus.ts
@@ -1,19 +1,19 @@
 import { useCallback, useEffect } from 'react';
-import { useAgentStore } from '../stores/agentStore';
+import { useSettingsZustandStore } from '../stores/settingsZustandStore';
 
-const useAgentStatus = () => {
+const useSettingsStatus = () => {
   const { status, setStatus, closeMessage, updatedFlg, setUpdatedFlg } =
-    useAgentStore();
+    useSettingsZustandStore();
 
   // ポーリング処理
   const startPolling = useCallback(() => {
     let intervalId: ReturnType<typeof setInterval>;
 
     const pollStatus = async () => {
-      const agentStatus = await window.electron.agent.getStatus();
+      const agentStatus = await window.electron.settings.getStatus();
       setStatus(agentStatus);
 
-      if (agentStatus.state !== 'initializing') {
+      if (agentStatus.state !== 'saving') {
         clearInterval(intervalId);
         setUpdatedFlg(false);
       }
@@ -33,7 +33,7 @@ const useAgentStatus = () => {
   // 設定保存時のポーリング再開
   useEffect(() => {
     if (updatedFlg) {
-      setStatus({ state: 'initializing', messages: [] });
+      setStatus({ state: 'saving', messages: [] });
       startPolling();
     }
   }, [updatedFlg, setStatus, startPolling]);
@@ -44,4 +44,4 @@ const useAgentStatus = () => {
   };
 };
 
-export default useAgentStatus;
+export default useSettingsStatus;
diff --git a/src/renderer/hooks/useSettingsStore.ts b/src/renderer/hooks/useSettingsStore.ts
index 9f9669ca7..0eda2262e 100644
--- a/src/renderer/hooks/useSettingsStore.ts
+++ b/src/renderer/hooks/useSettingsStore.ts
@@ -1,4 +1,4 @@
-import { useState, useCallback, useEffect, useMemo } from 'react';
+import { useState, useCallback, useEffect } from 'react';
 import { z } from 'zod';
 import type { StoreSchema as Settings } from '../../main/store';
 import {
@@ -7,7 +7,7 @@ import {
   type ValidationError,
 } from '../../main/types/settingsSchema';
 import { useElectronStore } from './useElectronStore';
-import { useAgentStore } from '../stores/agentStore';
+import { useSettingsZustandStore } from '../stores/settingsZustandStore';
 
 /**
  * 設定値の型安全な管理と検証を行うフック
@@ -101,7 +101,7 @@ const useSettingsStore = () => {
 
   const [saving, setSaving] = useState(false);
   const [error, setError] = useState<string | null>(null);
-  const { setUpdatedFlg } = useAgentStore();
+  const { setUpdatedFlg } = useSettingsZustandStore();
 
   /**
    * バリデーションエラーの種類を判定
@@ -294,9 +294,9 @@ const useSettingsStore = () => {
 
       // 必要な場合のみMastraを再初期化
       // if (requiresReinitialization) {
-      //   await window.electron.agent.reinitialize();
+      //   await window.electron.settings.reinitialize();
       // }
-      await window.electron.agent.reinitialize();
+      await window.electron.settings.reinitialize();
       setUpdatedFlg(true);
 
       // 新しい設定を元の設定として保存
diff --git a/src/renderer/stores/agentStore.ts b/src/renderer/stores/agentStore.ts
deleted file mode 100644
index 7dcd50cb4..000000000
--- a/src/renderer/stores/agentStore.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-import { create } from 'zustand';
-import type { AgentBootStatus } from '../../main/types';
-
-type AgentStore = {
-  // エージェントが更新されたかどうかを保持するフラグ
-  updatedFlg: boolean;
-  setUpdatedFlg: (updatedFlg: boolean) => void;
-  status: AgentBootStatus;
-  setStatus: (status: AgentBootStatus) => void;
-  closeMessage: (messageId: string) => Promise<void>;
-};
-
-export const useAgentStore = create<AgentStore>((set) => ({
-  updatedFlg: false,
-  setUpdatedFlg: (updatedFlg: boolean) => {
-    set({ updatedFlg });
-  },
-  status: { state: 'initializing', messages: [] },
-  setStatus: (status: AgentBootStatus) => {
-    set({ status });
-  },
-  closeMessage: async (messageId: string) => {
-    await window.electron.agent.removeMessage(messageId);
-    // メッセージ削除後に最新のステータスを取得して更新
-    const newStatus = await window.electron.agent.getStatus();
-    set({ status: newStatus });
-  },
-}));
diff --git a/src/renderer/stores/settingsZustandStore.ts b/src/renderer/stores/settingsZustandStore.ts
new file mode 100644
index 000000000..3b49fa075
--- /dev/null
+++ b/src/renderer/stores/settingsZustandStore.ts
@@ -0,0 +1,28 @@
+import { create } from 'zustand';
+import type { SettingsSavingStatus, MakeOptional } from '../../main/types';
+
+type SettingsStore = {
+  // エージェントが更新されたかどうかを保持するフラグ
+  updatedFlg: boolean;
+  setUpdatedFlg: (updatedFlg: boolean) => void;
+  status: MakeOptional<SettingsSavingStatus, 'tools'>;
+  setStatus: (status: MakeOptional<SettingsSavingStatus, 'tools'>) => void;
+  closeMessage: (messageId: string) => Promise<void>;
+};
+
+export const useSettingsZustandStore = create<SettingsStore>((set) => ({
+  updatedFlg: false,
+  setUpdatedFlg: (updatedFlg: boolean) => {
+    set({ updatedFlg });
+  },
+  status: { state: 'saving', messages: [] },
+  setStatus: (status: MakeOptional<SettingsSavingStatus, 'tools'>) => {
+    set({ status });
+  },
+  closeMessage: async (messageId: string) => {
+    await window.electron.settings.removeMessage(messageId);
+    // メッセージ削除後に最新のステータスを取得して更新
+    const newStatus = await window.electron.settings.getStatus();
+    set({ status: newStatus });
+  },
+}));
