diff --git a/CLAUDE.md b/CLAUDE.md
index 81694e235..6a85aaa7d 100644
--- a/CLAUDE.md
+++ b/CLAUDE.md
@@ -209,5 +209,11 @@ ElectronのIPCを使用してフロントエンド・バックエンド間の通
 
 
 ## 依頼タスク
-- 要件
-  - 大量ドキュメントレビューの結果を表示する際に、ドキュメント分割した際に一時的に付与したファイル名が全て結合されてしまっており、結果が見にくい。少量ドキュメントレビューと同じようにファイルアップロードした元のファイル名のみ結合するように変更する。
+- 修正依頼
+  - ドキュメントレビューでチェックリスト抽出やレビュー実行中に、キャンセルした場合、即DBの処理ステータスを変更してしまうので、コンポーネント的には処理が完了しているように見えてしまうが、main側の処理は続いているような状況になってしまう
+    - キャンセルが完了していないのに、レビュー等の処理を再実行できてしまうので、データが不整合を起こす可能性がある
+    - 以下のように修正したい
+      - キャンセル実行した場合は、キャンセル待ちステータスに変更する
+      - キャンセル待ちの場合は、画面上のボタンの表示を「キャンセル」→「キャンセル処理中」とする（その他のボタンは「キャンセル」時と変わらずdisabled）
+      - キャンセル待ちの場合も、処理実行中と同様に、データ取得のポーリングは継続する
+      - キャンセル完了した場合は、main側から処理完了のイベントが通知されるので、後は従来通り（キャンセル完了用に特別な処理を加える必要はないはず？念の為調べてくださいね。）
diff --git a/changes.patch b/changes.patch
index b53722bce..ef273d407 100644
--- a/changes.patch
+++ b/changes.patch
@@ -1,81 +1,89 @@
 diff --git a/CLAUDE.md b/CLAUDE.md
-index 33069f026..81694e235 100644
+index 81694e235..41e3d7adf 100644
 --- a/CLAUDE.md
 +++ b/CLAUDE.md
-@@ -210,8 +210,4 @@ ElectronのIPCを使用してフロントエンド・バックエンド間の通
+@@ -209,5 +209,6 @@ ElectronのIPCを使用してフロントエンド・バックエンド間の通
+ 
  
  ## 依頼タスク
- - 要件
--  - レビュー機能にて、excel文書をpdfに変換する際に、`ReviewSourceModal`の変換進捗表示用`Backdrop`にシートの印刷設定中は「〇〇シートPDF印刷設定中」と表示しPDFファイルにエクスポートする際は「PDFファイルへエクスポート中」 と表示する
--  - 目的
--    - excelのpdf変換が特に時間がかかるので、ユーザに進捗を通知したいため（ユーザ体験の向上）
--  - 実装方針
--    - 最も効率的な方法を採用して欲しいが、イベント送信が無難か？
-+  - 大量ドキュメントレビューの結果を表示する際に、ドキュメント分割した際に一時的に付与したファイル名が全て結合されてしまっており、結果が見にくい。少量ドキュメントレビューと同じようにファイルアップロードした元のファイル名のみ結合するように変更する。
-diff --git a/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/consolidateReviewStep.ts b/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/consolidateReviewStep.ts
-index 60120af8d..cafb8793c 100644
---- a/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/consolidateReviewStep.ts
-+++ b/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/consolidateReviewStep.ts
-@@ -198,9 +198,13 @@ Please provide a consolidated review that synthesizes all individual document re
-           const idsHash = createHash('md5')
-             .update(combinedFileIds)
-             .digest('hex');
--          const combinedFileNames = documentsWithReviewResults
--            .map((f) => f.name)
--            .join('/');
-+          const combinedFileNames = [
-+            ...new Set(
-+              documentsWithReviewResults.map(
-+                (f) => f.originalName || f.name,
-+              ),
-+            ),
-+          ].join('/');
+-- 要件
+-  - 大量ドキュメントレビューの結果を表示する際に、ドキュメント分割した際に一時的に付与したファイル名が全て結合されてしまっており、結果が見にくい。少量ドキュメントレビューと同じようにファイルアップロードした元のファイル名のみ結合するように変更する。
++- 修正依頼
++  - ドキュメントレビュー機能において、チェックリスト抽出処理やレビュー実行処理をキャンセルした際に、`review_histories`テーブルのprocessingStatusフィールドが変更できていないため、コンポーネント等では実行中と認識されてしまう
++    - processingStatusフィールドはキャンセルした場合は'canceled'としたい
+diff --git a/src/main/main.ts b/src/main/main.ts
+index 047392026..bc1ed6ea3 100644
+--- a/src/main/main.ts
++++ b/src/main/main.ts
+@@ -516,7 +516,7 @@ const setupReviewHandlers = () => {
+   handleIpc(
+     IpcChannels.REVIEW_EXTRACT_CHECKLIST_ABORT,
+     async (reviewHistoryId) => {
+-      const result = reviewService.abortExtractChecklist(reviewHistoryId);
++      const result = await reviewService.abortExtractChecklist(reviewHistoryId);
+       if (!result.success) {
+         throw internalError({
+           expose: true,
+@@ -531,7 +531,7 @@ const setupReviewHandlers = () => {
  
-           await reviewRepository.upsertReviewResult(
-             consolidatedResult.object.map((result) => ({
-diff --git a/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/index.ts b/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/index.ts
-index 3e9bea206..c6f8371b8 100644
---- a/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/index.ts
-+++ b/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/index.ts
-@@ -108,7 +108,7 @@ const individualDocumentReviewWorkflow = createWorkflow({
-           }
-           return {
-             originalDocument: initData.originalDocument,
--            reviewInput: [],
-+            reviewInput: initData.reviewInput,
-             retryCount: nextRetryCount,
-             status: isFailed
-               ? ('failed' as stepStatus)
-@@ -124,7 +124,7 @@ const individualDocumentReviewWorkflow = createWorkflow({
-         if (initData.retryCount >= 5) {
-           return {
-             originalDocument: initData.originalDocument,
--            reviewInput: [],
-+            reviewInput: initData.reviewInput,
-             retryCount: nextRetryCount,
-             status: 'failed' as stepStatus,
-             errorMessage:
-@@ -155,6 +155,7 @@ const individualDocumentReviewWorkflow = createWorkflow({
-                 ...initData.originalDocument,
-                 id: `${initData.originalDocument.id}_part${index + 1}`,
-                 name: `${initData.originalDocument.name} (part ${index + 1}) (split into parts because the full content did not fit into context)`,
-+                originalName: initData.originalDocument.originalName || initData.originalDocument.name,
-                 textContent: chunk,
-               },
-             })),
-@@ -181,6 +182,7 @@ const individualDocumentReviewWorkflow = createWorkflow({
-                 ...initData.originalDocument,
-                 id: `${initData.originalDocument.id}_part${index + 1}`,
-                 name: `${initData.originalDocument.name} (part ${index + 1}) (split into parts because the full content did not fit into context)`,
-+                originalName: initData.originalDocument.originalName || initData.originalDocument.name,
-                 imageData: chunk,
-               },
-             })),
-@@ -227,6 +229,7 @@ const individualDocumentReviewWorkflow = createWorkflow({
+   // レビュー実行キャンセルハンドラ
+   handleIpc(IpcChannels.REVIEW_EXECUTE_ABORT, async (reviewHistoryId) => {
+-    const result = reviewService.abortExecuteReview(reviewHistoryId);
++    const result = await reviewService.abortExecuteReview(reviewHistoryId);
+     if (!result.success) {
+       throw internalError({
+         expose: true,
+diff --git a/src/main/service/reviewService.ts b/src/main/service/reviewService.ts
+index c65bd4539..053ad71c0 100644
+--- a/src/main/service/reviewService.ts
++++ b/src/main/service/reviewService.ts
+@@ -601,15 +601,22 @@ export class ReviewService implements IReviewService {
+    * チェックリスト抽出処理をキャンセル
+    * @param reviewHistoryId レビュー履歴ID
+    */
+-  public abortExtractChecklist(reviewHistoryId: string): {
++  public async abortExtractChecklist(reviewHistoryId: string): Promise<{
+     success: boolean;
+     error?: string;
+-  } {
++  }> {
+     try {
+       const runningWorkflow = this.runningWorkflows.get(reviewHistoryId);
+       if (runningWorkflow) {
+         runningWorkflow.cancel();
+         this.runningWorkflows.delete(reviewHistoryId);
++
++        // processingStatusを'idle'に更新
++        await this.reviewRepository.updateReviewHistoryProcessingStatus(
++          reviewHistoryId,
++          'idle',
++        );
++
+         logger.info(
+           `チェックリスト抽出処理をキャンセルしました: ${reviewHistoryId}`,
          );
-         return {
-           ...input.document,
-+          originalName: input.document.originalName || input.document.name,
-           reviewResults: reviewResult || [],
-         };
-       }),
+@@ -634,15 +641,22 @@ export class ReviewService implements IReviewService {
+    * レビュー実行処理をキャンセル
+    * @param reviewHistoryId レビュー履歴ID
+    */
+-  public abortExecuteReview(reviewHistoryId: string): {
++  public async abortExecuteReview(reviewHistoryId: string): Promise<{
+     success: boolean;
+     error?: string;
+-  } {
++  }> {
+     try {
+       const runningWorkflow = this.runningWorkflows.get(reviewHistoryId);
+       if (runningWorkflow) {
+         runningWorkflow.cancel();
+         this.runningWorkflows.delete(reviewHistoryId);
++
++        // processingStatusを'extracted'に更新
++        await this.reviewRepository.updateReviewHistoryProcessingStatus(
++          reviewHistoryId,
++          'extracted',
++        );
++
+         logger.info(`レビュー実行処理をキャンセルしました: ${reviewHistoryId}`);
+         return { success: true };
+       } else {
diff --git a/src/adapter/db/drizzle/schema.ts b/src/adapter/db/drizzle/schema.ts
index 39ffd9c64..50079b11b 100644
--- a/src/adapter/db/drizzle/schema.ts
+++ b/src/adapter/db/drizzle/schema.ts
@@ -62,7 +62,7 @@ export const reviewHistories = sqliteTable('review_histories', {
   additionalInstructions: text('additional_instructions'), // レビューの追加指示
   commentFormat: text('comment_format'), // レビューのコメントフォーマット
   evaluationSettings: text('evaluation_settings'), // 評定項目設定（JSON形式）
-  processingStatus: text('processing_status').notNull().default('idle'), // 処理ステータス: idle, extracting, extracted, reviewing, completed
+  processingStatus: text('processing_status').notNull().default('idle'), // 処理ステータス: idle, extracting, canceling-extract, extracted, reviewing, canceling-review, completed
   createdAt: text('created_at')
     .notNull()
     .default(sql`(current_timestamp)`),
diff --git a/src/main/main.ts b/src/main/main.ts
index 047392026..f1212cb9c 100644
--- a/src/main/main.ts
+++ b/src/main/main.ts
@@ -412,6 +412,12 @@ const setupReviewHandlers = () => {
     return histories;
   });
 
+  // 特定のレビュー履歴の取得ハンドラ
+  handleIpc(IpcChannels.REVIEW_GET_HISTORY_BY_ID, async (historyId) => {
+    const history = await reviewService.getReviewHistoryById(historyId);
+    return history;
+  });
+
   // チェックリストの取得ハンドラ
   handleIpc(IpcChannels.REVIEW_GET_HISTORY_DETAIL, async (historyId) => {
     const detail = await reviewService.getReviewHistoryDetail(historyId);
@@ -516,7 +522,7 @@ const setupReviewHandlers = () => {
   handleIpc(
     IpcChannels.REVIEW_EXTRACT_CHECKLIST_ABORT,
     async (reviewHistoryId) => {
-      const result = reviewService.abortExtractChecklist(reviewHistoryId);
+      const result = await reviewService.abortExtractChecklist(reviewHistoryId);
       if (!result.success) {
         throw internalError({
           expose: true,
@@ -531,7 +537,7 @@ const setupReviewHandlers = () => {
 
   // レビュー実行キャンセルハンドラ
   handleIpc(IpcChannels.REVIEW_EXECUTE_ABORT, async (reviewHistoryId) => {
-    const result = reviewService.abortExecuteReview(reviewHistoryId);
+    const result = await reviewService.abortExecuteReview(reviewHistoryId);
     if (!result.success) {
       throw internalError({
         expose: true,
diff --git a/src/main/preload.ts b/src/main/preload.ts
index fa8d0f9c8..27fa95330 100644
--- a/src/main/preload.ts
+++ b/src/main/preload.ts
@@ -120,6 +120,9 @@ const electronHandler = {
   review: {
     /** レビュー履歴一覧 */
     getHistories: () => invokeIpc(IpcChannels.REVIEW_GET_HISTORIES),
+    /** 特定のレビュー履歴取得 */
+    getHistoryById: (historyId: string) =>
+      invokeIpc(IpcChannels.REVIEW_GET_HISTORY_BY_ID, historyId),
     /** 履歴詳細 */
     getHistoryDetail: (historyId: string) =>
       invokeIpc(IpcChannels.REVIEW_GET_HISTORY_DETAIL, historyId),
diff --git a/src/main/service/reviewService.ts b/src/main/service/reviewService.ts
index c65bd4539..8c636080e 100644
--- a/src/main/service/reviewService.ts
+++ b/src/main/service/reviewService.ts
@@ -9,6 +9,7 @@ import {
   ChecklistExtractionResultStatus,
   ReviewExecutionResultStatus,
   DocumentMode,
+  ProcessingStatus,
 } from '@/types';
 import { generateReviewTitle } from '@/mastra/workflows/sourceReview/lib';
 import { RevieHistory } from '@/types';
@@ -23,6 +24,7 @@ import { formatMessage } from '../lib/messages';
 
 export interface IReviewService {
   getReviewHistories(): Promise<RevieHistory[]>;
+  getReviewHistoryById(reviewHistoryId: string): Promise<RevieHistory>;
   getReviewHistoryDetail(reviewHistoryId: string): Promise<{
     checklistResults: ReviewChecklistResult[];
   }>;
@@ -76,6 +78,22 @@ export class ReviewService implements IReviewService {
     return this.reviewRepository.getAllReviewHistories();
   }
 
+  /**
+   * 特定のレビュー履歴を取得
+   */
+  public async getReviewHistoryById(reviewHistoryId: string) {
+    const history = await this.reviewRepository.getReviewHistory(reviewHistoryId);
+    if (!history) {
+      throw internalError({
+        expose: true,
+        messageCode: 'UNKNOWN_ERROR',
+        messageParams: { detail: `レビュー履歴が見つかりません: ${reviewHistoryId}` },
+        cause: new Error(`Review history not found: ${reviewHistoryId}`),
+      });
+    }
+    return history;
+  }
+
   /**
    * レビュー履歴の詳細（チェックリスト結果）を取得
    */
@@ -310,7 +328,15 @@ export class ReviewService implements IReviewService {
       this.runningWorkflows.delete(reviewHistoryId);
 
       // 処理ステータスを更新
-      const newStatus = checkResult.status === 'success' ? 'extracted' : 'idle';
+      let newStatus: ProcessingStatus;
+      if (checkResult.status === 'success') {
+        newStatus = 'extracted';
+      } else if (checkResult.status === 'canceled') {
+        newStatus = 'idle'; // キャンセル時はidleに戻す
+      } else {
+        newStatus = 'idle'; // failed, suspended時もidleに戻す
+      }
+
       await this.reviewRepository.updateReviewHistoryProcessingStatus(
         reviewHistoryId,
         newStatus,
@@ -424,8 +450,15 @@ export class ReviewService implements IReviewService {
       this.runningWorkflows.delete(reviewHistoryId);
 
       // 処理ステータスを更新
-      const newStatus =
-        checkResult.status === 'success' ? 'completed' : 'extracted';
+      let newStatus: ProcessingStatus;
+      if (checkResult.status === 'success') {
+        newStatus = 'completed';
+      } else if (checkResult.status === 'canceled') {
+        newStatus = 'extracted'; // キャンセル時はextractedに戻す
+      } else {
+        newStatus = 'extracted'; // failed, suspended時もextractedに戻す
+      }
+
       await this.reviewRepository.updateReviewHistoryProcessingStatus(
         reviewHistoryId,
         newStatus,
@@ -601,17 +634,24 @@ export class ReviewService implements IReviewService {
    * チェックリスト抽出処理をキャンセル
    * @param reviewHistoryId レビュー履歴ID
    */
-  public abortExtractChecklist(reviewHistoryId: string): {
+  public async abortExtractChecklist(reviewHistoryId: string): Promise<{
     success: boolean;
     error?: string;
-  } {
+  }> {
     try {
       const runningWorkflow = this.runningWorkflows.get(reviewHistoryId);
       if (runningWorkflow) {
+        // processingStatusを'canceling-extract'に更新（キャンセル処理中）
+        await this.reviewRepository.updateReviewHistoryProcessingStatus(
+          reviewHistoryId,
+          'canceling-extract',
+        );
+
         runningWorkflow.cancel();
         this.runningWorkflows.delete(reviewHistoryId);
+
         logger.info(
-          `チェックリスト抽出処理をキャンセルしました: ${reviewHistoryId}`,
+          `チェックリスト抽出処理のキャンセルを開始しました: ${reviewHistoryId}`,
         );
         return { success: true };
       } else {
@@ -634,16 +674,23 @@ export class ReviewService implements IReviewService {
    * レビュー実行処理をキャンセル
    * @param reviewHistoryId レビュー履歴ID
    */
-  public abortExecuteReview(reviewHistoryId: string): {
+  public async abortExecuteReview(reviewHistoryId: string): Promise<{
     success: boolean;
     error?: string;
-  } {
+  }> {
     try {
       const runningWorkflow = this.runningWorkflows.get(reviewHistoryId);
       if (runningWorkflow) {
+        // processingStatusを'canceling-review'に更新（キャンセル処理中）
+        await this.reviewRepository.updateReviewHistoryProcessingStatus(
+          reviewHistoryId,
+          'canceling-review',
+        );
+
         runningWorkflow.cancel();
         this.runningWorkflows.delete(reviewHistoryId);
-        logger.info(`レビュー実行処理をキャンセルしました: ${reviewHistoryId}`);
+
+        logger.info(`レビュー実行処理のキャンセルを開始しました: ${reviewHistoryId}`);
         return { success: true };
       } else {
         logger.warn(
diff --git a/src/renderer/components/review/ReviewArea.tsx b/src/renderer/components/review/ReviewArea.tsx
index 2d2322987..4f5d1c1a1 100644
--- a/src/renderer/components/review/ReviewArea.tsx
+++ b/src/renderer/components/review/ReviewArea.tsx
@@ -21,6 +21,7 @@ import {
   ChecklistExtractionResultStatus,
   ReviewExecutionResultStatus,
   DocumentMode,
+  ProcessingStatus,
 } from '@/types';
 import { ReviewAreaProps } from './types';
 import ReviewChecklistSection from './ReviewChecklistSection';
@@ -51,6 +52,8 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
   const [isSaving, setIsSaving] = useState(false);
   const [isExtracting, setIsExtracting] = useState(false);
   const [isReviewing, setIsReviewing] = useState(false);
+  const [processingStatus, setProcessingStatus] =
+    useState<ProcessingStatus>('idle');
   const [isModalOpen, setIsModalOpen] = useState(false);
   const [modalMode, setModalMode] = useState<ModalMode | null>(null);
   const [additionalInstructions, setAdditionalInstructions] = useState('');
@@ -68,11 +71,21 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
     if (!selectedReviewHistoryId) return;
     const reviewApi = ReviewApi.getInstance();
 
+    // チェックリスト結果を取得
     const result = await reviewApi.getReviewHistoryDetail(
       selectedReviewHistoryId,
       { throwError: true, showAlert: true },
     );
     setChecklistResults(result?.checklistResults || []);
+
+    // processingStatusも取得して更新
+    const currentHistory = await reviewApi.getHistoryById(
+      selectedReviewHistoryId,
+      { throwError: true, showAlert: true },
+    );
+    if (currentHistory) {
+      setProcessingStatus(currentHistory.processingStatus);
+    }
   }, [selectedReviewHistoryId]);
 
   // チェックリスト抽出完了の共通処理ハンドラー
@@ -108,6 +121,11 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
           message: `チェックリストの抽出に失敗しました\n${payload.error}`,
           severity: 'error',
         });
+      } else if (payload.status === 'canceled') {
+        addAlert({
+          message: 'チェックリスト抽出をキャンセルしました',
+          severity: 'info',
+        });
       }
 
       setIsExtracting(false);
@@ -148,6 +166,11 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
           message: `レビューに失敗しました\n${payload.error}`,
           severity: 'error',
         });
+      } else if (payload.status === 'canceled') {
+        addAlert({
+          message: 'レビュー実行をキャンセルしました',
+          severity: 'info',
+        });
       }
 
       setIsReviewing(false);
@@ -177,6 +200,7 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
     setChecklistResults([]);
     setIsExtracting(false);
     setIsReviewing(false);
+    setProcessingStatus('idle');
     setAdditionalInstructions('');
     setCommentFormat(defaultCommentFormat);
     setEvaluationSettings(defaultEvaluationSettings);
@@ -203,18 +227,19 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
         );
 
         // レビュー履歴の詳細から処理ステータスを取得
-        const histories = await reviewApi.getHistories({
-          throwError: true,
-          showAlert: true,
-        });
-        const currentHistory = histories?.find(
-          (h) => h.id === selectedReviewHistoryId,
+        const currentHistory = await reviewApi.getHistoryById(
+          selectedReviewHistoryId,
+          { throwError: true, showAlert: true },
         );
 
         if (currentHistory) {
+          // processingStatusを設定
+          setProcessingStatus(currentHistory.processingStatus);
+
           // 処理ステータスに応じて状態とイベント購読を設定
           switch (currentHistory.processingStatus) {
             case 'extracting':
+            case 'canceling-extract':
               setIsExtracting(true);
               // チェックリスト抽出完了イベントを購読
               const extractUnsubscribe =
@@ -224,6 +249,7 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
               eventUnsubscribeRef.current = extractUnsubscribe;
               break;
             case 'reviewing':
+            case 'canceling-review':
               setIsReviewing(true);
               // レビュー実行完了イベントを購読
               const reviewUnsubscribe =
@@ -418,9 +444,9 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
         showAlert: false,
         throwError: true,
       });
-      setIsExtracting(false);
+      // キャンセル完了はイベントで通知されるため、ここでは状態を変更しない
       addAlert({
-        message: 'チェックリスト抽出をキャンセルしました',
+        message: 'チェックリスト抽出のキャンセル処理を開始しました',
         severity: 'info',
       });
       // 抽出結果の再取得
@@ -450,12 +476,12 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
 
     try {
       await reviewApi.abortExecuteReview(selectedReviewHistoryId, {
-        showAlert: true,
+        showAlert: false,
         throwError: true,
       });
-      setIsReviewing(false);
+      // キャンセル完了はイベントで通知されるため、ここでは状態を変更しない
       addAlert({
-        message: 'レビュー実行をキャンセルしました',
+        message: 'レビュー実行のキャンセル処理を開始しました',
         severity: 'info',
       });
       fetchChecklistResults().catch((error) => {
@@ -576,9 +602,17 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
                         setIsModalOpen(true);
                       }
                 }
-                disabled={!selectedReviewHistoryId || isReviewing}
+                disabled={
+                  !selectedReviewHistoryId ||
+                  isReviewing ||
+                  processingStatus === 'canceling-extract'
+                }
               >
-                {isExtracting ? 'キャンセル' : 'チェックリスト抽出'}
+                {isExtracting
+                  ? processingStatus === 'canceling-extract'
+                    ? 'キャンセル処理中'
+                    : 'キャンセル'
+                  : 'チェックリスト抽出'}
               </Button>
               <Button
                 variant="contained"
@@ -595,10 +629,15 @@ const ReviewArea: React.FC<ReviewAreaProps> = ({ selectedReviewHistoryId }) => {
                 disabled={
                   !selectedReviewHistoryId ||
                   isExtracting ||
-                  (checklistResults.length === 0 && !isReviewing)
+                  (checklistResults.length === 0 && !isReviewing) ||
+                  processingStatus === 'canceling-review'
                 }
               >
-                {isReviewing ? 'キャンセル' : 'レビュー実行'}
+                {isReviewing
+                  ? processingStatus === 'canceling-review'
+                    ? 'キャンセル処理中'
+                    : 'キャンセル'
+                  : 'レビュー実行'}
               </Button>
             </Stack>
           </Stack>
diff --git a/src/renderer/service/reviewApi.ts b/src/renderer/service/reviewApi.ts
index 02fc24edb..37b537466 100644
--- a/src/renderer/service/reviewApi.ts
+++ b/src/renderer/service/reviewApi.ts
@@ -18,6 +18,10 @@ export interface IReviewApi {
   getHistories(
     options?: ApiServiceDefaultOptions,
   ): Promise<RevieHistory[] | null>;
+  getHistoryById(
+    historyId: string,
+    options?: ApiServiceDefaultOptions,
+  ): Promise<RevieHistory | null>;
   deleteHistory(
     historyId: string,
     options?: ApiServiceDefaultOptions,
@@ -103,6 +107,13 @@ export class ReviewApi implements IReviewApi {
     return invokeApi(() => window.electron.review.getHistories(), options);
   }
 
+  public async getHistoryById(
+    historyId: string,
+    options?: ApiServiceDefaultOptions,
+  ): Promise<RevieHistory | null> {
+    return invokeApi(() => window.electron.review.getHistoryById(historyId), options);
+  }
+
   public async deleteHistory(
     historyId: string,
     options?: ApiServiceDefaultOptions,
diff --git a/src/types/ipc.ts b/src/types/ipc.ts
index 0fc449d82..97d4a8fb2 100644
--- a/src/types/ipc.ts
+++ b/src/types/ipc.ts
@@ -70,6 +70,7 @@ export const IpcChannels = {
 
   // ドキュメントレビュー関連
   REVIEW_GET_HISTORIES: 'review-get-histories', // ドキュメント履歴切り替え時やチェックリスト抽出・ドキュメントレビュー時のポーリング処理にて呼び出される
+  REVIEW_GET_HISTORY_BY_ID: 'review-get-history-by-id', // 特定のレビュー履歴を取得
   REVIEW_GET_HISTORY_DETAIL: 'review-get-history-detail',
   REVIEW_GET_HISTORY_INSTRUCTION: 'review-get-history-instruction',
   REVIEW_DELETE_HISTORY: 'review-delete-history',
@@ -127,6 +128,7 @@ export type IpcRequestPayloadMap = {
 
   // ドキュメントレビュー関連
   [IpcChannels.REVIEW_GET_HISTORIES]: undefined;
+  [IpcChannels.REVIEW_GET_HISTORY_BY_ID]: string; // review history id
   [IpcChannels.REVIEW_GET_HISTORY_DETAIL]: string; // review history id
   [IpcChannels.REVIEW_GET_HISTORY_INSTRUCTION]: string; // review history id
   [IpcChannels.REVIEW_DELETE_HISTORY]: string; // review history id
@@ -187,6 +189,7 @@ export type IpcResponsePayloadMap = {
 
   // ドキュメントレビュー関連
   [IpcChannels.REVIEW_GET_HISTORIES]: IpcResult<RevieHistory[]>;
+  [IpcChannels.REVIEW_GET_HISTORY_BY_ID]: IpcResult<RevieHistory>;
   [IpcChannels.REVIEW_GET_HISTORY_DETAIL]: IpcResult<{
     checklistResults?: ReviewChecklistResult[];
   }>;
@@ -279,6 +282,7 @@ export const IpcNameMap = {
 
   // ドキュメントレビュー関連
   [IpcChannels.REVIEW_GET_HISTORIES]: 'レビュー結果一覧の取得',
+  [IpcChannels.REVIEW_GET_HISTORY_BY_ID]: 'レビュー結果の取得',
   [IpcChannels.REVIEW_GET_HISTORY_DETAIL]: 'レビュー結果詳細の取得',
   [IpcChannels.REVIEW_GET_HISTORY_INSTRUCTION]: 'レビュー指示内容の取得',
   [IpcChannels.REVIEW_DELETE_HISTORY]: 'レビュー結果の削除',
diff --git a/src/types/review.ts b/src/types/review.ts
index 52578ffaa..2b30748c4 100644
--- a/src/types/review.ts
+++ b/src/types/review.ts
@@ -92,8 +92,10 @@ export type ReviewExecutionResultStatus =
 
 // 処理ステータスの型定義
 export type ProcessingStatus =
-  | 'idle'        // アイドル状態
-  | 'extracting'  // チェックリスト抽出中
-  | 'extracted'   // チェックリスト抽出完了
-  | 'reviewing'   // レビュー実行中
-  | 'completed';  // レビュー完了
+  | 'idle'              // アイドル状態
+  | 'extracting'        // チェックリスト抽出中
+  | 'canceling-extract' // チェックリスト抽出のキャンセル処理中
+  | 'extracted'         // チェックリスト抽出完了
+  | 'reviewing'         // レビュー実行中
+  | 'canceling-review'  // レビュー実行のキャンセル処理中
+  | 'completed';        // レビュー完了
