diff --git a/CLAUDE.md b/CLAUDE.md
index 81694e235..41e3d7adf 100644
--- a/CLAUDE.md
+++ b/CLAUDE.md
@@ -209,5 +209,6 @@ ElectronのIPCを使用してフロントエンド・バックエンド間の通
 
 
 ## 依頼タスク
-- 要件
-  - 大量ドキュメントレビューの結果を表示する際に、ドキュメント分割した際に一時的に付与したファイル名が全て結合されてしまっており、結果が見にくい。少量ドキュメントレビューと同じようにファイルアップロードした元のファイル名のみ結合するように変更する。
+- 修正依頼
+  - ドキュメントレビュー機能において、チェックリスト抽出処理やレビュー実行処理をキャンセルした際に、`review_histories`テーブルのprocessingStatusフィールドが変更できていないため、コンポーネント等では実行中と認識されてしまう
+    - processingStatusフィールドはキャンセルした場合は'canceled'としたい
diff --git a/src/main/main.ts b/src/main/main.ts
index 047392026..bc1ed6ea3 100644
--- a/src/main/main.ts
+++ b/src/main/main.ts
@@ -516,7 +516,7 @@ const setupReviewHandlers = () => {
   handleIpc(
     IpcChannels.REVIEW_EXTRACT_CHECKLIST_ABORT,
     async (reviewHistoryId) => {
-      const result = reviewService.abortExtractChecklist(reviewHistoryId);
+      const result = await reviewService.abortExtractChecklist(reviewHistoryId);
       if (!result.success) {
         throw internalError({
           expose: true,
@@ -531,7 +531,7 @@ const setupReviewHandlers = () => {
 
   // レビュー実行キャンセルハンドラ
   handleIpc(IpcChannels.REVIEW_EXECUTE_ABORT, async (reviewHistoryId) => {
-    const result = reviewService.abortExecuteReview(reviewHistoryId);
+    const result = await reviewService.abortExecuteReview(reviewHistoryId);
     if (!result.success) {
       throw internalError({
         expose: true,
diff --git a/src/main/service/reviewService.ts b/src/main/service/reviewService.ts
index c65bd4539..053ad71c0 100644
--- a/src/main/service/reviewService.ts
+++ b/src/main/service/reviewService.ts
@@ -601,15 +601,22 @@ export class ReviewService implements IReviewService {
    * チェックリスト抽出処理をキャンセル
    * @param reviewHistoryId レビュー履歴ID
    */
-  public abortExtractChecklist(reviewHistoryId: string): {
+  public async abortExtractChecklist(reviewHistoryId: string): Promise<{
     success: boolean;
     error?: string;
-  } {
+  }> {
     try {
       const runningWorkflow = this.runningWorkflows.get(reviewHistoryId);
       if (runningWorkflow) {
         runningWorkflow.cancel();
         this.runningWorkflows.delete(reviewHistoryId);
+
+        // processingStatusを'idle'に更新
+        await this.reviewRepository.updateReviewHistoryProcessingStatus(
+          reviewHistoryId,
+          'idle',
+        );
+
         logger.info(
           `チェックリスト抽出処理をキャンセルしました: ${reviewHistoryId}`,
         );
@@ -634,15 +641,22 @@ export class ReviewService implements IReviewService {
    * レビュー実行処理をキャンセル
    * @param reviewHistoryId レビュー履歴ID
    */
-  public abortExecuteReview(reviewHistoryId: string): {
+  public async abortExecuteReview(reviewHistoryId: string): Promise<{
     success: boolean;
     error?: string;
-  } {
+  }> {
     try {
       const runningWorkflow = this.runningWorkflows.get(reviewHistoryId);
       if (runningWorkflow) {
         runningWorkflow.cancel();
         this.runningWorkflows.delete(reviewHistoryId);
+
+        // processingStatusを'extracted'に更新
+        await this.reviewRepository.updateReviewHistoryProcessingStatus(
+          reviewHistoryId,
+          'extracted',
+        );
+
         logger.info(`レビュー実行処理をキャンセルしました: ${reviewHistoryId}`);
         return { success: true };
       } else {
