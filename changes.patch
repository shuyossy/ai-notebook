diff --git a/.gitignore b/.gitignore
index b5cdd5709..19003f9b1 100644
--- a/.gitignore
+++ b/.gitignore
@@ -46,3 +46,4 @@ mcp.log
 electron-store
 .erb/chrome.exe
 /release/app/drizzle
+dev_appdata
diff --git a/src/main/lib/fileExtractor.ts b/src/main/lib/fileExtractor.ts
index 66debff84..4375ab235 100644
--- a/src/main/lib/fileExtractor.ts
+++ b/src/main/lib/fileExtractor.ts
@@ -4,11 +4,10 @@ import os from 'os';
 import path from 'path';
 import { execFile } from 'child_process';
 import { promisify } from 'util';
-import { readFileSync, existsSync, mkdirSync } from 'fs';
+import { readFileSync} from 'fs';
 import { createHash } from 'crypto';
-import { app } from 'electron';
 import type { TextItem } from 'pdfjs-dist/types/src/display/api';
-import { getConfigDir } from '../store';
+import { getCustomAppDataDir } from '../main';
 
 // pdfテキスト抽出処理において、pdfjs-dist/legacy/build/pdf.mjsを動的インポートする際に、node.js環境でpdf処理をするためにライブラリ内部で@napi-rs/canvasを利用して、ブラウザのcanvasをpolyfillする
 // その際、動的にrequire("@napi-rs/canvas")が実行されるが、本番環境だとモジュールが見つけられないエラーになる
@@ -53,7 +52,7 @@ export default class FileExtractor {
    * キャッシュディレクトリのパスを取得
    */
   private static getCacheDir(): string {
-    return getConfigDir();
+    return getCustomAppDataDir()
   }
 
   /**
diff --git a/src/main/main.ts b/src/main/main.ts
index 0410a2ca4..1a49853bc 100644
--- a/src/main/main.ts
+++ b/src/main/main.ts
@@ -8,19 +8,15 @@
  * When running `npm run build` or `npm run build:main`, this file is compiled to
  * `./src/main.js` using webpack. This gives us some performance wins.
  */
-import path from 'path';
+import path, { join } from 'path';
 import fs from 'fs/promises';
 import nodeFs from 'node:fs';
+import { app } from 'electron';
 
-// windows環境でexeを実行する際は、userDataディレクトリを変更する（プロファイル逼迫対策）
-if (process.env.PORTABLE_EXECUTABLE_DIR) {
-  const userDataPath = path.join(
-    process.env.PORTABLE_EXECUTABLE_DIR,
-    'userData',
-  );
-  ensureDir(userDataPath);
-  app.setPath('userData', userDataPath);
-}
+// APPDATAディレクトリ変更
+const appDataDir = getCustomAppDataDir();
+ensureDir(appDataDir);
+app.setPath('userData', appDataDir);
 
 function ensureDir(p: string) {
   try {
@@ -31,8 +27,37 @@ function ensureDir(p: string) {
   }
 }
 
+/**
+ * AIKATA用のAPPDATAディレクトリを決定する
+ *
+ * 1. Windows Portable   : PORTABLE_EXECUTABLE_DIR
+ * 2. Windows Installer  : exe と同階層
+ * 3. macOS / Linux      : userData（書き込み可）
+ * 4. 開発時             : プロジェクトのルート
+ */
+export function getCustomAppDataDir(): string {
+  // --- ① Windows Portable (.exe 単体) --------------------------
+  // electron-builder の Portable テンプレートが自動で環境変数をセット
+  if (process.env.PORTABLE_EXECUTABLE_DIR) {
+    return process.env.PORTABLE_EXECUTABLE_DIR;
+  }
+
+  // --- ② パッケージ版 (app.isPackaged === true) ---------------
+  if (app.isPackaged) {
+    // macOS .app や Linux AppImage は execPath 周辺が書き込み不可
+    if (process.platform === 'darwin' || process.platform === 'linux') {
+      return app.getPath('userData');
+    }
+    // Windows インストーラ版は exe と同階層 （Program Files でも書き込める）
+    return path.dirname(process.execPath);
+  }
+
+  // --- ③ 開発時 (electron . / npm start) -----------------------
+  // execPath は node_modules 内の Electron バイナリ ⇒ プロジェクト直下へ補正
+  return join(__dirname, '..', '..', 'dev_appdata');
+}
+
 import {
-  app,
   BrowserWindow,
   shell,
   ipcMain,
diff --git a/src/main/store.ts b/src/main/store.ts
index 9a05907a4..32a5cd3db 100644
--- a/src/main/store.ts
+++ b/src/main/store.ts
@@ -1,7 +1,6 @@
-import path, { join } from 'path';
-import { app } from 'electron';
 // @ts-ignore
 import Store from 'electron-store';
+import { getCustomAppDataDir } from './main';
 // 設定の型定義
 export interface StoreSchema {
   database: {
@@ -88,36 +87,6 @@ const schema = {
   },
 } as const;
 
-/**
- * config.json を収納するディレクトリを決定する
- *
- * 1. Windows Portable   : PORTABLE_EXECUTABLE_DIR
- * 2. Windows Installer  : exe と同階層
- * 3. macOS / Linux      : userData（書き込み可）
- * 4. 開発時             : プロジェクトのルート
- */
-export function getConfigDir(): string {
-  // --- ① Windows Portable (.exe 単体) --------------------------
-  // electron-builder の Portable テンプレートが自動で環境変数をセット
-  if (process.env.PORTABLE_EXECUTABLE_DIR) {
-    return process.env.PORTABLE_EXECUTABLE_DIR;
-  }
-
-  // --- ② パッケージ版 (app.isPackaged === true) ---------------
-  if (app.isPackaged) {
-    // macOS .app や Linux AppImage は execPath 周辺が書き込み不可
-    if (process.platform === 'darwin' || process.platform === 'linux') {
-      return app.getPath('userData'); // ユーザ領域へ退避
-    }
-    // Windows インストーラ版は exe と同階層 （Program Files でも書き込める）
-    return path.dirname(process.execPath);
-  }
-
-  // --- ③ 開発時 (electron . / npm start) -----------------------
-  // execPath は node_modules 内の Electron バイナリ ⇒ プロジェクト直下へ補正
-  return join(__dirname, '..', '..', 'electron-store');
-}
-
 // デフォルト値の設定
 const defaults: StoreSchema = {
   database: {
@@ -153,7 +122,7 @@ const store = new Store<StoreSchema>({
   defaults,
   // アプリのユーザーデータディレクトリ内のconfigフォルダに保存
   // cwd: path.join(app.getPath('userData'), 'config'),
-  cwd: getConfigDir(),
+  cwd: getCustomAppDataDir(), 
 });
 
 // ストアを取得する関数
diff --git a/src/mastra/index.ts b/src/mastra/index.ts
index 3b8821615..ee263a839 100644
--- a/src/mastra/index.ts
+++ b/src/mastra/index.ts
@@ -21,12 +21,12 @@ import {
 import { sourceRegistrationWorkflow } from './workflows/sourceRegistration/sourceRegistration';
 import { checklistExtractionWorkflow } from './workflows/sourceReview/checklistExtraction';
 import { reviewExecutionWorkflow } from './workflows/sourceReview/reviewExecution';
-import { getConfigDir } from '@/main/store';
 import fs from 'fs';
 import path from 'path';
 import { getLogLevel } from '@/main/lib/logger';
+import { getCustomAppDataDir } from '@/main/main';
 
-const logDir = getConfigDir();
+const logDir = getCustomAppDataDir();
 // ログファイルの保存先ディレクトリを設定
 const logFilePath = path.join(logDir, 'ai.log');
 console.log(`AIログファイルの保存先: ${logFilePath}`);
