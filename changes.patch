diff --git a/src/main/store.ts b/src/main/store.ts
index 9b75fee0c..8693ecf70 100644
--- a/src/main/store.ts
+++ b/src/main/store.ts
@@ -28,6 +28,9 @@ export interface StoreSchema {
     enabled: boolean;
     headless: boolean;
   };
+  systemPrompt: {
+    content: string;
+  };
 }
 
 // スキーマ定義
@@ -95,6 +98,16 @@ const schema = {
     },
     required: [],
   },
+  systemPrompt: {
+    type: 'object',
+    properties: {
+      content: {
+        type: 'string',
+        default: '',
+      },
+    },
+    required: [],
+  },
 } as const;
 
 /**
@@ -155,6 +168,9 @@ const defaults: StoreSchema = {
     enabled: false,
     headless: false,
   },
+  systemPrompt: {
+    content: '',
+  },
 };
 
 // ストアのインスタンスを作成する関数
diff --git a/src/main/types/settingsSchema.ts b/src/main/types/settingsSchema.ts
index bfd11adf1..4397a2253 100644
--- a/src/main/types/settingsSchema.ts
+++ b/src/main/types/settingsSchema.ts
@@ -79,6 +79,13 @@ export const StagehandSchema = z.object({
   headless: z.boolean(),
 });
 
+/**
+ * システムプロンプト設定のスキーマ
+ */
+export const SystemPromptSchema = z.object({
+  content: z.string(),
+});
+
 /**
  * MCP設定のスキーマ
  */
@@ -121,6 +128,7 @@ export const SettingsSchema = z.object({
   gitlab: GitLabSchema,
   mcp: McpStoreSchema,
   stagehand: StagehandSchema,
+  systemPrompt: SystemPromptSchema,
 });
 
 export type ValidationError = {
diff --git a/src/mastra/agents/prompts.ts b/src/mastra/agents/prompts.ts
index 416fa1661..d265eb4cc 100644
--- a/src/mastra/agents/prompts.ts
+++ b/src/mastra/agents/prompts.ts
@@ -104,6 +104,8 @@ export const getOrchestratorSystemPrompt = async (
 
   const sourceListMD = await getSourcesInfoByMDList();
 
+  const systemPrompt = store.get('systemPrompt.content');
+
   const prompt = `
 You are an AI agent empowered with a rich set of tools. Whenever a user request arrives, follow this cycle:
 
@@ -122,7 +124,17 @@ Keep your working memory updated. When uncertain, ask for clarification rather t
 
 ---
 
-### Tools
+${
+  systemPrompt
+    ? `### System Instructions
+
+${systemPrompt}
+
+---
+
+`
+    : ''
+}### Tools
 
 - **Document Query Tool**
   documentQueryTool: Search registered sources for relevant details.
@@ -195,7 +207,7 @@ ${
 
 #### Registered Document(summaries only)
 
-${sourceListMD}
+${sourceListMD.trim() ? sourceListMD : 'No documents registered.'}
 `;
   return prompt;
 };
diff --git a/src/mastra/memory/filter/customToolCallFilter.ts b/src/mastra/memory/filter/customToolCallFilter.ts
new file mode 100644
index 000000000..c40931a3b
--- /dev/null
+++ b/src/mastra/memory/filter/customToolCallFilter.ts
@@ -0,0 +1,107 @@
+import type { CoreMessage } from '@mastra/core';
+import { MemoryProcessor } from '@mastra/core';
+
+/**
+ * Filters out tool calls and results from messages.
+ * By default (with no arguments), excludes all tool calls and their results.
+ * Can be configured to exclude only specific tools by name.
+ */
+export class customToolCallFilter extends MemoryProcessor {
+  private exclude: string[] | 'all';
+
+  /**
+   * Create a filter for tool calls and results.
+   * @param options Configuration options
+   * @param options.exclude List of specific tool names to exclude. If not provided, all tool calls are excluded.
+   */
+  constructor(options: { exclude?: string[] } = {}) {
+    super({ name: 'ToolCallFilter' });
+    // If no options or exclude is provided, exclude all tools
+    if (!options || !options.exclude) {
+      this.exclude = 'all'; // Exclude all tools
+    } else {
+      // Exclude specific tools
+      this.exclude = Array.isArray(options.exclude) ? options.exclude : [];
+    }
+  }
+
+  process(messages: CoreMessage[]): CoreMessage[] {
+    // Case 1: Exclude all tool calls and tool results
+    if (this.exclude === 'all') {
+      // カスタム: tool-callは除外せず、tool-resultは置き換える
+      return messages.map((message) => {
+        if (Array.isArray(message.content)) {
+          return {
+            ...message,
+            content: message.content.map((part) => {
+              if (part.type === 'tool-result') {
+                return {
+                  ...part,
+                  result:
+                    'Tool results have been omitted to conserve context length. Please re-run the tool to view them.',
+                };
+              }
+              return part;
+            }),
+          } as CoreMessage;
+        }
+        return message;
+      });
+    }
+
+    // Case 2: Exclude specific tools by name
+    if (this.exclude.length > 0) {
+      // Single pass approach - track excluded tool call IDs while filtering
+      const excludedToolCallIds = new Set<string>();
+
+      return messages.map((message) => {
+        if (!Array.isArray(message.content)) return message;
+
+        // For assistant messages, check for excluded tool calls and track their IDs
+        // カスタム: tool-callは除外しない
+        if (message.role === 'assistant') {
+          for (const part of message.content) {
+            if (
+              part.type === 'tool-call' &&
+              this.exclude.includes(part.toolName)
+            ) {
+              excludedToolCallIds.add(part.toolCallId);
+            }
+          }
+          return message;
+        }
+
+        // For tool messages, filter out results for excluded tool calls
+        // カスタム: tool-callは除外しない
+        if (message.role === 'tool') {
+          const shouldExclude = message.content.some(
+            (part) =>
+              part.type === 'tool-result' &&
+              excludedToolCallIds.has(part.toolCallId),
+          );
+
+          if (shouldExclude) {
+            return {
+              ...message,
+              content: message.content.map((part) => {
+                if (part.type === 'tool-result') {
+                  return {
+                    ...part,
+                    result:
+                      'Tool results have been omitted to conserve context length. Please re-run the tool to view them.',
+                  };
+                }
+                return part;
+              }),
+            } as CoreMessage;
+          }
+        }
+
+        return message;
+      });
+    }
+
+    // Case 3: Empty exclude array, return original messages
+    return messages;
+  }
+}
diff --git a/src/renderer/App.tsx b/src/renderer/App.tsx
index 3adb6a0e8..542f78114 100644
--- a/src/renderer/App.tsx
+++ b/src/renderer/App.tsx
@@ -17,8 +17,8 @@ import { sourceService } from './services/sourceService';
 const theme = createTheme({
   palette: {
     primary: {
-      main: '#3f51b5',
-      light: '#e8eaf6',
+      main: '#ff7474',
+      light: '#ff5252',
     },
     secondary: {
       main: '#f50057',
diff --git a/src/renderer/components/chat/MessageInput.tsx b/src/renderer/components/chat/MessageInput.tsx
index 202c4500f..7d89b001c 100644
--- a/src/renderer/components/chat/MessageInput.tsx
+++ b/src/renderer/components/chat/MessageInput.tsx
@@ -6,7 +6,10 @@ import {
   Paper,
   InputAdornment,
 } from '@mui/material';
-import { Send as SendIcon, Stop as StopIcon } from '@mui/icons-material';
+import {
+  Send as SendIcon,
+  StopCircleOutlined as StopCircleOutlinedIcon,
+} from '@mui/icons-material';
 
 interface MessageInputProps {
   handleSubmit: (e: React.FormEvent) => void;
@@ -83,14 +86,8 @@ const MessageInput: React.FC<MessageInputProps> = ({
                 <InputAdornment position="end">
                   {/* 送信ボタンまたは送信中インジケーター */}
                   {isStreaming ? (
-                    <IconButton
-                      color="primary"
-                      onClick={onStop}
-                      sx={{
-                        border: '1px solid',
-                      }}
-                    >
-                      <StopIcon />
+                    <IconButton color="primary" onClick={onStop}>
+                      <StopCircleOutlinedIcon />
                     </IconButton>
                   ) : (
                     <IconButton
diff --git a/src/renderer/components/common/SettingsModal.tsx b/src/renderer/components/common/SettingsModal.tsx
index 4e916d352..1df49dc51 100644
--- a/src/renderer/components/common/SettingsModal.tsx
+++ b/src/renderer/components/common/SettingsModal.tsx
@@ -31,6 +31,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
   const {
     settings,
     validationErrors,
+    loading,
     error,
     updateField,
     saveSettings,
@@ -71,7 +72,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
         onClick={handleSave}
         variant="contained"
         color="primary"
-        disabled={saving || !isValid}
+        disabled={loading || saving || !isValid}
         startIcon={saving ? <CircularProgress size={16} /> : null}
       >
         保存
@@ -96,6 +97,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
               fullWidth
               label="APIキー"
               value={settings.api.key}
+              disabled={loading || saving}
               onChange={(e) => handleChange('api', 'key', e.target.value)}
               error={!!validationErrors.api?.key}
               helperText={validationErrors.api?.key?.message}
@@ -106,6 +108,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
               fullWidth
               label="APIエンドポイントURL"
               value={settings.api.url}
+              disabled={loading || saving}
               onChange={(e) => handleChange('api', 'url', e.target.value)}
               error={!!validationErrors.api?.url}
               helperText={validationErrors.api?.url?.message}
@@ -116,6 +119,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
               fullWidth
               label="モデル名"
               value={settings.api.model}
+              disabled={loading || saving}
               onChange={(e) => handleChange('api', 'model', e.target.value)}
               error={!!validationErrors.api?.model}
               helperText={validationErrors.api?.model?.message}
@@ -132,6 +136,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
               fullWidth
               label="ソース登録ディレクトリ"
               value={settings.source.registerDir}
+              disabled={loading || saving}
               onChange={(e) =>
                 handleChange('source', 'registerDir', e.target.value)
               }
@@ -153,6 +158,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
               fullWidth
               label="エンドポイント"
               value={settings.redmine.endpoint}
+              disabled={loading || saving}
               onChange={(e) =>
                 handleChange('redmine', 'endpoint', e.target.value)
               }
@@ -165,6 +171,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
               fullWidth
               label="APIキー"
               value={settings.redmine.apiKey}
+              disabled={loading || saving}
               onChange={(e) =>
                 handleChange('redmine', 'apiKey', e.target.value)
               }
@@ -183,6 +190,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
               fullWidth
               label="エンドポイント"
               value={settings.gitlab.endpoint}
+              disabled={loading || saving}
               onChange={(e) =>
                 handleChange('gitlab', 'endpoint', e.target.value)
               }
@@ -195,6 +203,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
               fullWidth
               label="APIキー"
               value={settings.gitlab.apiKey}
+              disabled={loading || saving}
               onChange={(e) => handleChange('gitlab', 'apiKey', e.target.value)}
               error={!!validationErrors.gitlab?.apiKey}
               helperText={validationErrors.gitlab?.apiKey?.message}
@@ -215,6 +224,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
                     onChange={(e) =>
                       handleChange('stagehand', 'enabled', e.target.checked)
                     }
+                    disabled={loading || saving}
                   />
                 }
                 label="ブラウザ操作を有効化"
@@ -226,6 +236,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
                     onChange={(e) =>
                       handleChange('stagehand', 'headless', e.target.checked)
                     }
+                    disabled={loading || saving}
                   />
                 }
                 label="ヘッドレスモードを有効化"
@@ -243,6 +254,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
               multiline
               rows={4}
               value={settings.mcp.serverConfigText}
+              disabled={loading || saving}
               onChange={(e) => {
                 handleChange('mcp', 'serverConfigText', e.target.value);
               }}
@@ -277,6 +289,27 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
             </Typography>
           </Box>
 
+          <Box sx={{ width: '100%', mb: 1 }}>
+            <Typography variant="h6" gutterBottom>
+              システムプロンプト設定
+            </Typography>
+            <TextField
+              fullWidth
+              label="システムプロンプトのカスタマイズが可能です"
+              value={settings.systemPrompt.content}
+              disabled={loading || saving}
+              onChange={(e) =>
+                handleChange('systemPrompt', 'content', e.target.value)
+              }
+              error={!!validationErrors.systemPrompt?.content}
+              helperText={validationErrors.systemPrompt?.content?.message}
+              margin="normal"
+              variant="outlined"
+              multiline
+              rows={6}
+            />
+          </Box>
+
           <Box sx={{ width: '100%', mb: 1 }}>
             <Typography variant="h6" gutterBottom>
               データベース設定(チャット履歴やソース情報の保存先)
@@ -285,6 +318,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
               fullWidth
               label="データベースパス"
               value={settings.database.dir}
+              disabled={loading || saving}
               onChange={(e) => handleChange('database', 'dir', e.target.value)}
               error={!!validationErrors.database?.dir}
               helperText={validationErrors.database?.dir?.message}
diff --git a/src/renderer/components/sidebar/SidebarHeader.tsx b/src/renderer/components/sidebar/SidebarHeader.tsx
index 289e28c01..4387f3048 100644
--- a/src/renderer/components/sidebar/SidebarHeader.tsx
+++ b/src/renderer/components/sidebar/SidebarHeader.tsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import { Box, Typography, Button } from '@mui/material';
+import { Box, Button } from '@mui/material';
 import { Add as AddIcon } from '@mui/icons-material';
 
 interface SidebarHeaderProps {
@@ -9,22 +9,15 @@ interface SidebarHeaderProps {
 function SidebarHeader({ onCreateRoom }: SidebarHeaderProps) {
   return (
     <>
-      {/* ヘッダー */}
-      <Box sx={{ p: 2 }}>
-        <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
-          MyPedia
-        </Typography>
-      </Box>
-
       {/* 新規チャットボタン */}
-      <Box sx={{ px: 2, mb: 2 }}>
+      <Box sx={{ p: 2, display: 'flex', justifyContent: 'start' }}>
         <Button
           variant="contained"
           startIcon={<AddIcon />}
           onClick={onCreateRoom}
-          fullWidth
+          // fullWidth
         >
-          新規チャット
+          New Chat
         </Button>
       </Box>
     </>
diff --git a/src/renderer/hooks/useSettingsStore.ts b/src/renderer/hooks/useSettingsStore.ts
index a3f80f465..b5a7a4532 100644
--- a/src/renderer/hooks/useSettingsStore.ts
+++ b/src/renderer/hooks/useSettingsStore.ts
@@ -1,4 +1,4 @@
-import { useState, useCallback, useEffect } from 'react';
+import { useState, useCallback, useEffect, useMemo } from 'react';
 import { z } from 'zod';
 import type { StoreSchema as Settings } from '../../main/store';
 import {
@@ -56,6 +56,12 @@ const useSettingsStore = () => {
     setValue: setStagehandStore,
   } = useElectronStore<Settings['stagehand']>('stagehand');
 
+  const {
+    value: systemPromptStore,
+    loading: loadingSystemPrompt,
+    setValue: setSystemPromptStore,
+  } = useElectronStore<Settings['systemPrompt']>('systemPrompt');
+
   // ローディング状態の管理
   const loading =
     loadingDatabase ||
@@ -64,7 +70,8 @@ const useSettingsStore = () => {
     loadingRedmine ||
     loadingGitlab ||
     loadingMcp ||
-    loadingStagehand;
+    loadingStagehand ||
+    loadingSystemPrompt;
 
   // 設定値の状態管理
   const [settings, setSettings] = useState<Settings>({
@@ -75,6 +82,19 @@ const useSettingsStore = () => {
     gitlab: { endpoint: '', apiKey: '' },
     mcp: { serverConfigText: '{}' },
     stagehand: { enabled: false, headless: false },
+    systemPrompt: { content: '' },
+  });
+
+  // 変更前の設定値を保持するstate
+  const [originalSettings, setOriginalSettings] = useState<Settings>({
+    database: { dir: '' },
+    source: { registerDir: './source' },
+    api: { key: '', url: '', model: '' },
+    redmine: { endpoint: '', apiKey: '' },
+    gitlab: { endpoint: '', apiKey: '' },
+    mcp: { serverConfigText: '{}' },
+    stagehand: { enabled: false, headless: false },
+    systemPrompt: { content: '' },
   });
 
   // バリデーションエラーの状態管理
@@ -86,6 +106,7 @@ const useSettingsStore = () => {
     gitlab: {},
     mcp: {},
     stagehand: {},
+    systemPrompt: {},
   });
 
   const [saving, setSaving] = useState(false);
@@ -167,9 +188,11 @@ const useSettingsStore = () => {
           },
         },
         stagehand: stagehandStore ?? { enabled: false, headless: false },
+        systemPrompt: systemPromptStore ?? { content: '' },
       };
 
       setSettings(newSettings);
+      setOriginalSettings(newSettings);
 
       // 各セクションのバリデーションを実行
       Object.entries(newSettings).forEach(([section, value]) => {
@@ -184,6 +207,7 @@ const useSettingsStore = () => {
     gitlabStore,
     mcpStore,
     stagehandStore,
+    systemPromptStore,
     loading,
     validateSection,
   ]);
@@ -224,6 +248,37 @@ const useSettingsStore = () => {
     }
   };
 
+  /**
+   * 設定が変更されたかどうかを判定する
+   */
+  const hasSettingsChanged = useMemo(() => {
+    return JSON.stringify(settings) !== JSON.stringify(originalSettings);
+  }, [settings, originalSettings]);
+
+  /**
+   * Mastra初期化に関わる設定が変更されたかをチェック
+   */
+  const requiresReinitialization = useMemo(() => {
+    // 設定が変更されていない場合は初期化不要
+    if (!hasSettingsChanged) {
+      return false;
+    }
+
+    // システムプロンプトとドキュメントディレクトリ以外の変更があるかチェック
+    const hasChanges = Object.entries(settings).some(([key, value]) => {
+      if (key === 'systemPrompt' || key === 'source') {
+        return false;
+      }
+      return (
+        JSON.stringify(value) !==
+        JSON.stringify(originalSettings[key as keyof Settings])
+      );
+    });
+
+    // システムプロンプトまたはドキュメントディレクトリのみの変更の場合はfalse
+    return hasChanges;
+  }, [settings, originalSettings, hasSettingsChanged]);
+
   /**
    * 設定の保存処理
    */
@@ -247,12 +302,18 @@ const useSettingsStore = () => {
         setGitlabStore(settings.gitlab),
         setMcpStore(settings.mcp),
         setStagehandStore(settings.stagehand),
+        setSystemPromptStore(settings.systemPrompt),
       ]);
 
-      // 設定保存後にMastraを再初期化
-      await window.electron.agent.reinitialize();
+      // 必要な場合のみMastraを再初期化
+      if (requiresReinitialization) {
+        await window.electron.agent.reinitialize();
+      }
       setUpdatedFlg(true);
 
+      // 新しい設定を元の設定として保存
+      setOriginalSettings(settings);
+
       return true;
     } catch (err) {
       setError(
