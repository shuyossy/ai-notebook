diff --git a/CLAUDE.md b/CLAUDE.md
index 53c97238b..fcf048593 100644
--- a/CLAUDE.md
+++ b/CLAUDE.md
@@ -176,8 +176,7 @@ ElectronのIPCを使用してフロントエンド・バックエンド間の通
   - また、最終的にMainプロセスの処理を（IPC通信にて）呼び出す場合は、モック化したIPC通信の処理を正しく呼び出せているかアサーションすること
 - テストの説明は日本語で記述すること
   - テストの説明は、何をテストしているのか、どのような条件でテストが行われるのかを明確に記述すること
-- テストの書き方で不明点があれば次のディレクトリ配下のテストコードを参考にすること
-  - src/__tests__/renderer
+- テストについては既存のテストコードを十分に参考にすること
 
 ## 実装上の注意
 - Mastraについては実装する際はまずMCPでドキュメントや実装例を参考にしてから正確な情報やベストプラクティスに基づいてコーディングすること
@@ -215,30 +214,8 @@ ElectronのIPCを使用してフロントエンド・バックエンド間の通
 - 新規に追加した機能については明確な理由がない限り、新規テストを作成すること
   - 前述の通り、古典派的な方針でテストを実装するので、機能が作成完了した段階で新規テストを作成すること
 
-## 依頼中タスク
-- チェックリスト抽出機能のcsv・excelファイルインポート改良
-  - ASIS
-    - ファイルの1列目のチェックリストを全て抽出する
-    - ヘッダ行は認識しない(1行目から全てチェックリストとしてインポートする)
-  - TOBE
-    - チェックリストに加えて、以下もインポート可能にする(チェックリストも含めてすべて任意とする)
-      - レビュー時の追加指示・コメントフォーマット・評定設定
-      - AI APIの設定項目(APIのendpoint, url, model*これらはelectron-storeで保存しているので注意)
-    - 複数項目を設定することになるので、ファイルインポート形式を以下のように変更する
-      - ヘッダ行：チェックリスト,評定ラベル,評定説明,追加指示,コメントフォーマット,AI APIエンドポイント,AI APIキー,BPR ID
-      - 特徴
-        - 1行目：ヘッダ行（列の意味を示す）
-        - 2行目以降：データ行
-        - チェックリスト列に値があれば→チェックリスト項目として認識
-        - 評定ラベル＋評定説明の両方に値があれば→評定項目として認識
-        - 追加指示・コメントフォーマット・AI設定列に値があれば→設定値として認識
-        - 空セルは無視
-    - 新インポート形式については、チェックリスト抽出時のモーダルにて、ファイルインポートを選択した場合に、わかりやすくユーザに伝えられるように説明文を表示すること
-      - 加えて、新インポート形式のフォーマットをダウンロードできるようにすること(フォーマットにはデフォルト値または簡単な例を記載しておく)
-    - 既存のcsvエクスポート機能についても、新import形式で出力できるようにすること
-    
-
-## 依頼中タスクの注意点
-- 既存のファイルインポート処理はmain側`reviewService#extractChecklistFromCsv`で処理しているので注意すること
-- 後方互換性は意識する必要はないです
-- 関連するコンポーネントやコードを十分に分析してから、計画策定・実装をすること
+## 依頼タスク
+- 大量ドキュメントレビューのworkflowテストの改良
+  - 関連コード
+    - `src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/index.ts`  
+  - 「分割リトライ最大回数超過時にエラーになること」のテストにて、リトライ回数が5回を超えた場合、エラーメッセージが「ドキュメント分割を複数回実行しましたが、コンテキスト長エラーが解消されませんでした」となることを確認する
diff --git a/package-lock.json b/package-lock.json
index 4155d53cb..a7d1cfd7c 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -79,7 +79,7 @@
         "@types/webpack-bundle-analyzer": "^4.7.0",
         "@typescript-eslint/eslint-plugin": "^8.40.0",
         "@typescript-eslint/parser": "^8.40.0",
-        "babel-jest": "^30.2.0",
+        "babel-jest": "^29.7.0",
         "browserslist-config-erb": "^0.0.3",
         "chalk": "^4.1.2",
         "concurrently": "^9.1.2",
@@ -4887,30 +4887,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/@jest/pattern": {
-      "version": "30.0.1",
-      "resolved": "https://registry.npmjs.org/@jest/pattern/-/pattern-30.0.1.tgz",
-      "integrity": "sha512-gWp7NfQW27LaBQz3TITS8L7ZCQ0TLvtmI//4OwlQRx4rnWxcPNIYjxZpDcN4+UlGxgm3jS5QPz8IPTCkb59wZA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*",
-        "jest-regex-util": "30.0.1"
-      },
-      "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
-      }
-    },
-    "node_modules/@jest/pattern/node_modules/jest-regex-util": {
-      "version": "30.0.1",
-      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-30.0.1.tgz",
-      "integrity": "sha512-jHEQgBXAgc+Gh4g0p3bCevgRCVRkB4VB70zhoAE48gxeSr1hfUOsM/C2WoJgVL7Eyg//hudYENbm3Ne+/dRVVA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
-      }
-    },
     "node_modules/@jest/reporters": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz",
@@ -12726,253 +12702,25 @@
       }
     },
     "node_modules/babel-jest": {
-      "version": "30.2.0",
-      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-30.2.0.tgz",
-      "integrity": "sha512-0YiBEOxWqKkSQWL9nNGGEgndoeL0ZpWrbLMNL5u/Kaxrli3Eaxlt3ZtIDktEvXt4L/R9r3ODr2zKwGM/2BjxVw==",
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.7.0.tgz",
+      "integrity": "sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@jest/transform": "30.2.0",
-        "@types/babel__core": "^7.20.5",
-        "babel-plugin-istanbul": "^7.0.1",
-        "babel-preset-jest": "30.2.0",
-        "chalk": "^4.1.2",
-        "graceful-fs": "^4.2.11",
+        "@jest/transform": "^29.7.0",
+        "@types/babel__core": "^7.1.14",
+        "babel-plugin-istanbul": "^6.1.1",
+        "babel-preset-jest": "^29.6.3",
+        "chalk": "^4.0.0",
+        "graceful-fs": "^4.2.9",
         "slash": "^3.0.0"
       },
       "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       },
       "peerDependencies": {
-        "@babel/core": "^7.11.0 || ^8.0.0-0"
-      }
-    },
-    "node_modules/babel-jest/node_modules/@jest/schemas": {
-      "version": "30.0.5",
-      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-30.0.5.tgz",
-      "integrity": "sha512-DmdYgtezMkh3cpU8/1uyXakv3tJRcmcXxBOcO0tbaozPwpmh4YMsnWrQm9ZmZMfa5ocbxzbFk6O4bDPEc/iAnA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@sinclair/typebox": "^0.34.0"
-      },
-      "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
-      }
-    },
-    "node_modules/babel-jest/node_modules/@jest/transform": {
-      "version": "30.2.0",
-      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-30.2.0.tgz",
-      "integrity": "sha512-XsauDV82o5qXbhalKxD7p4TZYYdwcaEXC77PPD2HixEFF+6YGppjrAAQurTl2ECWcEomHBMMNS9AH3kcCFx8jA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/core": "^7.27.4",
-        "@jest/types": "30.2.0",
-        "@jridgewell/trace-mapping": "^0.3.25",
-        "babel-plugin-istanbul": "^7.0.1",
-        "chalk": "^4.1.2",
-        "convert-source-map": "^2.0.0",
-        "fast-json-stable-stringify": "^2.1.0",
-        "graceful-fs": "^4.2.11",
-        "jest-haste-map": "30.2.0",
-        "jest-regex-util": "30.0.1",
-        "jest-util": "30.2.0",
-        "micromatch": "^4.0.8",
-        "pirates": "^4.0.7",
-        "slash": "^3.0.0",
-        "write-file-atomic": "^5.0.1"
-      },
-      "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
-      }
-    },
-    "node_modules/babel-jest/node_modules/@jest/types": {
-      "version": "30.2.0",
-      "resolved": "https://registry.npmjs.org/@jest/types/-/types-30.2.0.tgz",
-      "integrity": "sha512-H9xg1/sfVvyfU7o3zMfBEjQ1gcsdeTMgqHoYdN79tuLqfTtuu7WckRA1R5whDwOzxaZAeMKTYWqP+WCAi0CHsg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/pattern": "30.0.1",
-        "@jest/schemas": "30.0.5",
-        "@types/istanbul-lib-coverage": "^2.0.6",
-        "@types/istanbul-reports": "^3.0.4",
-        "@types/node": "*",
-        "@types/yargs": "^17.0.33",
-        "chalk": "^4.1.2"
-      },
-      "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
-      }
-    },
-    "node_modules/babel-jest/node_modules/@sinclair/typebox": {
-      "version": "0.34.41",
-      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.34.41.tgz",
-      "integrity": "sha512-6gS8pZzSXdyRHTIqoqSVknxolr1kzfy4/CeDnrzsVz8TTIWUbOBr6gnzOmTYJ3eXQNh4IYHIGi5aIL7sOZ2G/g==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/babel-jest/node_modules/babel-plugin-istanbul": {
-      "version": "7.0.1",
-      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-7.0.1.tgz",
-      "integrity": "sha512-D8Z6Qm8jCvVXtIRkBnqNHX0zJ37rQcFJ9u8WOS6tkYOsRdHBzypCstaxWiu5ZIlqQtviRYbgnRLSoCEvjqcqbA==",
-      "dev": true,
-      "license": "BSD-3-Clause",
-      "workspaces": [
-        "test/babel-8"
-      ],
-      "dependencies": {
-        "@babel/helper-plugin-utils": "^7.0.0",
-        "@istanbuljs/load-nyc-config": "^1.0.0",
-        "@istanbuljs/schema": "^0.1.3",
-        "istanbul-lib-instrument": "^6.0.2",
-        "test-exclude": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/babel-jest/node_modules/ci-info": {
-      "version": "4.3.1",
-      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-4.3.1.tgz",
-      "integrity": "sha512-Wdy2Igu8OcBpI2pZePZ5oWjPC38tmDVx5WKUXKwlLYkA0ozo85sLsLvkBbBn/sZaSCMFOGZJ14fvW9t5/d7kdA==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/sibiraj-s"
-        }
-      ],
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/babel-jest/node_modules/jest-haste-map": {
-      "version": "30.2.0",
-      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-30.2.0.tgz",
-      "integrity": "sha512-sQA/jCb9kNt+neM0anSj6eZhLZUIhQgwDt7cPGjumgLM4rXsfb9kpnlacmvZz3Q5tb80nS+oG/if+NBKrHC+Xw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/types": "30.2.0",
-        "@types/node": "*",
-        "anymatch": "^3.1.3",
-        "fb-watchman": "^2.0.2",
-        "graceful-fs": "^4.2.11",
-        "jest-regex-util": "30.0.1",
-        "jest-util": "30.2.0",
-        "jest-worker": "30.2.0",
-        "micromatch": "^4.0.8",
-        "walker": "^1.0.8"
-      },
-      "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
-      },
-      "optionalDependencies": {
-        "fsevents": "^2.3.3"
-      }
-    },
-    "node_modules/babel-jest/node_modules/jest-regex-util": {
-      "version": "30.0.1",
-      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-30.0.1.tgz",
-      "integrity": "sha512-jHEQgBXAgc+Gh4g0p3bCevgRCVRkB4VB70zhoAE48gxeSr1hfUOsM/C2WoJgVL7Eyg//hudYENbm3Ne+/dRVVA==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
-      }
-    },
-    "node_modules/babel-jest/node_modules/jest-util": {
-      "version": "30.2.0",
-      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-30.2.0.tgz",
-      "integrity": "sha512-QKNsM0o3Xe6ISQU869e+DhG+4CK/48aHYdJZGlFQVTjnbvgpcKyxpzk29fGiO7i/J8VENZ+d2iGnSsvmuHywlA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/types": "30.2.0",
-        "@types/node": "*",
-        "chalk": "^4.1.2",
-        "ci-info": "^4.2.0",
-        "graceful-fs": "^4.2.11",
-        "picomatch": "^4.0.2"
-      },
-      "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
-      }
-    },
-    "node_modules/babel-jest/node_modules/jest-worker": {
-      "version": "30.2.0",
-      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-30.2.0.tgz",
-      "integrity": "sha512-0Q4Uk8WF7BUwqXHuAjc23vmopWJw5WH7w2tqBoUOZpOjW/ZnR44GXXd1r82RvnmI2GZge3ivrYXk/BE2+VtW2g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*",
-        "@ungap/structured-clone": "^1.3.0",
-        "jest-util": "30.2.0",
-        "merge-stream": "^2.0.0",
-        "supports-color": "^8.1.1"
-      },
-      "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
-      }
-    },
-    "node_modules/babel-jest/node_modules/picomatch": {
-      "version": "4.0.3",
-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
-      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/jonschlinkert"
-      }
-    },
-    "node_modules/babel-jest/node_modules/signal-exit": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
-      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
-      "dev": true,
-      "license": "ISC",
-      "engines": {
-        "node": ">=14"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/babel-jest/node_modules/supports-color": {
-      "version": "8.1.1",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
-      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "has-flag": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/supports-color?sponsor=1"
-      }
-    },
-    "node_modules/babel-jest/node_modules/write-file-atomic": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-5.0.1.tgz",
-      "integrity": "sha512-+QU2zd6OTD8XWIJCbffaiQeH9U73qIqafo1x6V1snCWYGJf6cVE0cDR4D8xRzcEnfI21IFrUPzPGtcPf8AC+Rw==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "imurmurhash": "^0.1.4",
-        "signal-exit": "^4.0.1"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+        "@babel/core": "^7.8.0"
       }
     },
     "node_modules/babel-plugin-istanbul": {
@@ -13020,16 +12768,19 @@
       }
     },
     "node_modules/babel-plugin-jest-hoist": {
-      "version": "30.2.0",
-      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-30.2.0.tgz",
-      "integrity": "sha512-ftzhzSGMUnOzcCXd6WHdBGMyuwy15Wnn0iyyWGKgBDLxf9/s5ABuraCSpBX2uG0jUg4rqJnxsLc5+oYBqoxVaA==",
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz",
+      "integrity": "sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "@types/babel__core": "^7.20.5"
+        "@babel/template": "^7.3.3",
+        "@babel/types": "^7.3.3",
+        "@types/babel__core": "^7.1.14",
+        "@types/babel__traverse": "^7.0.6"
       },
       "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
     "node_modules/babel-plugin-macros": {
@@ -13143,20 +12894,20 @@
       }
     },
     "node_modules/babel-preset-jest": {
-      "version": "30.2.0",
-      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-30.2.0.tgz",
-      "integrity": "sha512-US4Z3NOieAQumwFnYdUWKvUKh8+YSnS/gB3t6YBiz0bskpu7Pine8pPCheNxlPEW4wnUkma2a94YuW2q3guvCQ==",
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.6.3.tgz",
+      "integrity": "sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "babel-plugin-jest-hoist": "30.2.0",
-        "babel-preset-current-node-syntax": "^1.2.0"
+        "babel-plugin-jest-hoist": "^29.6.3",
+        "babel-preset-current-node-syntax": "^1.0.0"
       },
       "engines": {
-        "node": "^18.14.0 || ^20.0.0 || ^22.0.0 || >=24.0.0"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       },
       "peerDependencies": {
-        "@babel/core": "^7.11.0 || ^8.0.0-beta.1"
+        "@babel/core": "^7.0.0"
       }
     },
     "node_modules/bail": {
@@ -22529,61 +22280,6 @@
         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
       }
     },
-    "node_modules/jest-config/node_modules/babel-jest": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.7.0.tgz",
-      "integrity": "sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/transform": "^29.7.0",
-        "@types/babel__core": "^7.1.14",
-        "babel-plugin-istanbul": "^6.1.1",
-        "babel-preset-jest": "^29.6.3",
-        "chalk": "^4.0.0",
-        "graceful-fs": "^4.2.9",
-        "slash": "^3.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.8.0"
-      }
-    },
-    "node_modules/jest-config/node_modules/babel-plugin-jest-hoist": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz",
-      "integrity": "sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@babel/template": "^7.3.3",
-        "@babel/types": "^7.3.3",
-        "@types/babel__core": "^7.1.14",
-        "@types/babel__traverse": "^7.0.6"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-config/node_modules/babel-preset-jest": {
-      "version": "29.6.3",
-      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.6.3.tgz",
-      "integrity": "sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "babel-plugin-jest-hoist": "^29.6.3",
-        "babel-preset-current-node-syntax": "^1.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.0.0"
-      }
-    },
     "node_modules/jest-config/node_modules/pretty-format": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
diff --git a/package.json b/package.json
index d3e08514f..127f6620c 100644
--- a/package.json
+++ b/package.json
@@ -182,7 +182,7 @@
     "@types/webpack-bundle-analyzer": "^4.7.0",
     "@typescript-eslint/eslint-plugin": "^8.40.0",
     "@typescript-eslint/parser": "^8.40.0",
-    "babel-jest": "^30.2.0",
+    "babel-jest": "^29.7.0",
     "browserslist-config-erb": "^0.0.3",
     "chalk": "^4.1.2",
     "concurrently": "^9.1.2",
diff --git a/src/__tests__/main/workflows/executeReview.test.ts b/src/__tests__/main/workflows/executeReview.test.ts
index dffaacc07..d12bffd55 100644
--- a/src/__tests__/main/workflows/executeReview.test.ts
+++ b/src/__tests__/main/workflows/executeReview.test.ts
@@ -2013,10 +2013,14 @@ describe('executeReviewWorkflow', () => {
         // Assert
         const checkResult = checkWorkflowResult(result);
         expect(checkResult.status).toBe('failed');
-        // リトライ最大回数に達した場合、いずれかのエラーメッセージが返される
-        // 「コンテキスト長エラーが解消されませんでした」または個別レビューステップのエラー
-        expect(checkResult.errorMessage).toBeTruthy();
-        expect(mockIndividualDocumentReviewAgent.generateLegacy).toHaveBeenCalled();
+        // リトライ最大回数（5回）を超えた場合、特定のエラーメッセージが返される
+        expect(checkResult.errorMessage).toBe(
+          'ドキュメント分割を複数回実行しましたが、コンテキスト長エラーが解消されませんでした'
+        );
+        // リトライのたびにドキュメントが分割され、foreachで個別レビューが実行される
+        // retryCount 0: 1個 (1回), 1: 2個 (2回), 2: 3個 (3回), 3: 4個 (4回), 4: 5個 (5回), 5: 6個 (6回)
+        // 合計: 1+2+3+4+5+6 = 21回
+        expect(mockIndividualDocumentReviewAgent.generateLegacy).toHaveBeenCalledTimes(21);
       });
 
       it('個別レビュー未完了チェックリスト最大試行回数超過時にエラーになること', async () => {
diff --git a/src/__tests__/main/workflows/reviewChat.test.ts b/src/__tests__/main/workflows/reviewChat.test.ts
index fbcd37d39..b920db219 100644
--- a/src/__tests__/main/workflows/reviewChat.test.ts
+++ b/src/__tests__/main/workflows/reviewChat.test.ts
@@ -1813,6 +1813,44 @@ describe('reviewChatWorkflow', () => {
         expect(mockReviewChatAnswerAgent.generateLegacy).not.toHaveBeenCalled();
       });
 
+      it('調査計画作成時にAIが空の調査タスクを返した場合にworkflowがfailedになること', async () => {
+        // Arrange
+        const reviewHistoryId = 'review-1';
+        const checklistIds = [1];
+        const question = '質問';
+
+        // AIエージェントが空のtasks配列を返すようモック設定
+        mockReviewChatPlanningAgent.generateLegacy.mockResolvedValue({
+          object: {
+            tasks: [], // 空配列
+          },
+          finishReason: 'stop',
+        });
+
+        // Act
+        const runtimeContext = new RuntimeContext();
+        runtimeContext.set('dataStreamWriter', mockDataStreamWriter);
+        runtimeContext.set('toolCallId', 'test-tool-call-id');
+
+        const run = await reviewChatWorkflow.createRunAsync();
+        const result = await run.start({
+          inputData: {
+            reviewHistoryId,
+            checklistIds,
+            question,
+          },
+          runtimeContext,
+        });
+
+        // Assert
+        const checkResult = checkWorkflowResult(result);
+        expect(checkResult.status).toBe('failed');
+        expect(checkResult.errorMessage).toContain('AIから予期せぬ応答が返されました');
+        // 後続のステップが呼ばれていないことを確認
+        expect(mockReviewChatResearchAgent.generateLegacy).not.toHaveBeenCalled();
+        expect(mockReviewChatAnswerAgent.generateLegacy).not.toHaveBeenCalled();
+      });
+
       it('ドキュメント調査失敗時にworkflowがfailedになること', async () => {
         // Arrange
         const reviewHistoryId = 'review-1';
@@ -1917,6 +1955,95 @@ describe('reviewChatWorkflow', () => {
     });
 
     describe('チャンク分割関連', () => {
+      it('コンテキスト長エラーがなく、失敗が一つでもある場合は失敗として返されること', async () => {
+        // Arrange
+        const reviewHistoryId = 'review-1';
+        const checklistIds = [1];
+        const question = '長いドキュメントの質問';
+
+        mockRepository.getReviewDocumentCacheById.mockResolvedValue({
+          id: 1,
+          reviewHistoryId: 'review-1',
+          fileName: 'long-document.txt',
+          processMode: 'text',
+          textContent: 'A'.repeat(20000),
+          imageData: undefined,
+          createdAt: '2024-01-01',
+          updatedAt: '2024-01-01',
+        });
+
+        mockReviewChatPlanningAgent.generateLegacy.mockResolvedValue({
+          object: {
+            tasks: [
+              {
+                reasoning: '長いドキュメントを調査',
+                documentId: '1',
+                researchContent: '長いドキュメントの内容を調査',
+              },
+            ],
+          },
+          finishReason: 'stop',
+        });
+
+        // 1回目: コンテキスト長エラー（チャンク分割トリガー）
+        // 2回目以降（2チャンクに分割）: 1つ目は成功、2つ目は一般エラー
+        let callCount = 0;
+        mockReviewChatResearchAgent.generateLegacy.mockImplementation(
+          async () => {
+            callCount++;
+            if (callCount === 1) {
+              // 初回はコンテキスト長エラー
+              throw new APICallError({
+                message: 'Context length exceeded',
+                url: 'http://test-api',
+                requestBodyValues: {},
+                statusCode: 400,
+                responseBody: JSON.stringify({
+                  error: 'maximum context length exceeded',
+                }),
+                cause: new Error('maximum context length exceeded'),
+                isRetryable: false,
+              });
+            } else if (callCount === 2) {
+              // 2チャンク目の1つ目は成功
+              return {
+                text: 'チャンク1の調査結果',
+                finishReason: 'stop',
+              };
+            } else {
+              // 2チャンク目の2つ目は一般エラー
+              throw internalError({
+                expose: true,
+                messageCode: 'PLAIN_MESSAGE',
+                messageParams: { message: 'チャンク調査中にエラーが発生' },
+              });
+            }
+          },
+        );
+
+        // Act
+        const runtimeContext = new RuntimeContext();
+        runtimeContext.set('dataStreamWriter', mockDataStreamWriter);
+        runtimeContext.set('toolCallId', 'test-tool-call-id');
+
+        const run = await reviewChatWorkflow.createRunAsync();
+        const result = await run.start({
+          inputData: {
+            reviewHistoryId,
+            checklistIds,
+            question,
+          },
+          runtimeContext,
+        });
+
+        // Assert
+        const checkResult = checkWorkflowResult(result);
+        expect(checkResult.status).toBe('failed');
+        expect(checkResult.errorMessage).toContain('チャンク調査中にエラーが発生');
+        // 回答生成は呼ばれない
+        expect(mockReviewChatAnswerAgent.generateLegacy).not.toHaveBeenCalled();
+      });
+
       it('チャンク分割最大リトライ超過時にエラーになること', async () => {
         // Arrange
         const reviewHistoryId = 'review-1';
@@ -1985,6 +2112,83 @@ describe('reviewChatWorkflow', () => {
         // 最大リトライ超過時は汎用エラーメッセージになる
         expect(checkResult.errorMessage).toBeTruthy();
       });
+
+      it('リトライ回数が5回を超えた場合、エラーとして処理が終了すること', async () => {
+        // Arrange
+        const reviewHistoryId = 'review-1';
+        const checklistIds = [1];
+        const question = '非常に長いドキュメントの質問';
+
+        mockRepository.getReviewDocumentCacheById.mockResolvedValue({
+          id: 1,
+          reviewHistoryId: 'review-1',
+          fileName: 'extremely-long-document.txt',
+          processMode: 'text',
+          textContent: 'A'.repeat(100000),
+          imageData: undefined,
+          createdAt: '2024-01-01',
+          updatedAt: '2024-01-01',
+        });
+
+        mockReviewChatPlanningAgent.generateLegacy.mockResolvedValue({
+          object: {
+            tasks: [
+              {
+                reasoning: '非常に長いドキュメントを調査',
+                documentId: '1',
+                researchContent: '非常に長いドキュメントの内容を調査',
+              },
+            ],
+          },
+          finishReason: 'stop',
+        });
+
+        // 常にコンテキスト長エラーをthrow（リトライを5回発生させる）
+        let callCount = 0;
+        mockReviewChatResearchAgent.generateLegacy.mockImplementation(
+          async () => {
+            callCount++;
+            throw new APICallError({
+              message: 'Context length exceeded',
+              url: 'http://test-api',
+              requestBodyValues: {},
+              statusCode: 400,
+              responseBody: JSON.stringify({
+                error: 'maximum context length exceeded',
+              }),
+              cause: new Error('maximum context length exceeded'),
+              isRetryable: false,
+            });
+          },
+        );
+
+        // Act
+        const runtimeContext = new RuntimeContext();
+        runtimeContext.set('dataStreamWriter', mockDataStreamWriter);
+        runtimeContext.set('toolCallId', 'test-tool-call-id');
+
+        const run = await reviewChatWorkflow.createRunAsync();
+        const result = await run.start({
+          inputData: {
+            reviewHistoryId,
+            checklistIds,
+            question,
+          },
+          runtimeContext,
+        });
+
+        // Assert
+        const checkResult = checkWorkflowResult(result);
+        expect(checkResult.status).toBe('failed');
+        // リトライが5回を超えた場合は処理が失敗する
+        // 特定のエラーメッセージが返されることを確認
+        expect(checkResult.errorMessage).toBe(
+          'ドキュメントが長すぎて処理できませんでした。',
+        );
+        // リトライ回数を検証 (初回+リトライ5回で合計6イテレーション)
+        // ※ チャンク数が増えていくため、総呼び出し回数は1+2+4+8+16+32=63回程度になる
+        expect(callCount).toBeGreaterThanOrEqual(21);
+      });
     });
 
     describe('データ取得エラー', () => {
@@ -2342,47 +2546,6 @@ describe('reviewChatWorkflow', () => {
         expect(checkResult.status).toBe('failed');
         expect(checkResult.errorMessage).toContain('最大出力コンテキストを超え');
       });
-
-      it('調査タスクが空の場合でもworkflowが完了すること', async () => {
-        // Arrange
-        const reviewHistoryId = 'review-1';
-        const checklistIds = [1];
-        const question = '調査不要な質問';
-
-        mockReviewChatPlanningAgent.generateLegacy.mockResolvedValue({
-          object: {
-            tasks: [],
-          },
-          finishReason: 'stop',
-        });
-
-        mockReviewChatAnswerAgent.generateLegacy.mockResolvedValue({
-          text: '調査は不要です。',
-          finishReason: 'stop',
-          usage: { promptTokens: 100, completionTokens: 50 },
-        });
-
-        // Act
-        const runtimeContext = new RuntimeContext();
-        runtimeContext.set('dataStreamWriter', mockDataStreamWriter);
-        runtimeContext.set('toolCallId', 'test-tool-call-id');
-
-        const run = await reviewChatWorkflow.createRunAsync();
-        const result = await run.start({
-          inputData: {
-            reviewHistoryId,
-            checklistIds,
-            question,
-          },
-          runtimeContext,
-        });
-
-        // Assert
-        const checkResult = checkWorkflowResult(result);
-        expect(checkResult.status).toBe('success');
-        expect((result as any).result?.answer).toBe('調査は不要です。');
-        expect(mockReviewChatResearchAgent.generateLegacy).not.toHaveBeenCalled();
-      });
     });
 
     describe('複数ドキュメント調査のエラー', () => {
diff --git a/src/__tests__/renderer/Sidebar.test.tsx b/src/__tests__/renderer/Sidebar.test.tsx
index b5fc88fc5..160dc5804 100644
--- a/src/__tests__/renderer/Sidebar.test.tsx
+++ b/src/__tests__/renderer/Sidebar.test.tsx
@@ -988,12 +988,14 @@ describe('Review Sidebar Component', () => {
   test('サーバプッシュによるリアルタイム更新が機能すること', async () => {
     // pushApi.subscribeのモックを設定して、コールバックをキャプチャできるようにする
     let subscribedCallback: ((channel: string) => void) | null = null;
-    window.electron.pushApi.subscribe = jest
-      .fn()
-      .mockImplementation(async (channel: string, callback: (channel: string) => void) => {
-        subscribedCallback = callback;
-        return () => {}; // unsubscribe function
-      });
+    (window.electron.pushApi.subscribe as jest.Mock).mockImplementation(
+      (channel, callback) => {
+        if (channel === 'review-history-updated') {
+          subscribedCallback = callback;
+        }
+        return Promise.resolve(jest.fn()); // unsubscribe関数を返す
+      },
+    );
 
     renderAtReviewPath();
 
@@ -1308,12 +1310,14 @@ describe('Review Sidebar Component', () => {
   test('ポーリング中のレビュー履歴更新でエラーが発生した場合の処理', async () => {
     // pushApi.subscribeのモックを設定
     let subscribedCallback: ((channel: string) => void) | null = null;
-    window.electron.pushApi.subscribe = jest
-      .fn()
-      .mockImplementation(async (channel: string, callback: (channel: string) => void) => {
-        subscribedCallback = callback;
-        return () => {};
-      });
+    (window.electron.pushApi.subscribe as jest.Mock).mockImplementation(
+      (channel, callback) => {
+        if (channel === 'review-history-updated') {
+          subscribedCallback = callback;
+        }
+        return Promise.resolve(jest.fn()); // unsubscribe関数を返す
+      },
+    );
 
     // コンソールエラーをスパイ
     const consoleSpy = jest
diff --git a/src/mastra/workflows/reviewChat/planResearchStep.ts b/src/mastra/workflows/reviewChat/planResearchStep.ts
index 62951f829..21d360076 100644
--- a/src/mastra/workflows/reviewChat/planResearchStep.ts
+++ b/src/mastra/workflows/reviewChat/planResearchStep.ts
@@ -107,6 +107,13 @@ export const planResearchStep = createStep({
         reasoning: task.reasoning,
       }));
 
+      if (researchTasks.length === 0) {
+        throw internalError({
+          expose: true,
+          messageCode: 'AI_INVALID_RESPONSE'
+        });
+      }
+
       return {
         status: 'success' as stepStatus,
         researchTasks,
diff --git a/src/mastra/workflows/reviewChat/researchDocument/index.ts b/src/mastra/workflows/reviewChat/researchDocument/index.ts
index 5c5366304..2739caf7a 100644
--- a/src/mastra/workflows/reviewChat/researchDocument/index.ts
+++ b/src/mastra/workflows/reviewChat/researchDocument/index.ts
@@ -233,7 +233,7 @@ export const researchDocumentWithRetryWorkflow = createWorkflow({
       .commit(),
     async ({ inputData }) => {
       // 再試行上限または成功したら終了
-      if (inputData.retryCount >= 5) {
+      if (inputData.retryCount >= 6) {
         return true;
       }
       if (inputData.finishReason !== 'content_length') {
diff --git a/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/index.ts b/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/index.ts
index 2a7fbbf02..6ae21c12f 100644
--- a/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/index.ts
+++ b/src/mastra/workflows/sourceReview/executeReview/largeDocumentReview/index.ts
@@ -213,7 +213,7 @@ const individualDocumentReviewWorkflow = createWorkflow({
       })
       .commit(),
     async ({ inputData }) => {
-      if (inputData.retryCount >= 4) {
+      if (inputData.retryCount >= 6) {
         return true;
       }
       if (inputData.finishReason !== 'content_length') {
diff --git a/src/messages/ja/template.ts b/src/messages/ja/template.ts
index 93aa2b8ed..a43841672 100644
--- a/src/messages/ja/template.ts
+++ b/src/messages/ja/template.ts
@@ -35,5 +35,6 @@ export const template = {
   REVIEW_HISTORY_NOT_FOUND: `指定されたレビューの情報を取得できませんでした`,
   AI_API_ERROR: `AIのAPIと通信中にエラーが発生しました\n{detail}`,
   AI_MESSAGE_TOO_LARGE: `AIへの入力データが大きすぎます。入力データを減らしてください。`,
+  AI_INVALID_RESPONSE: `AIから予期せぬ応答が返されました`,
   REVIEW_DOCUMENT_CACHE_NOT_FOUND: `レビュー時にアップロードしたドキュメント情報が失われています。レビューを再実行してください`,
 } as const;
diff --git a/src/types/message.ts b/src/types/message.ts
index f6c1eb7f3..2019cde5e 100644
--- a/src/types/message.ts
+++ b/src/types/message.ts
@@ -27,4 +27,5 @@ export type MessageCode =
   | 'REVIEW_HISTORY_NOT_FOUND'
   | 'AI_API_ERROR'
   | 'AI_MESSAGE_TOO_LARGE'
+  | 'AI_INVALID_RESPONSE'
   | 'REVIEW_DOCUMENT_CACHE_NOT_FOUND';
