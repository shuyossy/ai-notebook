diff --git a/src/main/main.ts b/src/main/main.ts
index 5fc7835a5..2f0094a41 100644
--- a/src/main/main.ts
+++ b/src/main/main.ts
@@ -29,6 +29,7 @@ import { getOrchestrator } from '../mastra/agents/orchestrator';
 import MenuBuilder from './menu';
 import { resolveHtmlPath } from './utils/util';
 import { initStore, getStore } from './store';
+import { RedmineBaseInfo } from '../mastra/tools/redmine';
 
 class AppUpdater {
   constructor() {
@@ -49,6 +50,8 @@ const mastraStatus: AgentBootStatus = {
     mcp: false,
   },
 };
+// Redmineの基本情報を保持する変数
+let redmineBaseInfo: RedmineBaseInfo | null = null;
 
 /**
  * Mastraの状態を変更し、レンダラーに通知する
@@ -117,7 +120,11 @@ const initializeMastra = async (): Promise<void> => {
     });
 
     // オーケストレーターエージェントを取得
-    const { agent, alertMessages, toolStatus } = await getOrchestrator();
+    const { agent, alertMessages, toolStatus, redmineInfo } =
+      await getOrchestrator();
+
+    // Redmineの基本情報を保存
+    redmineBaseInfo = redmineInfo;
 
     // 起動メッセージを更新
     alertMessages.forEach((message) => {
@@ -288,6 +295,7 @@ const setupChatHandlers = () => {
                   gitlab: false,
                   mcp: false,
                 },
+                redmineBaseInfo,
               ),
               threadId: roomId, // チャットルームIDをスレッドIDとして使用
               maxSteps: 30, // ツールの利用上限
diff --git a/src/mastra/agents/orchestrator.ts b/src/mastra/agents/orchestrator.ts
index 6525fea58..6ffab93db 100644
--- a/src/mastra/agents/orchestrator.ts
+++ b/src/mastra/agents/orchestrator.ts
@@ -5,7 +5,11 @@ import { writeFileSync } from 'fs';
 import { querySourceTool } from '../tools/sourcesTools';
 import { createAgent } from './config/agent';
 import { getStore } from '../../main/store';
-import { setupRedmineTools } from '../tools/redmine';
+import {
+  setupRedmineTools,
+  createRedmineClient,
+  RedmineBaseInfo,
+} from '../tools/redmine';
 import { setupGitLabTools } from '../tools/gitlab';
 import { McpSchema } from '../../main/types/schema';
 import { AgentBootMessage } from '../../main/types';
@@ -59,27 +63,34 @@ export const getOrchestrator = async (): Promise<{
     gitlab: boolean;
     mcp: boolean;
   };
+  redmineInfo: RedmineBaseInfo | null;
 }> => {
   const alertMessages: AgentBootMessage[] = [];
   let agent: Agent | null = null;
   let redmineTools = {};
   let gitlabTools = {};
   let mcpTools = {};
+  let redmineInfo: RedmineBaseInfo | null = null;
 
   try {
     const store = getStore();
 
-    // Redinmeツールの登録
+    // Redmineツールの登録
     // APIキーとエンドポイントが登録されていた場合は登録する
     const redmineApiKey = store.get('redmine').apiKey;
     const redmineEndpoint = store.get('redmine').endpoint;
     if (redmineApiKey && redmineEndpoint) {
       try {
-        // Redmineクライアントの初期化
-        redmineTools = await setupRedmineTools({
+        // Redmineクライアントを作成
+        const client = createRedmineClient({
           apiKey: redmineApiKey,
           apiUrl: redmineEndpoint,
         });
+
+        // 基本情報の取得
+        redmineInfo = await client.getBaseInfo();
+        // 作成したクライアントを使ってツールを初期化
+        redmineTools = await setupRedmineTools(client);
         alertMessages.push({
           id: uuid(),
           type: 'info',
@@ -91,6 +102,7 @@ export const getOrchestrator = async (): Promise<{
           type: 'warning',
           content: `Redmineクライアントの初期化に失敗しました\n設定を確認してください\n${error}`,
         });
+        redmineInfo = null;
       }
     } else {
       console.warn(
@@ -247,6 +259,7 @@ export const getOrchestrator = async (): Promise<{
       gitlab: !!gitlabTools && Object.keys(gitlabTools).length > 0,
       mcp: !!mcpTools && Object.keys(mcpTools).length > 0,
     },
+    redmineInfo,
   };
 };
 
diff --git a/src/mastra/agents/prompts.ts b/src/mastra/agents/prompts.ts
index 50701d02e..3b529b4e0 100644
--- a/src/mastra/agents/prompts.ts
+++ b/src/mastra/agents/prompts.ts
@@ -2,6 +2,7 @@ import { eq, and } from 'drizzle-orm';
 import { getStore } from '../../main/store';
 import { sources, topics } from '../../db/schema';
 import getDb from '../../db';
+import { RedmineBaseInfo } from '../tools/redmine';
 
 /**
  * データベースからソース情報を取得する
@@ -93,11 +94,14 @@ export const EXTRACT_TOPIC_AND_SUMMARY_SYSTEM_PROMPT = `
  * @param config ツールの有効/無効を指定する設定オブジェクト
  * @returns システムプロンプト文字列
  */
-export const getOrchestratorSystemPrompt = async (config: {
-  redmine: boolean;
-  gitlab: boolean;
-  mcp: boolean;
-}): Promise<string> => {
+export const getOrchestratorSystemPrompt = async (
+  config: {
+    redmine: boolean;
+    gitlab: boolean;
+    mcp: boolean;
+  },
+  redmineInfo: RedmineBaseInfo | null,
+): Promise<string> => {
   const store = getStore();
 
   const sourceListMD = await getSourcesInfoByMDList();
@@ -136,7 +140,8 @@ ${
   - getRedmineIssuesList：Redmineのプロジェクトのチケット一覧を取得します。ステータス、トラッカー、担当者、バージョンで絞り込み可能です。
   - getRedmineIssueDetail：Redmineの特定のチケット詳細を取得します。
   - createRedmineIssue：Redmineに新しいチケットを作成します。
-  - updateRedmineIssue：Redmineの既存チケットを更新します。`
+  - updateRedmineIssue：Redmineの既存チケットを更新します。
+`
     : ''
 }
 ${
@@ -162,6 +167,12 @@ ${
 ※ツール利用時の注意事項
 - 共通
   - ツールは何度でも任意のタイミングで利用可能
+- ソース情報検索ツール
+  - 質問の内容によっては同一のソースに対して複数回sourceQueryToolを利用して情報を収集すること
+  - 質問の内容によっては複数のソースに対してsourceQueryToolを利用して、十分な情報を収集すること
+  - 登録されているソースの一覧とその要約、トピックは以下の通り
+  ※以下の内容はあくまでソース情報を要約したものである。ソース情報（の詳細）を正確に把握するためには、sourceQueryToolを利用してソース情報を取得すること
+${sourceListMD}
 ${
   config.redmine
     ? `- redmine操作ツール
@@ -171,23 +182,24 @@ ${
   - トラッカーの利用方針は以下の通り（あくまで方針であり、ユーザから明確にトラッカーの種類など提示された場合はそちらに従うこと）
     - 中日程：プロジェクト全体のフェーズ分けなどで利用する
     - 作業計画：プロジェクトの各フェーズ内で実施する作業の計画を立てるために利用する
-    - 生産計画・タスク：プロジェクトの各フェーズ内の各作業毎に実施するタスクを管理するために利用する。生産計画は他者によるチェック（再鑑）が必要な場合に利用する。タスクは他者によるチェック（再鑑）が不要な場合に利用する。生産計画・タスクチケットの子チケットとして生産計画・タスクを持つ（ネストさせる）ことが可能。`
+    - 生産計画・タスク：プロジェクトの各フェーズ内の各作業毎に実施するタスクを管理するために利用する。生産計画は他者によるチェック（再鑑）が必要な場合に利用する。タスクは他者によるチェック（再鑑）が不要な場合に利用する。生産計画・タスクチケットの子チケットとして生産計画・タスクを持つ（ネストさせる）ことが可能。
+  - Redmineの基本情報は次の通り：
+    - トラッカー一覧：
+${redmineInfo?.trackers.map(t => `      - ${t.name} (ID: ${t.id})`).join('\n')}
+    - ステータス一覧：
+${redmineInfo?.statuses.map(s => `      - ${s.name} (ID: ${s.id})`).join('\n')}
+    - 優先度一覧：
+${redmineInfo?.priorities.map(p => `      - ${p.name} (ID: ${p.id})`).join('\n')}`
     : ''
 }
 ${
   config.gitlab
     ? `- GitLab操作ツール
   - GitLabのURLはこちら：${store.get('gitlab').endpoint}
-  - プロジェクト(リポジトリ)を指定する際はプロジェクトIDまたはURLエンコードされたパスが必要になるが、URLエンコードされたパスは以下のように取得できる
-    - 例えば、プロジェクト(リポジトリ)のURLが${store.get('gitlab').endpoint}/groupA/groupB/projectの場合、URLエンコードされたパスはgroupA%2FgroupB%2Fprojectとなる(/ は%2F で表されます)`
+  - プロジェクト(リポジトリ)を指定する際はプロジェクトIDまたはプロジェクトの非エンコードパスが必要です
+    - 例えば、プロジェクト(リポジトリ)のURLが${store.get('gitlab').endpoint}/groupA/groupB/projectの場合、プロジェクトの非エンコードパスはgroupA/groupB/projectとなります`
     : ''
 }
-- ソース情報検索ツール
-  - 質問の内容によっては同一のソースに対して複数回sourceQueryToolを利用して情報を収集すること
-  - 質問の内容によっては複数のソースに対してsourceQueryToolを利用して、十分な情報を収集すること
-  - 登録されているソースの一覧とその要約、トピックは以下の通り
-  ※以下の内容はあくまでソース情報を要約したものである。ソース情報（の詳細）を正確に把握するためには、sourceQueryToolを利用してソース情報を取得すること
-${sourceListMD}
 `;
   return prompt;
 };
diff --git a/src/mastra/tools/gitlab/mergeRequestTools.ts b/src/mastra/tools/gitlab/mergeRequestTools.ts
index 3f7344ade..9f5cd23cd 100644
--- a/src/mastra/tools/gitlab/mergeRequestTools.ts
+++ b/src/mastra/tools/gitlab/mergeRequestTools.ts
@@ -21,7 +21,7 @@ export const createGetMergeRequestDetailTool = (client: GitLabClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe('プロジェクトIDまたはURLエンコードされたパス:必須'),
+        .describe('プロジェクトIDまたはプロジェクトの非エンコードパス:必須'),
       merge_request_iid: z
         .number()
         .describe('マージリクエストのIID（プロジェクト内ID）:必須'),
@@ -75,7 +75,7 @@ export const createAddMergeRequestCommentTool = (client: GitLabClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe('プロジェクトIDまたはURLエンコードされたパス:必須'),
+        .describe('プロジェクトIDまたはプロジェクトの非エンコードパス:必須'),
       merge_request_iid: z
         .number()
         .describe('マージリクエストのIID（プロジェクト内ID）:必須'),
@@ -129,7 +129,7 @@ export const createAddMergeRequestDiffCommentTool = (client: GitLabClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe('プロジェクトIDまたはURLエンコードされたパス:必須'),
+        .describe('プロジェクトIDまたはプロジェクトの非エンコードパス:必須'),
       merge_request_iid: z
         .number()
         .describe('マージリクエストのIID（プロジェクト内ID）:必須'),
diff --git a/src/mastra/tools/gitlab/repositoryTools.ts b/src/mastra/tools/gitlab/repositoryTools.ts
index 4e370ee01..080175a3a 100644
--- a/src/mastra/tools/gitlab/repositoryTools.ts
+++ b/src/mastra/tools/gitlab/repositoryTools.ts
@@ -21,11 +21,11 @@ export const createGetFileContentTool = (client: GitLabClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe('プロジェクトIDまたはURLエンコードされたパス:必須'),
+        .describe('プロジェクトIDまたはプロジェクトの非エンコードパス:必須'),
       file_path: z
         .string()
         .describe(
-          'リポジトリルートからの相対パスで、URLエンコード済みであること（例えばpath%2Fto%2Ffile.rb）:必須',
+          'ファイルパス（リポジトリルートからの非エンコードの相対パス）:必須',
         ),
       ref: z.string().describe('リファレンス（ブランチ名、タグ名）:必須'),
     }),
@@ -77,11 +77,11 @@ export const createGetRawFileTool = (client: GitLabClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe('プロジェクトIDまたはURLエンコードされたパス:必須'),
+        .describe('プロジェクトIDまたはプロジェクトの非エンコードパス:必須'),
       file_path: z
         .string()
         .describe(
-          'ファイルパス（リポジトリルートからの相対パスで、URLエンコード済みであること（例えばpath%2Fto%2Ffile.rb）:必須',
+          'ファイルパス（リポジトリルートからの非エンコードの相対パス）:必須',
         ),
       ref: z.string().describe('リファレンス（ブランチ名、タグ名）:必須'),
     }),
@@ -133,11 +133,11 @@ export const createGeBlameFileTool = (client: GitLabClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe('プロジェクトIDまたはURLエンコードされたパス:必須'),
+        .describe('プロジェクトIDまたはプロジェクトの非エンコードパス:必須'),
       file_path: z
         .string()
         .describe(
-          'ファイルパス（リポジトリルートからの相対パスで、URLエンコード済みであること（例えばpath%2Fto%2Ffile.rb））:必須',
+          'ファイルパス（リポジトリルートからの非エンコードの相対パス）:必須',
         ),
       ref: z.string().describe('リファレンス（ブランチ名、タグ名）:必須'),
       range: z
@@ -197,7 +197,7 @@ export const createGetRepositoryTreeTool = (client: GitLabClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe('プロジェクトIDまたはURLエンコードされたパス:必須'),
+        .describe('プロジェクトIDまたはプロジェクトの非エンコードパス:必須'),
       path: z
         .string()
         .optional()
diff --git a/src/mastra/tools/redmine/index.ts b/src/mastra/tools/redmine/index.ts
index 963d61113..2ce11d20b 100644
--- a/src/mastra/tools/redmine/index.ts
+++ b/src/mastra/tools/redmine/index.ts
@@ -5,8 +5,11 @@
 
 import { createTool } from '@mastra/core/tools';
 import { z } from 'zod';
-import { RedmineClient, createRedmineClient } from './redmineClient';
-import { RedmineSchema } from '../../../main/types/settingsSchema';
+import {
+  RedmineClient,
+  RedmineClientConfig,
+  createRedmineClient,
+} from './redmineClient';
 import { createIssueTools } from './issueTools';
 
 /**
@@ -14,12 +17,7 @@ import { createIssueTools } from './issueTools';
  * @param config Redmine APIクライアント設定
  * @returns Redmine操作ツール一式
  */
-export const createRedmineTools = (config: {
-  apiUrl: string;
-  apiKey: string;
-}) => {
-  const client = createRedmineClient(config);
-
+export const createRedmineTools = (client: RedmineClient) => {
   // 各ツールグループを作成
   const issueTools = createIssueTools(client);
 
@@ -77,39 +75,31 @@ export const createRedmineTools = (config: {
 
 /**
  * Mastra用のRedmine操作ツールを設定・初期化する
- * @param config Redmine API接続設定
+ * @param config Redmine API接続設定、またはRedmineClientインスタンス
  * @returns Mastraで使用可能なRedmine操作ツール
  */
-export const setupRedmineTools = (config: {
-  apiUrl: string;
-  apiKey: string;
-}) => {
-  return (async () => {
-    // settingsSchemaによる設定値の検証
-    const validationResult = RedmineSchema.safeParse({
-      endpoint: config.apiUrl,
-      apiKey: config.apiKey,
-    });
-    if (!validationResult.success) {
-      throw new Error(
-        `Redmine設定が不正です: ${validationResult.error.message}`,
-      );
-    }
+export const setupRedmineTools = async (
+  config: RedmineClientConfig | RedmineClient,
+): Promise<ReturnType<typeof createRedmineTools>> => {
+  let client: RedmineClient;
 
+  if (config instanceof RedmineClient) {
+    client = config;
+  } else {
     // Redmineクライアントを作成
-    const client = createRedmineClient(config);
+    client = createRedmineClient(config);
+  }
 
-    // API疎通確認
-    try {
-      await client.testConnection();
-      // eslint-disable-next-line
-    } catch (error: any) {
-      throw new Error(`Redmine APIへの接続確認に失敗しました`);
-    }
+  // API疎通確認
+  try {
+    await client.testConnection();
+    // eslint-disable-next-line
+  } catch (error: any) {
+    throw new Error(`Redmine APIへの接続確認に失敗しました`);
+  }
 
-    // Redmine操作ツール一式を作成
-    return createRedmineTools(config);
-  })();
+  // Redmine操作ツール一式を作成
+  return createRedmineTools(client);
 };
 
 // 型定義とクライアントをエクスポート
diff --git a/src/mastra/tools/redmine/redmineClient.ts b/src/mastra/tools/redmine/redmineClient.ts
index 14a301855..f8317d3d5 100644
--- a/src/mastra/tools/redmine/redmineClient.ts
+++ b/src/mastra/tools/redmine/redmineClient.ts
@@ -4,7 +4,8 @@
  */
 
 import { z } from 'zod';
-import { RedmineProject } from './types';
+import { RedmineProject, RedmineBaseInfo } from './types';
+import { RedmineSchema } from '../../../main/types/settingsSchema';
 
 /**
  * Redmineクライアント設定のインターフェース
@@ -207,6 +208,21 @@ export class RedmineClient {
     throw new Error(`Unable to resolve ID for: ${value}`);
   }
 
+  /**
+   * キャッシュされた基本情報を一括で取得する
+   */
+  async getBaseInfo(): Promise<RedmineBaseInfo> {
+    const trackers = await this.getTrackers();
+    const statuses = await this.getStatuses();
+    const priorities = await this.getPriorities();
+
+    return {
+      trackers,
+      statuses,
+      priorities,
+    };
+  }
+
   /**
    * プロジェクト一覧を取得してIDマッピングを返す
    * @returns プロジェクトの名前とIDのマッピング配列
@@ -391,6 +407,14 @@ export class RedmineClient {
 export const createRedmineClient = (
   config: RedmineClientConfig,
 ): RedmineClient => {
+  // settingsSchemaによる設定値の検証
+  const validationResult = RedmineSchema.safeParse({
+    endpoint: config.apiUrl,
+    apiKey: config.apiKey,
+  });
+  if (!validationResult.success) {
+    throw new Error(`Redmine設定が不正です: ${validationResult.error.message}`);
+  }
   return new RedmineClient(config);
 };
 
diff --git a/src/mastra/tools/redmine/types.ts b/src/mastra/tools/redmine/types.ts
index 2d14dad5c..65ce90508 100644
--- a/src/mastra/tools/redmine/types.ts
+++ b/src/mastra/tools/redmine/types.ts
@@ -52,6 +52,24 @@ export interface IssueFilter {
   sort?: string;
 }
 
+/**
+ * Redmine基本情報
+ */
+export interface RedmineBaseInfo {
+  trackers: Array<{
+    id: number;
+    name: string;
+  }>;
+  statuses: Array<{
+    id: number;
+    name: string;
+  }>;
+  priorities: Array<{
+    id: number;
+    name: string;
+  }>;
+}
+
 /**
  * Redmineチケット一覧取得APIの返り値
  */
