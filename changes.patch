diff --git a/src/main/main.ts b/src/main/main.ts
index 5fc7835a5..a7ccb0319 100644
--- a/src/main/main.ts
+++ b/src/main/main.ts
@@ -47,6 +47,7 @@ const mastraStatus: AgentBootStatus = {
     redmine: false,
     gitlab: false,
     mcp: false,
+    stagehand: false,
   },
 };
 
@@ -287,6 +288,7 @@ const setupChatHandlers = () => {
                   redmine: false,
                   gitlab: false,
                   mcp: false,
+                  stagehand: false,
                 },
               ),
               threadId: roomId, // チャットルームIDをスレッドIDとして使用
diff --git a/src/main/store.ts b/src/main/store.ts
index e2d68a6c9..9b75fee0c 100644
--- a/src/main/store.ts
+++ b/src/main/store.ts
@@ -24,6 +24,10 @@ export interface StoreSchema {
   mcp: {
     serverConfigText: string;
   };
+  stagehand: {
+    enabled: boolean;
+    headless: boolean;
+  };
 }
 
 // スキーマ定義
@@ -77,6 +81,20 @@ const schema = {
     },
     required: [],
   },
+  stagehand: {
+    type: 'object',
+    properties: {
+      enabled: {
+        type: 'boolean',
+        default: false,
+      },
+      headless: {
+        type: 'boolean',
+        default: false,
+      },
+    },
+    required: [],
+  },
 } as const;
 
 /**
@@ -133,6 +151,10 @@ const defaults: StoreSchema = {
   mcp: {
     serverConfigText: '{}',
   },
+  stagehand: {
+    enabled: false,
+    headless: false,
+  },
 };
 
 // ストアのインスタンスを作成する関数
diff --git a/src/main/types/index.ts b/src/main/types/index.ts
index df29dc092..f3ae2c765 100644
--- a/src/main/types/index.ts
+++ b/src/main/types/index.ts
@@ -36,6 +36,7 @@ export type AgentToolStatus = {
   redmine: boolean;
   gitlab: boolean;
   mcp: boolean;
+  stagehand: boolean;
 };
 
 /**
diff --git a/src/main/types/settingsSchema.ts b/src/main/types/settingsSchema.ts
index efc139260..bfd11adf1 100644
--- a/src/main/types/settingsSchema.ts
+++ b/src/main/types/settingsSchema.ts
@@ -71,6 +71,14 @@ export const GitLabSchema = z.object({
   apiKey: z.string().optional().or(z.literal('')),
 });
 
+/**
+ * Stagehand設定のスキーマ
+ */
+export const StagehandSchema = z.object({
+  enabled: z.boolean(),
+  headless: z.boolean(),
+});
+
 /**
  * MCP設定のスキーマ
  */
@@ -112,6 +120,7 @@ export const SettingsSchema = z.object({
   redmine: RedmineSchema,
   gitlab: GitLabSchema,
   mcp: McpStoreSchema,
+  stagehand: StagehandSchema,
 });
 
 export type ValidationError = {
diff --git a/src/mastra/agents/orchestrator.ts b/src/mastra/agents/orchestrator.ts
index de2d877bc..a51443138 100644
--- a/src/mastra/agents/orchestrator.ts
+++ b/src/mastra/agents/orchestrator.ts
@@ -9,7 +9,7 @@ import { getStore } from '../../main/store';
 import { setupRedmineTools } from '../tools/redmine';
 import { setupGitLabTools } from '../tools/gitlab';
 import { McpSchema } from '../../main/types/schema';
-import { AgentBootMessage } from '../../main/types';
+import { AgentBootMessage, AgentToolStatus } from '../../main/types';
 
 const ORCHESTRATOR_NAME = 'orchestrator';
 const LOG_FILE_PATH = './mcp.log';
@@ -55,17 +55,14 @@ const deleteLogFile = (): void => {
 export const getOrchestrator = async (): Promise<{
   agent: Agent | null;
   alertMessages: AgentBootMessage[];
-  toolStatus: {
-    redmine: boolean;
-    gitlab: boolean;
-    mcp: boolean;
-  };
+  toolStatus: AgentToolStatus;
 }> => {
   const alertMessages: AgentBootMessage[] = [];
   let agent: Agent | null = null;
   let redmineTools = {};
   let gitlabTools = {};
   let mcpTools = {};
+  let stagehandTools = {};
 
   try {
     const store = getStore();
@@ -168,6 +165,28 @@ export const getOrchestrator = async (): Promise<{
       }
     }
 
+    // Stagehandツールの登録
+    // Stagehandが有効な場合は登録する
+    const stagehandStore = store.get('stagehand');
+    const stagehandEnabled = stagehandStore.enabled;
+    if (stagehandEnabled) {
+      try {
+        stagehandTools = await createStagehandTools();
+        alertMessages.push({
+          id: uuid(),
+          type: 'info',
+          content: 'ブラウザ操作ツールの初期化に成功しました。',
+        });
+      } catch (error) {
+        alertMessages.push({
+          id: uuid(),
+          type: 'warning',
+          content: `ブラウザ操作ツールの初期化に失敗しました\n${error}`,
+        });
+        console.error('ブラウザ操作ツールの初期化に失敗しました:', error);
+      }
+    }
+
     // エージェントの作成
     agent = createAgent({
       name: ORCHESTRATOR_NAME,
@@ -175,7 +194,7 @@ export const getOrchestrator = async (): Promise<{
       tools: {
         // sourceListTool,
         querySourceTool,
-        ...createStagehandTools(),
+        ...stagehandTools,
         ...redmineTools,
         ...gitlabTools,
         ...mcpTools,
@@ -248,6 +267,7 @@ export const getOrchestrator = async (): Promise<{
       redmine: !!redmineTools && Object.keys(redmineTools).length > 0,
       gitlab: !!gitlabTools && Object.keys(gitlabTools).length > 0,
       mcp: !!mcpTools && Object.keys(mcpTools).length > 0,
+      stagehand: !!stagehandTools && Object.keys(stagehandTools).length > 0,
     },
   };
 };
diff --git a/src/mastra/agents/prompts.ts b/src/mastra/agents/prompts.ts
index 884b2aaaa..9e8043e86 100644
--- a/src/mastra/agents/prompts.ts
+++ b/src/mastra/agents/prompts.ts
@@ -2,6 +2,7 @@ import { eq, and } from 'drizzle-orm';
 import { getStore } from '../../main/store';
 import { sources, topics } from '../../db/schema';
 import getDb from '../../db';
+import { AgentToolStatus } from '../../main/types';
 
 /**
  * データベースからソース情報を取得する
@@ -93,11 +94,9 @@ export const EXTRACT_TOPIC_AND_SUMMARY_SYSTEM_PROMPT = `
  * @param config ツールの有効/無効を指定する設定オブジェクト
  * @returns システムプロンプト文字列
  */
-export const getOrchestratorSystemPrompt = async (config: {
-  redmine: boolean;
-  gitlab: boolean;
-  mcp: boolean;
-}): Promise<string> => {
+export const getOrchestratorSystemPrompt = async (
+  config: AgentToolStatus,
+): Promise<string> => {
   const store = getStore();
 
   const sourceListMD = await getSourcesInfoByMDList();
@@ -129,11 +128,15 @@ export const getOrchestratorSystemPrompt = async (config: {
   - sourceQueryTool：登録されたソースの内容に基づいて専門家(別のAIエージェント)が質問に回答します。一度の複数の質問を実行することができます
 - メモリ更新ツール
   - updateWorkingMemory：スレッドに関する内容や作業時の手順やメモに関するWorkingMemoryを更新します。
-- Web操作ツール(Stagehandを利用して、他のAIエージェントがブラウザ操作を実行します)
+${
+  config.stagehand
+    ? `- Web操作ツール(Stagehandを利用して、他のAIエージェントがブラウザ操作を実行します)
   - stagehandActTool：Webページ上で指定した操作を実行する（例えば、ボタンクリックやフォーム入力など）
   - stagehandObserveTool：Webページ上の要素を検出・特定する
   - stagehandExtractTool：Webページからデータを抽出する
-  - stagehandNavigateTool：明示的に指定されたURLに遷移する
+  - stagehandNavigateTool：明示的に指定されたURLに遷移する`
+    : ''
+}
 ${
   config.redmine
     ? `- redmine操作ツール
diff --git a/src/renderer/components/common/SettingsModal.tsx b/src/renderer/components/common/SettingsModal.tsx
index d2fecb38b..4e916d352 100644
--- a/src/renderer/components/common/SettingsModal.tsx
+++ b/src/renderer/components/common/SettingsModal.tsx
@@ -7,9 +7,11 @@ import {
   Box,
   CircularProgress,
   Alert,
+  FormGroup,
+  FormControlLabel,
+  Switch,
 } from '@mui/material';
 import Modal from './Modal';
-import { McpSchemaType } from '../../../main/types/schema';
 import useSettingsStore from '../../hooks/useSettingsStore';
 import { StoreSchema as Settings } from '../../../main/store';
 
@@ -54,7 +56,7 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
   const handleChange = async (
     section: keyof Settings,
     field: string,
-    value: string | McpSchemaType,
+    value: unknown,
   ) => {
     await updateField(section, field, value);
   };
@@ -201,6 +203,36 @@ const SettingsModal: React.FC<SettingsModalProps> = ({
             />
           </Box>
 
+          <Box sx={{ width: '100%', mb: 1 }}>
+            <Typography variant="h6" gutterBottom>
+              ブラウザ操作設定
+            </Typography>
+            <FormGroup>
+              <FormControlLabel
+                control={
+                  <Switch
+                    checked={settings.stagehand.enabled}
+                    onChange={(e) =>
+                      handleChange('stagehand', 'enabled', e.target.checked)
+                    }
+                  />
+                }
+                label="ブラウザ操作を有効化"
+              />
+              <FormControlLabel
+                control={
+                  <Switch
+                    checked={settings.stagehand.headless}
+                    onChange={(e) =>
+                      handleChange('stagehand', 'headless', e.target.checked)
+                    }
+                  />
+                }
+                label="ヘッドレスモードを有効化"
+              />
+            </FormGroup>
+          </Box>
+
           <Box sx={{ width: '100%', mb: 1 }}>
             <Typography variant="h6" gutterBottom>
               MCPサーバー設定
diff --git a/src/renderer/hooks/useSettingsStore.ts b/src/renderer/hooks/useSettingsStore.ts
index c510a9abe..a3f80f465 100644
--- a/src/renderer/hooks/useSettingsStore.ts
+++ b/src/renderer/hooks/useSettingsStore.ts
@@ -50,6 +50,12 @@ const useSettingsStore = () => {
     setValue: setMcpStore,
   } = useElectronStore<Settings['mcp']>('mcp');
 
+  const {
+    value: stagehandStore,
+    loading: loadingStagehand,
+    setValue: setStagehandStore,
+  } = useElectronStore<Settings['stagehand']>('stagehand');
+
   // ローディング状態の管理
   const loading =
     loadingDatabase ||
@@ -57,7 +63,8 @@ const useSettingsStore = () => {
     loadingApi ||
     loadingRedmine ||
     loadingGitlab ||
-    loadingMcp;
+    loadingMcp ||
+    loadingStagehand;
 
   // 設定値の状態管理
   const [settings, setSettings] = useState<Settings>({
@@ -67,6 +74,7 @@ const useSettingsStore = () => {
     redmine: { endpoint: '', apiKey: '' },
     gitlab: { endpoint: '', apiKey: '' },
     mcp: { serverConfigText: '{}' },
+    stagehand: { enabled: false, headless: false },
   });
 
   // バリデーションエラーの状態管理
@@ -77,6 +85,7 @@ const useSettingsStore = () => {
     redmine: {},
     gitlab: {},
     mcp: {},
+    stagehand: {},
   });
 
   const [saving, setSaving] = useState(false);
@@ -157,6 +166,7 @@ const useSettingsStore = () => {
             serverConfigText: '{}',
           },
         },
+        stagehand: stagehandStore ?? { enabled: false, headless: false },
       };
 
       setSettings(newSettings);
@@ -173,6 +183,7 @@ const useSettingsStore = () => {
     redmineStore,
     gitlabStore,
     mcpStore,
+    stagehandStore,
     loading,
     validateSection,
   ]);
@@ -235,6 +246,7 @@ const useSettingsStore = () => {
         setRedmineStore(settings.redmine),
         setGitlabStore(settings.gitlab),
         setMcpStore(settings.mcp),
+        setStagehandStore(settings.stagehand),
       ]);
 
       // 設定保存後にMastraを再初期化
