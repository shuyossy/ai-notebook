diff --git a/src/main/main.ts b/src/main/main.ts
index 3cba49e42..4ba4e0ad7 100644
--- a/src/main/main.ts
+++ b/src/main/main.ts
@@ -31,7 +31,7 @@ import getDb from '../db';
 import SourceRegistrationManager from '../mastra/workflows/sourceRegistrationManager';
 import { getOrchestrator } from '../mastra/agents/orchestrator';
 import MenuBuilder from './menu';
-import { resolveHtmlPath, toAbsoluteFileURL } from './utils/util';
+import { resolveHtmlPath } from './utils/util';
 import { initStore, getStore } from './store';
 import { RedmineBaseInfo } from '../mastra/tools/redmine';
 
@@ -273,7 +273,8 @@ const setupChatHandlers = () => {
       _,
       {
         threadId,
-        messageId,
+        oldContent,
+        oldCreatedAt,
       }: IpcRequestPayloadMap[typeof IpcChannels.CHAT_EDIT_HISTORY],
     ): Promise<IpcResponsePayloadMap[typeof IpcChannels.CHAT_EDIT_HISTORY]> => {
       try {
@@ -289,12 +290,32 @@ const setupChatHandlers = () => {
         const messages = await memory.storage.getMessages({
           threadId,
         });
+
+        // oldContentと一致するメッセージのリストを取得
+        const targetMessages = messages.filter(
+          (msg) => msg.content === oldContent,
+        );
+
+        if (targetMessages.length === 0) {
+          throw new Error('指定されたメッセージが見つかりません');
+        }
+
+        // 取得したメッセージリストからoldCreatedAtと最も近いメッセージを検索
+        const targetMessage = targetMessages.reduce((closest, current) => {
+          const currentDate = new Date(current.createdAt);
+          const closestDate = new Date(closest.createdAt);
+          return Math.abs(currentDate.getTime() - oldCreatedAt.getTime()) <
+            Math.abs(closestDate.getTime() - oldCreatedAt.getTime())
+            ? current
+            : closest;
+        });
+
         // messageIdに対応するメッセージを検索
         const targetMessageIndex = messages.findIndex(
-          (msg) => msg.id === messageId,
+          (msg) => msg.id === targetMessage.id,
         );
         if (targetMessageIndex === -1) {
-          throw new Error(`メッセージID ${messageId} が見つかりません`);
+          throw new Error(`メッセージID ${targetMessage.id} が見つかりません`);
         }
         // 最初のメッセージからmessageIdに対応するメッセージまでの履歴を取得
         const history = messages.slice(0, targetMessageIndex);
@@ -303,11 +324,11 @@ const setupChatHandlers = () => {
         await memory.storage.deleteThread({ threadId });
 
         // スレッドを再作成
-        await memory.createThread({
-          resourceId: 'user',
-          title: '',
-          threadId,
-        });
+        // await memory.createThread({
+        //   resourceId: 'user',
+        //   title: '',
+        //   threadId,
+        // });
 
         // 取得した履歴をメモリに保存
         await memory.saveMessages({
diff --git a/src/main/preload.ts b/src/main/preload.ts
index 7368ff289..536963ac2 100644
--- a/src/main/preload.ts
+++ b/src/main/preload.ts
@@ -1,7 +1,12 @@
 // Disable no-unused-vars, broken for spread args
 /* eslint no-unused-vars: off */
 import { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';
-import { IpcChannels, IpcResponsePayload, IpcEventPayload } from './types/ipc';
+import {
+  IpcChannels,
+  IpcResponsePayload,
+  IpcEventPayload,
+  IpcRequestPayload,
+} from './types/ipc';
 
 export type Channels = (typeof IpcChannels)[keyof typeof IpcChannels];
 
@@ -87,10 +92,9 @@ const electronHandler = {
       return ipcRenderer.invoke(IpcChannels.CHAT_ABORT_REQUEST, threadId);
     },
     // メッセージ編集時に該当indexまでの履歴を削除する
-    editHistory: async (params: {
-      threadId: string;
-      messageId: string;
-    }): Promise<IpcResponsePayload<typeof IpcChannels.CHAT_EDIT_HISTORY>> => {
+    editHistory: async (
+      params: IpcRequestPayload<typeof IpcChannels.CHAT_EDIT_HISTORY>,
+    ): Promise<IpcResponsePayload<typeof IpcChannels.CHAT_EDIT_HISTORY>> => {
       return ipcRenderer.invoke(IpcChannels.CHAT_EDIT_HISTORY, params);
     },
     // AIの応答を取得する（ストリーミング）
diff --git a/src/main/types/ipc.ts b/src/main/types/ipc.ts
index f957d618d..137105d47 100644
--- a/src/main/types/ipc.ts
+++ b/src/main/types/ipc.ts
@@ -70,7 +70,11 @@ export type IpcRequestPayloadMap = {
     title: string;
   };
   [IpcChannels.CHAT_ABORT_REQUEST]: { threadId: string };
-  [IpcChannels.CHAT_EDIT_HISTORY]: { threadId: string; messageId: string };
+  [IpcChannels.CHAT_EDIT_HISTORY]: {
+    threadId: string;
+    oldContent: string;
+    oldCreatedAt: Date;
+  };
 };
 
 export type IpcResponsePayloadMap = {
diff --git a/src/renderer/components/chat/ChatArea.tsx b/src/renderer/components/chat/ChatArea.tsx
index 532f757f3..ce4fc8fd3 100644
--- a/src/renderer/components/chat/ChatArea.tsx
+++ b/src/renderer/components/chat/ChatArea.tsx
@@ -1,4 +1,4 @@
-import React, { useState, useEffect, memo, useRef } from 'react';
+import React, { useState, useEffect, memo } from 'react';
 import { useChat } from '@ai-sdk/react';
 import { Box, Divider, Typography, Alert } from '@mui/material';
 import { v4 as uuid } from 'uuid';
@@ -174,7 +174,7 @@ const ChatArea: React.FC<ChatAreaProps> = ({ selectedRoomId }) => {
   const [editMessageId, setEditMessageId] = useState<string>('');
   const [editMessageContent, setEditMessageContent] = useState<string>('');
   const { status: agentStatus } = useAgentStatus();
-  const isEditSubmitRef = useRef(false);
+  const [isEditHistory, setIsEditHistory] = useState(false);
 
   const isAgentInitializing = agentStatus.state === 'initializing';
 
@@ -229,17 +229,6 @@ const ChatArea: React.FC<ChatAreaProps> = ({ selectedRoomId }) => {
         chatService.createThread(selectedRoomId, '');
       }
 
-      // 編集メッセージ送信時は、編集メッセージ以降の履歴を削除
-      if (isEditSubmitRef.current) {
-        window.electron.chat.editHistory({
-          threadId: selectedRoomId!,
-          messageId: editMessageId,
-        });
-        setEditMessageId('');
-        setEditMessageContent('');
-        isEditSubmitRef.current = false; // リセット
-      }
-
       // Return the structured body for your API route
       return {
         message: lastMessage?.content, // Send only the most recent message content/role
@@ -278,9 +267,11 @@ const ChatArea: React.FC<ChatAreaProps> = ({ selectedRoomId }) => {
     setEditMessageContent(content);
   };
 
-  const handleEditSubmit = () => {
+  const handleEditSubmit = async () => {
     const messageIndex = messages.findIndex((m) => m.id === editMessageId);
     if (messageIndex === -1) return;
+    const oldCreatedAt = messages[messageIndex].createdAt!;
+    const oldContent = messages[messageIndex].content;
 
     const updatedMessages = messages.slice(0, messageIndex + 1);
     updatedMessages[messageIndex] = {
@@ -294,7 +285,15 @@ const ChatArea: React.FC<ChatAreaProps> = ({ selectedRoomId }) => {
       ],
     };
     setMessages(updatedMessages);
-    isEditSubmitRef.current = true;
+    setIsEditHistory(true);
+    await window.electron.chat.editHistory({
+      threadId: selectedRoomId!,
+      oldContent,
+      oldCreatedAt,
+    });
+    setEditMessageId('');
+    setEditMessageContent('');
+    setIsEditHistory(false);
     reload();
   };
 
@@ -331,7 +330,8 @@ const ChatArea: React.FC<ChatAreaProps> = ({ selectedRoomId }) => {
             disabled={
               status === 'submitted' ||
               status === 'streaming' ||
-              isAgentInitializing
+              isAgentInitializing ||
+              isEditHistory
             }
             editingMessageId={editMessageId}
             onEditStart={handleEditStart}
@@ -350,7 +350,8 @@ const ChatArea: React.FC<ChatAreaProps> = ({ selectedRoomId }) => {
             disabled={
               status === 'submitted' ||
               status === 'streaming' ||
-              isAgentInitializing
+              isAgentInitializing ||
+              isEditHistory
             }
             placeholder={getPlaceholderText(status, isAgentInitializing)}
             isStreaming={status === 'streaming'}
