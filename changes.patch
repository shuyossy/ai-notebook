diff --git a/src/mastra/tools/redmine/issueTools.ts b/src/mastra/tools/redmine/issueTools.ts
index e273e80bc..02095faa8 100644
--- a/src/mastra/tools/redmine/issueTools.ts
+++ b/src/mastra/tools/redmine/issueTools.ts
@@ -29,9 +29,7 @@ export const createGetIssuesListTool = (client: RedmineClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe(
-          'Project ID, name, or identifier (required)',
-        ),
+        .describe('Project ID, name, or identifier (required)'),
       status_id: z
         .union([z.string(), z.number(), z.enum(['open', 'closed', '*'])])
         .optional()
@@ -262,11 +260,12 @@ export const createCreateIssueTool = (client: RedmineClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe(
-          'Project ID, name, or identifier (required)',
-        ),
+        .describe('Project ID, name, or identifier (required)'),
       subject: z.string().describe('Issue title (required)'),
-      description: z.string().optional().describe('Issue description (optional)'),
+      description: z
+        .string()
+        .optional()
+        .describe('Issue description (optional)'),
       tracker_id: z
         .union([z.string(), z.number()])
         .optional()
@@ -279,7 +278,14 @@ export const createCreateIssueTool = (client: RedmineClient) => {
         .union([z.string(), z.number()])
         .optional()
         .describe('Priority ID or name (optional)'),
-      parent_issue_id: z.number().optional().describe('Parent issue ID (optional)'),
+      assigned_to_id: z
+        .union([z.string(), z.number()])
+        .optional()
+        .describe('Assignee ID or name (optional)'),
+      parent_issue_id: z
+        .number()
+        .optional()
+        .describe('Parent issue ID (optional)'),
       fixed_version_id: z
         .union([z.string(), z.number()])
         .optional()
@@ -288,8 +294,14 @@ export const createCreateIssueTool = (client: RedmineClient) => {
         .string()
         .optional()
         .describe('Start date (YYYY-MM-DD format) (optional)'),
-      due_date: z.string().optional().describe('Due date (YYYY-MM-DD format) (optional)'),
-      estimated_hours: z.number().optional().describe('Estimated hours (optional)'),
+      due_date: z
+        .string()
+        .optional()
+        .describe('Due date (YYYY-MM-DD format) (optional)'),
+      estimated_hours: z
+        .number()
+        .optional()
+        .describe('Estimated hours (optional)'),
     }),
     outputSchema: createBaseToolResponseSchema(
       z.object({
@@ -374,6 +386,23 @@ export const createCreateIssueTool = (client: RedmineClient) => {
         }
       }
 
+      if (context.assigned_to_id) {
+        if (
+          typeof context.assigned_to_id === 'string' &&
+          !Number.isNaN(Number(context.assigned_to_id))
+        ) {
+          issueData.assigned_to_id = Number(context.assigned_to_id);
+        } else if (typeof context.assigned_to_id === 'string') {
+          const users = await client.getUsers();
+          issueData.assigned_to_id = await client.resolveId(
+            context.assigned_to_id,
+            users,
+          );
+        } else {
+          issueData.assigned_to_id = context.assigned_to_id;
+        }
+      }
+
       if (context.parent_issue_id) {
         issueData.parent_issue_id = context.parent_issue_id;
       }
@@ -454,7 +483,10 @@ export const createUpdateIssueTool = (client: RedmineClient) => {
       issue_id: z.number().describe('ID of the issue to update (required)'),
       notes: z.string().optional().describe('Update comment (optional)'),
       subject: z.string().optional().describe('Issue title (optional)'),
-      description: z.string().optional().describe('Issue description (optional)'),
+      description: z
+        .string()
+        .optional()
+        .describe('Issue description (optional)'),
       tracker_id: z
         .union([z.string(), z.number()])
         .optional()
@@ -467,8 +499,14 @@ export const createUpdateIssueTool = (client: RedmineClient) => {
         .union([z.string(), z.number()])
         .optional()
         .describe('Priority ID or name (optional)'),
-      assigned_to_id: z.number().optional().describe('Assignee ID (optional)'),
-      parent_issue_id: z.number().optional().describe('Parent issue ID (optional)'),
+      assigned_to_id: z
+        .union([z.string(), z.number()])
+        .optional()
+        .describe('Assignee ID or name (optional)'),
+      parent_issue_id: z
+        .number()
+        .optional()
+        .describe('Parent issue ID (optional)'),
       fixed_version_id: z
         .union([z.string(), z.number()])
         .optional()
@@ -477,8 +515,14 @@ export const createUpdateIssueTool = (client: RedmineClient) => {
         .string()
         .optional()
         .describe('Start date (YYYY-MM-DD format) (optional)'),
-      due_date: z.string().optional().describe('Due date (YYYY-MM-DD format) (optional)'),
-      estimated_hours: z.number().optional().describe('Estimated hours (optional)'),
+      due_date: z
+        .string()
+        .optional()
+        .describe('Due date (YYYY-MM-DD format) (optional)'),
+      estimated_hours: z
+        .number()
+        .optional()
+        .describe('Estimated hours (optional)'),
     }),
     outputSchema: createBaseToolResponseSchema(
       z.object({
@@ -560,6 +604,23 @@ export const createUpdateIssueTool = (client: RedmineClient) => {
         }
       }
 
+      if (context.assigned_to_id) {
+        if (
+          typeof context.assigned_to_id === 'string' &&
+          !Number.isNaN(Number(context.assigned_to_id))
+        ) {
+          updateData.assigned_to_id = Number(context.assigned_to_id);
+        } else if (typeof context.assigned_to_id === 'string') {
+          const users = await client.getUsers();
+          updateData.assigned_to_id = await client.resolveId(
+            context.assigned_to_id,
+            users,
+          );
+        } else {
+          updateData.assigned_to_id = context.assigned_to_id;
+        }
+      }
+
       if (context.parent_issue_id) {
         updateData.parent_issue_id = context.parent_issue_id;
       }
diff --git a/src/mastra/tools/redmine/redmineClient.ts b/src/mastra/tools/redmine/redmineClient.ts
index f8317d3d5..284463e9b 100644
--- a/src/mastra/tools/redmine/redmineClient.ts
+++ b/src/mastra/tools/redmine/redmineClient.ts
@@ -47,6 +47,8 @@ export class RedmineClient {
 
   private prioritiesCache: NameIdMapping[] = [];
 
+  private usersCache: NameIdMapping[] = [];
+
   /* コンストラクタ
    * @param config RedmineClientConfig - クライアント設定
    */
@@ -223,6 +225,32 @@ export class RedmineClient {
     };
   }
 
+  /**
+   * ユーザー一覧を取得してキャッシュに保存
+   * @returns ユーザー情報の配列
+   */
+  async getUsers(): Promise<NameIdMapping[]> {
+    if (this.usersCache.length > 0) {
+      return this.usersCache;
+    }
+
+    interface UsersResponse {
+      users: Array<{
+        id: number;
+        firstname: string;
+        lastname: string;
+      }>;
+    }
+
+    const response = await this.request<UsersResponse>('users.json', 'GET');
+    this.usersCache = response.users.map((user) => ({
+      id: user.id,
+      name: `${user.firstname} ${user.lastname}`,
+    }));
+
+    return this.usersCache;
+  }
+
   /**
    * プロジェクト一覧を取得してIDマッピングを返す
    * @returns プロジェクトの名前とIDのマッピング配列
diff --git a/src/mastra/tools/redmine/types.ts b/src/mastra/tools/redmine/types.ts
index 65ce90508..dd090e16e 100644
--- a/src/mastra/tools/redmine/types.ts
+++ b/src/mastra/tools/redmine/types.ts
@@ -21,6 +21,7 @@ interface RedmineIssueCommonData {
   due_date?: string;
   estimated_hours?: number;
   fixed_version_id?: number | string;
+  assigned_to_id?: number | string;
 }
 
 /**
