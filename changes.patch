diff --git a/.eslintrc.js b/.eslintrc.js
index ec5ff9463..7d8010a77 100644
--- a/.eslintrc.js
+++ b/.eslintrc.js
@@ -15,6 +15,7 @@ module.exports = {
     'no-unused-vars': 'off',
     '@typescript-eslint/no-unused-vars': 'error',
     'no-console': 'off',
+    'no-await-in-loop': 'off',
     'react/require-default-props': 'off', // パラメータのデストラクチャリングでデフォルト値を設定する方式を許可
     'react/function-component-definition': [
       'error',
diff --git a/src/mastra/agents/prompts.ts b/src/mastra/agents/prompts.ts
index a783a4eb8..50701d02e 100644
--- a/src/mastra/agents/prompts.ts
+++ b/src/mastra/agents/prompts.ts
@@ -166,6 +166,8 @@ ${
   config.redmine
     ? `- redmine操作ツール
   - RedmineのURLはこちら：${store.get('redmine').endpoint}
+  - Redmineのプロジェクトを指定する際はプロジェクトID、プロジェクト名またはプロジェクト識別子が必要になるが、プロジェクトの識別子は以下のように取得できる
+    - 例えば、プロジェクトのURLが${store.get('redmine').endpoint}/projects/myprjの場合、プロジェクトの識別子はmyprjとなる(/projects/直後の部分)
   - トラッカーの利用方針は以下の通り（あくまで方針であり、ユーザから明確にトラッカーの種類など提示された場合はそちらに従うこと）
     - 中日程：プロジェクト全体のフェーズ分けなどで利用する
     - 作業計画：プロジェクトの各フェーズ内で実施する作業の計画を立てるために利用する
diff --git a/src/mastra/tools/redmine/index.ts b/src/mastra/tools/redmine/index.ts
index f16f2c052..963d61113 100644
--- a/src/mastra/tools/redmine/index.ts
+++ b/src/mastra/tools/redmine/index.ts
@@ -30,12 +30,6 @@ export const createRedmineTools = (config: {
       'Redmineインスタンスの基本情報（プロジェクト、トラッカー、ステータス、優先度など）を取得します。',
     inputSchema: z.object({}),
     outputSchema: z.object({
-      projects: z.array(
-        z.object({
-          id: z.number(),
-          name: z.string(),
-        }),
-      ),
       trackers: z.array(
         z.object({
           id: z.number(),
@@ -57,15 +51,13 @@ export const createRedmineTools = (config: {
     }),
     execute: async () => {
       // 各種マスタ情報を取得
-      const [projects, trackers, statuses, priorities] = await Promise.all([
-        client.getProjects(),
+      const [trackers, statuses, priorities] = await Promise.all([
         client.getTrackers(),
         client.getStatuses(),
         client.getPriorities(),
       ]);
 
       return {
-        projects,
         trackers,
         statuses,
         priorities,
diff --git a/src/mastra/tools/redmine/issueTools.ts b/src/mastra/tools/redmine/issueTools.ts
index d1fd16d08..2c735f14a 100644
--- a/src/mastra/tools/redmine/issueTools.ts
+++ b/src/mastra/tools/redmine/issueTools.ts
@@ -29,7 +29,9 @@ export const createGetIssuesListTool = (client: RedmineClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe('プロジェクトIDまたはプロジェクト名:必須'),
+        .describe(
+          'プロジェクトID、プロジェクト名、またはプロジェクト識別子:必須',
+        ),
       status_id: z
         .union([z.string(), z.number(), z.enum(['open', 'closed', '*'])])
         .optional()
@@ -167,30 +169,19 @@ export const createGetIssuesListTool = (client: RedmineClient) => {
           }
         });
 
-        // ページネーション
-        const limit = 100;
-        let offset = 0;
-        // すべてのチケットを格納する配列
-        let all: any[] = [];
+        // API リクエストの実行
+        const path = `issues.json?${queryParams.toString()}`;
         // eslint-disable-next-line
-        while (true) {
-          // API リクエストの実行
-          const path = `issues.json?${queryParams.toString()}&limit=${limit}&offset=${offset}`;
-          // eslint-disable-next-line
-          const response = await client.request<RedmineIssueListResponse>(
-            path,
-            'GET',
-          );
-          all = all.concat(response.issues);
-          if (all.length >= response.total_count) break;
-          offset += limit;
-        }
+        const response = await client.request<RedmineIssueListResponse>(
+          path,
+          'GET',
+        );
 
         status = 'success';
         return {
           status,
           result: {
-            issues: all,
+            issues: response.issues,
           },
         };
       } catch (error) {
@@ -271,7 +262,9 @@ export const createCreateIssueTool = (client: RedmineClient) => {
     inputSchema: z.object({
       project_id: z
         .union([z.string(), z.number()])
-        .describe('プロジェクトIDまたはプロジェクト名:必須'),
+        .describe(
+          'プロジェクトID、プロジェクト名、またはプロジェクト識別子:必須',
+        ),
       subject: z.string().describe('チケットのタイトル:必須'),
       description: z.string().optional().describe('チケットの説明:任意'),
       tracker_id: z
diff --git a/src/mastra/tools/redmine/redmineClient.ts b/src/mastra/tools/redmine/redmineClient.ts
index 9a697398a..14a301855 100644
--- a/src/mastra/tools/redmine/redmineClient.ts
+++ b/src/mastra/tools/redmine/redmineClient.ts
@@ -4,8 +4,7 @@
  */
 
 import { z } from 'zod';
-
-type RedmineHeaders = Record<string, string>;
+import { RedmineProject } from './types';
 
 /**
  * Redmineクライアント設定のインターフェース
@@ -39,7 +38,7 @@ export class RedmineClient {
   private readonly apiKey: string;
 
   // キャッシュ: プロジェクト、トラッカー、ステータスなど
-  private projectsCache: NameIdMapping[] = [];
+  private projectsCache: RedmineProject[] = [];
 
   private trackersCache: NameIdMapping[] = [];
 
@@ -56,53 +55,119 @@ export class RedmineClient {
   }
 
   /**
-   * RedmineのRESTリクエストを実行する
-   * @param path APIパス
-   * @param method HTTPメソッド
-   * @param data リクエストデータ
-   * @returns レスポンスデータ
+   * Redmine の REST API リクエストメソッド
+   *  - GET  の場合 : limit / offset を使って全件取得（最大 100 件ずつ）
+   *  - POST/PUT の場合 : 1 回だけ実行
    */
   async request<T = any>(
     path: string,
     method: 'GET' | 'POST' | 'PUT',
     data: any = undefined,
   ): Promise<T> {
-    const url = new URL(path, this.apiUrl);
-
-    const headers: RedmineHeaders = {
+    /**
+     * --------------------------
+     *  共通ヘッダーと fetch オプション
+     * --------------------------
+     */
+    const commonHeaders: Record<string, string> = {
       'Content-Type': 'application/json',
       'X-Redmine-API-Key': this.apiKey,
     };
 
-    const options = {
-      method,
-      headers,
-      body: data ? JSON.stringify(data) : undefined,
-    };
-
-    try {
-      const response = await fetch(url.toString(), options);
-
+    /**
+     * ---------------------------------------------
+     * 1. GET 以外は従来どおり 1 回だけ実行して終了
+     * ---------------------------------------------
+     */
+    if (method !== 'GET') {
+      const url = new URL(path, this.apiUrl);
+      const response = await fetch(url.toString(), {
+        method,
+        headers: commonHeaders,
+        body: data ? JSON.stringify(data) : undefined,
+      });
       if (!response.ok) {
         throw new Error(
           `Redmine API Error: ${response.status} ${response.statusText}`,
         );
       }
+      if (response.status === 204) {
+        return {} as T;
+      }
+      return (await response.json()) as T;
+    }
+
+    /**
+     * ---------------------------------------
+     * 2. ここから GET（一覧取得）のページネーション処理
+     * ---------------------------------------
+     */
+    const limit = 100; // 1 リクエスト最大件数（Redmine の上限）
+    let offset = 0; // 現在の取得開始位置
+    let aggregatedJson: any = null; // マージ後に返却する JSON
+    let arrayKey: string | null = null; // projects / issues / users など配列が入るキー
+
+    while (true) {
+      // URL に limit / offset を付与（既に付いていれば上書き）
+      const url = new URL(path, this.apiUrl);
+      url.searchParams.set('limit', limit.toString());
+      url.searchParams.set('offset', offset.toString());
+
+      // リクエスト実行
+      const res = await fetch(url.toString(), {
+        method,
+        headers: commonHeaders,
+      });
+      if (!res.ok) {
+        throw new Error(`Redmine API Error: ${res.status} ${res.statusText}`);
+      }
+      const json = (await res.json()) as Record<string, any>;
+
+      /**
+       * 2-1. 1 ページ目：返却 JSON の「配列キー」と total_count を特定
+       *  - Redmine の一覧 API は必ず
+       *       {
+       *         "<resource_plural>": [...array...],
+       *         "total_count": 123,
+       *         "limit": 100,
+       *         "offset": 0
+       *       }
+       *    の形で返る。
+       */
+      if (arrayKey === null) {
+        arrayKey =
+          Object.keys(json).find((k) => Array.isArray(json[k])) || null;
+        if (!arrayKey) {
+          // 配列キーが見つからない ⇒ そもそも一覧 API ではない
+          return json as T;
+        }
+        // 返却用オブジェクトのひな形を作成（total_count 等も保持）
+        aggregatedJson = { ...json, [arrayKey]: [...json[arrayKey]] };
+      } else {
+        // 2 ページ目以降は対象配列だけマージ
+        aggregatedJson[arrayKey].push(...json[arrayKey]);
+      }
 
-      // 更新処理（PUT）の場合、204ステータスかつコンテンツが返らないため空オブジェクトを返す
+      // 現在取得済み件数
+      const currentCount: number = aggregatedJson[arrayKey].length;
+      const total: number | undefined = aggregatedJson.total_count; // 無いエンドポイントもある
+
+      // ---------------------------------
+      // ループ終了判定
+      //   1) total_count がある     → 取得済 >= total_count
+      //   2) total_count が無い場合 → 返却件数 < limit（＝最終ページ）
+      // ---------------------------------
       if (
-        response.status === 204 ||
-        !response.headers.get('content-length') ||
-        response.headers.get('transfer-encoding')?.includes('chunked')
+        (total !== undefined && currentCount >= total) ||
+        json[arrayKey].length < limit
       ) {
-        return {} as T;
+        break;
       }
 
-      return await response.json();
-    } catch (error) {
-      console.error('Redmine API Request failed:', error);
-      throw error;
+      offset += limit; // 次ページへ
     }
+
+    return aggregatedJson as T;
   }
 
   /**
@@ -114,7 +179,7 @@ export class RedmineClient {
   // eslint-disable-next-line
   async resolveId(
     value: number | string,
-    mappings: NameIdMapping[],
+    mappings: (NameIdMapping | RedmineProject)[],
   ): Promise<number> {
     // 既にIDなら変換不要
     if (typeof value === 'number') {
@@ -126,10 +191,15 @@ export class RedmineClient {
       return Number(value);
     }
 
-    // 名前からIDを検索
-    const found = mappings.find(
-      (item) => item.name.toLowerCase() === value.toLowerCase(),
-    );
+    // 名前またはidentifierからIDを検索
+    const found = mappings.find((item) => {
+      const lowercaseValue = value.toLowerCase();
+      const nameMatch = item.name.toLowerCase() === lowercaseValue;
+      const identifierMatch =
+        'identifier' in item &&
+        item.identifier.toLowerCase() === lowercaseValue;
+      return nameMatch || identifierMatch;
+    });
     if (found) {
       return found.id;
     }
@@ -141,7 +211,7 @@ export class RedmineClient {
    * プロジェクト一覧を取得してIDマッピングを返す
    * @returns プロジェクトの名前とIDのマッピング配列
    */
-  async getProjects(): Promise<NameIdMapping[]> {
+  async getProjects(): Promise<RedmineProject[]> {
     if (this.projectsCache.length > 0) {
       return this.projectsCache;
     }
@@ -150,6 +220,7 @@ export class RedmineClient {
       projects: Array<{
         id: number;
         name: string;
+        identifier: string;
       }>;
     }
 
@@ -160,6 +231,7 @@ export class RedmineClient {
     this.projectsCache = response.projects.map((project) => ({
       id: project.id,
       name: project.name,
+      identifier: project.identifier,
     }));
 
     return this.projectsCache;
diff --git a/src/mastra/tools/redmine/types.ts b/src/mastra/tools/redmine/types.ts
index b5395371c..2d14dad5c 100644
--- a/src/mastra/tools/redmine/types.ts
+++ b/src/mastra/tools/redmine/types.ts
@@ -1,3 +1,12 @@
+/**
+ * Redmineプロジェクト情報
+ */
+export interface RedmineProject {
+  id: number;
+  name: string;
+  identifier: string;
+}
+
 /**
  * Redmineチケット作成/更新用の共通データ
  */
