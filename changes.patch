diff --git a/src/mastra/tools/sourcesTools.ts b/src/mastra/tools/sourcesTools.ts
index 778879e35..5244a0b26 100644
--- a/src/mastra/tools/sourcesTools.ts
+++ b/src/mastra/tools/sourcesTools.ts
@@ -1,6 +1,7 @@
 import { APICallError } from 'ai';
 import { z } from 'zod';
 import { createTool } from '@mastra/core/tools';
+import { MastraError } from '@mastra/core/error';
 import { eq, and } from 'drizzle-orm';
 import { sources } from '../../db/schema';
 import getDb from '../../db/index';
@@ -168,11 +169,11 @@ export const documentQueryTool = createTool({
               abortSignal: options?.abortSignal,
               runtimeContext,
             });
+            answer = res.text;
             const { success, reason } = judgeFinishReason(res.finishReason);
             if (!success) {
               throw new Error(reason);
             }
-            answer = res.text;
           } catch (error) {
             answer = `error occured while processing the query: ${error instanceof Error ? `: ${error.message}` : JSON.stringify(error)}`;
           }
@@ -193,11 +194,14 @@ export const documentQueryTool = createTool({
       };
     } catch (error) {
       let errorDetail: string;
-      if (APICallError.isInstance(error)) {
+      if (
+        error instanceof MastraError &&
+        APICallError.isInstance(error.cause)
+      ) {
         // APIコールエラーの場合はresponseBodyの内容を取得
-        errorDetail = error.message;
-        if (error.responseBody) {
-          errorDetail += `:\n${error.responseBody}`;
+        errorDetail = error.cause.message;
+        if (error.cause.responseBody) {
+          errorDetail += `:\n${error.cause.responseBody}`;
         }
       } else if (error instanceof Error) {
         errorDetail = error.message;
diff --git a/src/mastra/workflows/sourceRegistration.ts b/src/mastra/workflows/sourceRegistration.ts
index eddbd01ec..6550181cb 100644
--- a/src/mastra/workflows/sourceRegistration.ts
+++ b/src/mastra/workflows/sourceRegistration.ts
@@ -1,6 +1,7 @@
 /* eslint-disable import/prefer-default-export */
 import { APICallError } from 'ai';
 import { createWorkflow, createStep } from '@mastra/core/workflows';
+import { MastraError } from '@mastra/core/error';
 import { z } from 'zod';
 import { stepStatus } from './types';
 import { baseStepOutputSchema } from './schema';
@@ -82,9 +83,14 @@ const analyzeSourceStep = createStep({
       status = 'success';
     } catch (error) {
       let errorDetail: string;
-      if (APICallError.isInstance(error) && error.responseBody) {
+      if (
+        error instanceof MastraError &&
+        APICallError.isInstance(error.cause)
+      ) {
         // APIコールエラーの場合はresponseBodyの内容を取得
-        errorDetail = error.responseBody;
+        errorDetail = error.cause.responseBody
+          ? error.cause.responseBody
+          : error.cause.message;
       } else if (error instanceof Error) {
         errorDetail = error.message;
       } else {
@@ -176,11 +182,14 @@ const extractTopicAndSummaryStep = createStep({
       status = 'success';
     } catch (error) {
       let errorDetail: string;
-      if (APICallError.isInstance(error)) {
+      if (
+        error instanceof MastraError &&
+        APICallError.isInstance(error.cause)
+      ) {
         // APIコールエラーの場合はresponseBodyの内容を取得
-        errorDetail = error.message;
-        if (error.responseBody) {
-          errorDetail += `:\n${error.responseBody}`;
+        errorDetail = error.cause.message;
+        if (error.cause.responseBody) {
+          errorDetail += `:\n${error.cause.responseBody}`;
         }
       } else if (error instanceof Error) {
         errorDetail = error.message;
diff --git a/src/mastra/workflows/sourceReview/checklistExtraction.ts b/src/mastra/workflows/sourceReview/checklistExtraction.ts
index 664c33911..c49dc6bfe 100644
--- a/src/mastra/workflows/sourceReview/checklistExtraction.ts
+++ b/src/mastra/workflows/sourceReview/checklistExtraction.ts
@@ -1,6 +1,7 @@
 /* eslint-disable prefer-template */
 import { APICallError, NoObjectGeneratedError } from 'ai';
 import { createStep, createWorkflow } from '@mastra/core/workflows';
+import { MastraError } from '@mastra/core/error';
 import { z } from 'zod';
 import path from 'path';
 import { getReviewRepository } from '../../../db/repository/reviewRepository';
@@ -10,7 +11,7 @@ import FileExtractor from '../../../main/utils/fileExtractor';
 import { baseStepOutputSchema } from '../schema';
 import { stepStatus } from '../types';
 import { ChecklistExtractionAgentRuntimeContext } from '../../agents/workflowAgents';
-import { createRuntimeContext, judgeFinishReason } from '../../agents/lib';
+import { createRuntimeContext } from '../../agents/lib';
 
 // ワークフローの入力スキーマ
 const triggerSchema = z.object({
@@ -123,12 +124,6 @@ const checklistExtractionStep = createStep({
                 },
               },
             );
-            const { success, reason } = judgeFinishReason(
-              extractionResult.finishReason,
-            );
-            if (!success) {
-              throw new Error(reason);
-            }
 
             if (!extractionResult.object.isChecklistDocument) {
               throw new Error(
@@ -172,11 +167,14 @@ const checklistExtractionStep = createStep({
         } catch (error) {
           let errorMessage = '';
           let errorDetail: string;
-          if (APICallError.isInstance(error)) {
+          if (
+            error instanceof MastraError &&
+            APICallError.isInstance(error.cause)
+          ) {
             // APIコールエラーの場合はresponseBodyの内容を取得
-            errorDetail = error.message;
-            if (error.responseBody) {
-              errorDetail += `:\n${error.responseBody}`;
+            errorDetail = error.cause.message;
+            if (error.cause.responseBody) {
+              errorDetail += `:\n${error.cause.responseBody}`;
             }
           } else if (
             NoObjectGeneratedError.isInstance(error) &&
diff --git a/src/mastra/workflows/sourceReview/reviewExecution.ts b/src/mastra/workflows/sourceReview/reviewExecution.ts
index dc4ca11aa..7cc87b9b6 100644
--- a/src/mastra/workflows/sourceReview/reviewExecution.ts
+++ b/src/mastra/workflows/sourceReview/reviewExecution.ts
@@ -288,11 +288,14 @@ const reviewExecutionStep = createStep({
               }
             } catch (error) {
               let errorDetail: string;
-              if (APICallError.isInstance(error)) {
+              if (
+                error instanceof MastraError &&
+                APICallError.isInstance(error.cause)
+              ) {
                 // APIコールエラーの場合はresponseBodyの内容を取得
-                errorDetail = error.message;
-                if (error.responseBody) {
-                  errorDetail += `:\n${error.responseBody}`;
+                errorDetail = error.cause.message;
+                if (error.cause.responseBody) {
+                  errorDetail += `:\n${error.cause.responseBody}`;
                 }
               } else if (
                 NoObjectGeneratedError.isInstance(error) &&
